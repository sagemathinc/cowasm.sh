(()=>{var t,e,n={8445:function(t,e,n){"use strict";var r=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(4503),o=s(n(1618)),_=s(n(7152)),a=(0,o.default)("dylink:dlopen"),l=1048576;e.default=class{constructor(t,e,n,r,s,i,o,_){this.dlerrorPtr=0,this.pathToLibrary={},this.handleToLibrary={},this.mainGetFunction=t,this.memory=e,this.globalOffsetTable=n,this.functionTable=r,this.readFileSync=s,this.importObject=i,this.importWebAssemblySync=o,this.getMainInstanceExports=_}add_dlmethods(t){for(const e of["dlopen","dladdr","dlclose","dlerror","dlsym"])t[e]=this[e].bind(this)}getState(){const t=new Set;for(const e in this.handleToLibrary)t.add(e);return t}setState(t){for(const e in this.handleToLibrary)t.has(e)||this.dlclose(parseInt(e))}malloc(t,e){if(null==this._malloc){const t=this.mainGetFunction("malloc");if(null==t)throw Error("malloc from libc must be available in the  main instance");this._malloc=t}const n=this._malloc(t);if(0==n){const t=`out of memory -- malloc failed allocating ${e}`;throw a(t),r.warn(t),Error(t)}return n}free(t){if(null==this._free){const t=this.mainGetFunction("free");if(null==t)throw Error("free from libc must be available in the  main instance");this.free=t}this.free(t)}dlopenEnvHandler(t){return(e,n)=>{if(n in e)return Reflect.get(e,n);a("dlopenEnvHandler",n);const r=this.mainGetFunction(n,t);if(null!=r)return r;a("dlopenEnvHandler got null")}}symbolViaPointer(t){const e=this.getMainInstanceExports();if(null==e)return;a("symbolViaPointer",t);let n=e[`__WASM_EXPORT__${t}`];if(null==n)return null;const r=n();return a("symbolViaPointer",t,"--\x3e",r),r}dlopen(t,e){if(null==this.memory)throw Error("bug");const n=(0,i.recvString)(t,this.memory);if(a("dlopen: path='%s'",n),null!=this.pathToLibrary[n])return this.pathToLibrary[n].handle;const s=new Uint8Array(this.readFileSync(n)),o=(0,_.default)(s);a("metadata",o);let I=Math.pow(2,o.memoryAlign??0);if(I=Math.max(I,16),null==o.memorySize)throw Error("memorySize must be defined in the shared library");const c=this.malloc(o.memorySize+I,"space for "+n),S=this.malloc(l,"stack for "+n);a("allocating %s bytes for shared library -- at ",o.memorySize+I,c);const u=o.memorySize?(0,i.alignMemory)(c,I):0,f=o.tableSize?this.functionTable.getNextTablePos():0,E={memory:this.memory,__indirect_function_table:this.functionTable.table,__memory_base:u,__table_base:f,__stack_pointer:new WebAssembly.Global({value:"i32",mutable:!0},S+l)};a("env =",E);const d={...this.importObject,env:new Proxy(E,{get:this.dlopenEnvHandler(n)}),"GOT.mem":this.globalOffsetTable.mem,"GOT.func":this.globalOffsetTable.func};o.tableSize&&this.functionTable.prepareForImport(o.tableSize);let A=0;a.enabled&&(A=(new Date).valueOf(),a("importing ",n));const T=this.importWebAssemblySync(n,d);a.enabled&&a("imported ",n,", time =",(new Date).valueOf()-A,"ms");const h={};for(const t in T.exports){if(null!=this.globalOffsetTable.funcMap[t])continue;const e=T.exports[t];null==h[t]&&"function"==typeof e&&(h[t]=this.functionTable.set(e))}for(const t in this.globalOffsetTable.funcMap){const e=T.exports[t]??this.getMainInstanceExports()[t];if(a("table[%s] = %s",this.globalOffsetTable.funcMap[t]?.index,t,e),null==e)throw Error(`dlopen -- UNRESOLVED FUNCTION: ${t}`);this.globalOffsetTable.funcMap[t].set(e),h[t]=this.globalOffsetTable.funcMap[t].index,delete this.globalOffsetTable.funcMap[t]}const{memMap:m}=this.globalOffsetTable;for(const t in m){const e=m[t];delete m[t];const s=T.exports[t]?.value;if(null==s){const s=this.symbolViaPointer(t);if(null==s)throw r.error(`dlopen: FATAL ERROR - Symbol '${t}' is not available in the cowasm kernel or any loaded library via __WASM_EXPORT__${t} but is required by '${n}'.`),Error(`dlopen -- UNRESOLVED SYMBOL: ${t}`);e.value=s}else e.value=s+u}null!=T.exports.__wasm_call_ctors&&(a("calling __wasm_call_ctors for dynamic library"),T.exports.__wasm_call_ctors()),null!=T.exports.__wasm_apply_data_relocs&&(a("calling __wasm_apply_data_relocs for dynamic library"),T.exports.__wasm_apply_data_relocs());const p=Math.max(0,...Object.keys(this.handleToLibrary).map((t=>parseInt(t))))+1,g={path:n,handle:p,instance:T,symToPtr:h,stack_alloc:S};return this.pathToLibrary[n]=g,this.handleToLibrary[p]=g,p}dlsym(t,e){const n=(0,i.recvString)(e,this.memory);a("dlsym: handle=%s, symName='%s'",t,n);const r=this.handleToLibrary[t];if(null==r)throw Error(`dlsym: invalid handle ${t}`);let s=r.symToPtr[n];return a("sym= ",n,", ptr = ",s),null!=s?s:(s=r.instance.exports[`__WASM_EXPORT__${n}`]?.(),null!=s?s:(this.set_dlerror(`dlsym: handle=${t} - unknown symbol '${n}'`),0))}dladdr(){return a("dladdr: NOT IMPLEMENTED"),this.set_dlerror("dladdr is not yet implemented"),0}dlclose(t){a("dlclose",t);const e=this.handleToLibrary[t];if(null==e)return this.set_dlerror(`dlclose: invalid handle ${t}`),1;if(null!=e){for(const t in e.symToPtr){const n=e.symToPtr[t];this.functionTable.delete(n)}this.free(e.stack_alloc),delete this.handleToLibrary[t],delete this.pathToLibrary[e.path]}return 0}set_dlerror(t){this.dlerrorPtr||(this.dlerrorPtr=this.malloc(1024,"dlerror pointer")),(0,i.sendString)(t.slice(0,1023),this.dlerrorPtr,this.memory)}dlerror(){return this.dlerrorPtr}getFunction(t){for(const e in this.handleToLibrary){const{path:n,symToPtr:r,instance:s}=this.handleToLibrary[e],i=r[t]??s.exports[`__WASM_EXPORT__${t}`]?.();if(null!=i)return a("getFunction",t,n,"handle=",e),this.functionTable.get(i)}}}},3146:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=r(n(1618)),i=n(4503),o=(0,s.default)("dylink:function-table");e.default=class{constructor(t){this.availableTableIndexes=new Set,this.nextTablePos=0,o("constructor"),this.table=t}updateAfterImport(){this.nextTablePos=Math.max(0,...(0,i.nonzeroPositions)(this.table))+1}prepareForImport(t){this.nextTablePos+=t,this.table.length<=this.nextTablePos+50&&this.table.grow(this.nextTablePos+50-this.table.length)}getNextTablePos(){return this.nextTablePos}getNextAvailableIndex(){for(const t of this.availableTableIndexes)return this.availableTableIndexes.delete(t),o("getNextAvailableIndex: from availableTableIndexes",t),t;const t=this.nextTablePos;return o("getNextAvailableIndex: from nextTablePos",t),this.nextTablePos+=1,this.table.length<=this.nextTablePos+50&&this.table.grow(this.nextTablePos+50-this.table.length),t}setLater(){const t=this.getNextAvailableIndex();return{index:t,set:e=>{this.set(e,t)}}}set(t,e){const n=e??this.getNextAvailableIndex();if(null!=this.table.get(n))throw Error("BUG: trying to set a table index that is already set");return this.table.set(n,t),n}get(t){return this.table.get(t)}delete(t){this.table.set(t,null),this.availableTableIndexes.add(t)}}},4783:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=(0,r(n(1618)).default)("dylink:global-offset-table");e.default=class{constructor(t,e){this.GOT={},this.memMap={},this.funcMap={},this.mem=new Proxy(this.GOT,{get:this.GOTMemHandler.bind(this)}),this.func=new Proxy(this.GOT,{get:this.GOTFuncHandler.bind(this)}),this.getMainInstanceExports=t,this.functionTable=e}getState(){const t=new Set;for(const e in this.GOT)t.add(e);return t}setState(t){for(const e in this.GOT)t.has(e)||(delete this.GOT[e],delete this.memMap[e],delete this.funcMap[e])}GOTMemHandler(t,e){if(e in this.GOT)return Reflect.get(this.GOT,e);let n=this.GOT[e];if(!n){const t=new WebAssembly.Global({value:"i32",mutable:!0},0);this.memMap[e]=t,n=this.GOT[e]=t}return n}GOTFuncHandler(t,e){if(e in this.GOT)return Reflect.get(this.GOT,e);let n=this.GOT[e];if(!n){let t;const r=this.getMainInstanceExports()[`__WASM_EXPORT__${e}`];null==r?(this.funcMap[e]=this.functionTable.setLater(),t=this.funcMap[e].index):t=r(),s("GOTFuncHandler ",e,"--\x3e",t);const i=new WebAssembly.Global({value:"i32",mutable:!0},t);n=this.GOT[e]=i}return n}}},2963:function(t,e,n){"use strict";var r=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=s(n(7653)),o=s(n(1618)),_=s(n(3146)),a=s(n(8445)),l=s(n(4783)),I=(0,o.default)("dylink"),c=(0,o.default)("dylink:import");e.default=async function({path:t,importObject:e,importWebAssembly:n,importWebAssemblySync:s,readFileSync:o,stub:S,allowMainExports:u}){let f=null;null==e&&(e={});let{env:E}=e;null==E&&(E=e.env={});let{memory:d}=E;null==d&&(d=E.memory=new WebAssembly.Memory({initial:10}));let{__indirect_function_table:A}=E;null==A&&(A=E.__indirect_function_table=new WebAssembly.Table({initial:1500,element:"anyfunc"}));const T=new _.default(A);function h(t){if(null==f)return;const e=f.exports[`__WASM_EXPORT__${t}`];if(null==e)return;const n=e();return I("functionViaPointer",t,n),T.get(n)}function m(){if(null==f?.exports)throw Error("bug");return f.exports}const p=new l.default(m,T),g=new a.default((function(t,n=""){I("getFunction",t);let s=e?.env?.[t];if(null!=s)return I("getFunction ",t,"from env"),s;if(s=h(t),null!=s)return I("getFunction ",t,"from function pointer"),s;if(s=g.getFunction(t),null!=s)return I("getFunction ",t,"from other library"),s;if(u&&(s=f?.exports[t],null!=s))return I("getFunction ",t,"from mainInstance exports (potentially dangerous!)"),s;if(n?.includes("numpy")&&t.startsWith("_Z"))return()=>{r.log("WARNING: calling dangerous stub for ",t)};if(n)throw Error(`${t} -- undefined when importing ${n}`);return W.env[t]}),d,p,T,o,e,s,m);g.add_dlmethods(E);const W=S?{...e,env:(0,i.default)(e.env,h,S)}:e;let R=0;return c.enabled&&(R=(new Date).valueOf(),c("importing ",t)),f=null!=n?await n(t,W):s(t,W),c.enabled&&c("imported ",t,", time =",(new Date).valueOf()-R,"ms"),null!=f.exports.__wasm_call_ctors&&f.exports.__wasm_call_ctors(),T.updateAfterImport(),f.env=E,f.getDlopenState=()=>({dlopen:g.getState(),got:p.getState()}),f.setDlopenState=t=>{const{dlopen:e,got:n}=t;g.setState(e),p.setState(n)},f}},9168:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=void 0;const s=r(n(2963));e.default=s.default;var i=n(4503);Object.defineProperty(e,"MBtoPages",{enumerable:!0,get:function(){return i.MBtoPages}})},7152:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){let e=0,r=0;function s(){let n=0,r=1;for(;;){const s=t[e++];if(n+=(127&s)*r,r*=128,!(128&s))break}return n}function i(){const r=s();return e+=r,function(t,e,r){const s=e+r;let i=e;for(;t[i]&&i<s;)i++;const o=t.slice(e,i);return n.decode(o)}(t,e-r,r)}function o(t,e){if(t)throw new Error(e)}let _="dylink.0";o(!(1836278016==new Uint32Array(new Uint8Array(t.subarray(0,24)).buffer)[0]),"need to see wasm magic number"),o(0!==t[8],"need the dylink section to be first"),e=9;const a=s();r=e+a,_=i();const l={neededDynlibs:[],tlsExports:new Set,weakImports:new Set};if(null==l.neededDynlibs)throw Error("bug: typescript");if(null==l.tlsExports)throw Error("bug: typescript");if(null==l.weakImports)throw Error("bug: typescript");if("dylink"==_){l.memorySize=s(),l.memoryAlign=s(),l.tableSize=s(),l.tableAlign=s();let t=s();for(let e=0;e<t;++e){const t=i();l.neededDynlibs.push(t)}}else{o("dylink.0"!==_,"invalid format -- name must be dylink.0 or dylink");const n=1,a=2,I=3,c=4,S=256,u=3,f=1;for(;e<r;){const r=t[e++],o=s();if(r===n)l.memorySize=s(),l.memoryAlign=s(),l.tableSize=s(),l.tableAlign=s();else if(r===a){const t=s();for(let e=0;e<t;++e){const t=i();l.neededDynlibs.push(t)}}else if(r===I){let t=s();for(;t--;){const t=i();s()&S&&l.tlsExports.add(t)}}else if(r===c){let t=s();for(;t--;){i();const t=i();(s()&u)==f&&l.weakImports.add(t)}}else e+=o}}return l};const n=new TextDecoder},7653:function(t,e,n){"use strict";var r=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=s(n(1618)),o=(0,i.default)("stub"),_=(0,i.default)("stub:use"),a=(0,i.default)("stub:first");e.default=function(t,e,n){return new Proxy(t,{get(t,s){if(s in t)return Reflect.get(t,s);const i=e(s);return null!=i?(o("using function via pointer for ",s),i):("warn"==n&&r.warn(`\n* WARNING: creating UNSAFE stub for ${String(s)}.  Please fix ASAP!`),_.enabled||a.enabled?(...t)=>(function(t,e){if(_("WARNING: using stub",t,e),a.enabled){if(l.has(t))return;l.add(t)}a("WARNING: first use of stub",t,e)}(s,t),0):()=>0)}})};const l=new Set([])},4503:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=e.alignMemory=e.strlen=e.sendString=e.recvString=e.nonzeroPositions=void 0,e.nonzeroPositions=function(t){const e=[];for(let n=0;n<t.length;n++)null!=t.get(n)&&e.push(n);return e};const n=new TextDecoder,r=new TextEncoder;function s(t,e){const n=new Uint8Array(e.buffer);let r=t;for(;n[r];)r+=1;return r-t}e.recvString=function(t,e){const r=s(t,e),i=e.buffer.slice(t,t+r);return n.decode(i)},e.sendString=function(t,e,n){const s=r.encode(t),i=s.length+1,o=new Int8Array(n.buffer,e,i);o.set(s),o[i-1]=0},e.strlen=s,e.alignMemory=function(t,e){return Math.ceil(t/e)*e},e.MBtoPages=function(t){return 16*t}},7746:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initConstants=void 0;const n={};e.default=n,e.initConstants=function(t){const{names:e,values:r}=function({callFunction:t,recv:e},n){let r=t("getConstants");if(0==r)throw Error("unable to receive JSON object");return JSON.parse(e.string(r))}(t);for(let t=0;t<e.length;t++)n[e[t]]=r[t]}},3691:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function({sleep:t}){return{epoll_create:t=>0,epoll_create1:t=>0,epoll_ctl:(t,e,n,r)=>0,epoll_wait:(e,n,r,s)=>(t?.(s),0)}}},7962:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.nativeToWasm=void 0;const s=r(n(7746));e.default=function(t){const e=s.default[t],n=Error(`Error ${t}  (errno=${e}).`);return n.wasiErrno=e,n},e.nativeToWasm=function(t){const e=["E2BIG","EACCES","EBADF","EBUSY","ECHILD","EDEADLK","EEXIST","EFAULT","EFBIG","EINTR","EINVAL","EIO","EISDIR","EMFILE","EMLINK","ENFILE","ENODEV","ENOENT","ENOEXEC","ENOMEM","ENOSPC","ENOTDIR","ENOTTY","ENXIO","EPERM","EPIPE","EROFS","ESPIPE","ESRCH","ETXTBSY","EXDEV"],n={};for(const r of e){const e=t.constants?.[r];if(!e)throw Error(`posix constant ${r} not known`);const i=s.default[r];if(!i)throw Error(`wasm constant ${r} not known`);n[e]=i}return n}},6600:function(t,e,n){"use strict";var r=n(8764).Buffer,s=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=i(n(5022)),_=n(7962),a=i(n(7746)),l=n(6470),I=(0,o.default)("posix:fork-exec"),c=r.from("\0asm");e.default=function({posix:t,recv:e,wasi:n,run:i,fs:o,child_process:S}){function u(t){const e=n.FD_MAP.get(t);return null==e?-1:e.real}function f(){const e={};for(const r of n.FD_MAP.keys()){const s=n.FD_MAP.get(r);try{t.is_inheritable(s.real)&&(e[r]=s.real)}catch(t){I("getInheritableDescriptorsMap",s.real,t)}}return e}return{python_wasm_set_inheritable:(e,n)=>{if(null==t.set_inheritable)return 0;const r=u(e);if(-1==r)throw Error("invalid file descriptor");try{t.set_inheritable(r,!!n)}catch(t){return 0}return 0},python_wasm_fork_exec:(n,r,s,i,o,l,c,S,E,d,A,T,h,m,p,g,W,R,O,y,w,N,b,D,F,L)=>{I("called fork_exec"),I("ignoring these: ",{restore_signals:m,call_setsid:p,pgid_to_set:g,call_setgid:W,gid:R,call_setgroups:O,groups_size:y,groups:w,call_setuid:N,uid:b,child_umask:D,child_sigmask:F}),I("before change",{p2cread:o,p2cwrite:l,c2pread:c,c2pwrite:S,errread:E,errwrite:d,errpipe_read:A,errpipe_write:T});const G=[],P=(0,_.nativeToWasm)(t);for(let t=0;t<100;t++)G[t]=P[t]??a.default.ENOENT;const C=JSON.stringify(f()),v=e.arrayOfStrings(s);v.length>0&&v.push(`WASI_FD_INFO=${C}`);const M={exec_array:e.arrayOfStrings(n),argv:e.arrayOfStrings(r),envp:v,cwd:e.string(i),p2cread:u(o),p2cwrite:u(l),c2pread:u(c),c2pwrite:u(S),errread:u(E),errwrite:u(d),errpipe_read:u(A),errpipe_write:u(T),close_fds:h,fds_to_keep:e.arrayOfI32(L).map(u),err_map:G,WASI_FD_INFO:C};I("opts",M),I("descriptors map = ",f());try{const e=t.fork_exec(M);return I("got subprocess = ",e),e}catch(t){return I("error doing fork",t),-1}},cowasm_vforkexec:(t,n=0)=>{const _=e.arrayOfStrings(t),a=n?e.string(n):"";if(I("cowasm_vforkexec",_),!_[0])throw I("cowasm_vforkexec","no argv[0]"),Error("argv[0] must be defined");try{if(!_[0].includes("/")){I("cowasm_vforkexec","go through search path to find",_[0]);for(const t of a.split(":")){const e=(0,l.join)(t,_[0]);try{if(o.statSync(e).mode&o.constants.S_IXUSR){_[0]=e;break}}catch(t){}}I("cowasm_vforkexec","found",_[0])}if(!_[0].includes("/")||!o.existsSync(_[0]))return I("cowasm_vforkexec","could not find executable"),s.error(`${_[0]}: not found\n`),127;if(!(o.statSync(_[0]).mode&o.constants.S_IXUSR))return I("cowasm_vforkexec","executable has wrong permissions (missing IXUSR)"),s.error(`${_[0]}: Permission denied\n`),126;const t=function(t){const e=o.openSync(t,"r"),n=r.alloc(4);return o.readSync(e,n,0,4,0),c.equals(n)}(_[0]);if(I("isWasm = ",t),t)return I("running wasm executable",_[0]),i(_);if(null!=S)return I("running native executable",_[0]),function(t){if(null==S)return s.log("ERROR: Running native commands not yet implemented in this environment."),1;try{return S.execFileSync(t[0],t.slice(1),{stdio:"inherit"}),0}catch(t){return t.status}}(_);I("can't run anything"),s.error(`${_[0]}: cannot execute binary file\n`)}catch(t){s.trace(`${_[0]}: ${t}`)}return 127}}}},8256:function(t,e,n){"use strict";var r=n(4155),s=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=i(n(6600)),_=i(n(3691)),a=i(n(9939)),l=i(n(2252)),I=i(n(7810)),c=i(n(3976)),S=i(n(2518)),u=i(n(3505)),f=i(n(7683)),E=i(n(5198)),d=i(n(434)),A=i(n(5268)),T=i(n(6542)),h=i(n(1544)),m=i(n(8385)),p=i(n(1142)),g=n(7746),W=i(n(7746)),R=i(n(5022)),O=(0,R.default)("posix:not-implemented"),y=(0,R.default)("posix:call"),w=(0,R.default)("posix:return");r.env.__STUPID_HACK__="",e.default=function(t){const e={...(0,_.default)(t),...(0,o.default)(t),...(0,a.default)(t),...(0,l.default)(t),...(0,I.default)(t),...(0,c.default)(t),...(0,S.default)(t),...(0,u.default)(t),...(0,f.default)(t),...(0,A.default)(t),...(0,E.default)(t),...(0,d.default)(t),...(0,h.default)(t),...(0,T.default)(t),...(0,m.default)(t),...(0,p.default)(t)},n={};let r,i={};if(null!=t.posix.constants)for(const e in t.posix.constants)i[t.posix.constants[e]]=e;function R(e){const n=i[e];if(null!=n){const e=W.default[n];if(null!=e)return void t.callFunction("setErrno",e)}O("Unable to map nativeErrno (please update code)",e)}r=null!=t.posix.chdir?()=>{try{t.posix.chdir?.(t.getcwd())}catch(t){}}:()=>{};for(const i in e)n[i]=(...n)=>{r();try{y(i,n);const t=e[i](...n);return w(i,t),t}catch(e){return null!=e.wasiErrno?t.callFunction("setErrno",e.wasiErrno):null!=e.code?R(parseInt(e.code)):"NotImplementedError"==e.name?t.callFunction("setErrno",W.default.ENOSYS):(s.trace(`WARNING: Posix library raised exception without error code: ${e}`),O(`Posix call to ${i} raised exception without error code`,e)),e.ret??-1}};return n.init=()=>{(0,g.initConstants)(t)},n}},9939:function(t,e,n){"use strict";var r=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.wasmToNativeSocktype=e.wasmToNativeFamily=void 0;const i=n(911),o=s(n(7746));function _(t,e){if(0==e)return e;if(e==o.default.AF_INET)return t.constants.AF_INET;if(e==o.default.AF_INET6)return t.constants.AF_INET6;throw Error(`unsupported WASM address family: ${e}`)}function a(t,e){if(0==e)return e;if(e==t.constants.AF_INET)return o.default.AF_INET;if(e==t.constants.AF_INET6)return o.default.AF_INET6;throw Error(`unsupported native address family: ${e}`)}function l(t,e){if(!e)return e;let n=0;for(const s in o.default)if(s.startsWith("SOCK")&&o.default[s]&e){if(null==t.constants[s]){const t=`We need the constant ${s} to be defined in the posix-node module.`;throw r.warn(t),Error(t)}n|=t.constants[s],e&=~o.default[s]}if(0!=e){const t=`Unable to convert remainging socktype ${e} to native. Make sure all SOCK* constants are defined.`;throw r.warn(t),Error(t)}return n}function I(t,e){if(!e)return e;let n=0;for(const s in t.constants)if(s.startsWith("SOCK")&&t.constants[s]&e){if(null==o.default[s]){const t=`We need the constant ${s} to be defined in the posix-node module.`;throw r.warn(t),Error(t)}n|=o.default[s],e&=~t.constants[s]}if(0!=e){const t=`Unable to convert remainging socktype ${e} to native. Make sure all SOCK* posix.constants are defined.`;throw r.warn(t),Error(t)}return n}e.default=function({memory:t,posix:e,callFunction:n,recv:r,send:s,free:o}){const c={};for(const t of" getprotobyname getservbyname getservbyport getnameinfo getpeername".split(/\s+/))c[t]=()=>(0,i.notImplemented)(t);function S(e,n,r){const i=s.malloc(2+n),o=new DataView(t.buffer);o.setUint16(i,e,!0);for(let t=0;t<n;t++)o.setUint8(i+2+t,r[t]);return i}function u(e,n){new DataView(t.buffer).setUint32(e,n,!0)}function f(t){const e=s.malloc(4*(t.length+1));if(0==e)throw Error("out of memory");for(let n=0;n<t.length;n++)u(e+4*n,s.string(t[n]));return u(e+4*t.length,0),e}function E(t){const r=a(e,t.h_addrtype);return n("sendHostent",s.string(t.h_name),f(t.h_aliases),r,t.h_length,f(t.h_addr_list),t.h_addr_list.length)}c.gethostbyname=t=>{try{null==e.gethostbyname&&(0,i.notImplemented)("gethostbyaddr",0);const n=r.string(t);return E(e.gethostbyname(n))}catch(t){throw t.ret=0,t}},c.gethostbyaddr=(t,s,_)=>{try{null==e.gethostbyaddr&&(0,i.notImplemented)("gethostbyaddr",0);const s=n("recvAddr",t,_);if(0==s)return 0;const a=r.string(s);return o(s),E(e.gethostbyaddr(a))}catch(t){throw t.ret=0,t}},c.getaddrinfo=(o,c,f,E)=>{if(null==e.getaddrinfo)return(0,i.notImplemented)("getaddrinfo"),-1;const d=r.string(o),A=r.string(c),T=function(n){const r=new DataView(t.buffer),s=r.getUint32(n,!0);n+=4;let i=_(e,r.getUint32(n,!0));n+=4;const o=l(e,r.getUint32(n,!0));return n+=4,{flags:s,family:i,socktype:o,protocol:r.getUint32(n,!0)}}(f);let h;try{h=e.getaddrinfo(d,A,T)}catch(t){if(t.code)return parseInt(t.code);throw t}let m=0,p=0,g=h.length-1;for(;g>=0;){const t=h[g];t.ai_socktype=I(e,t.ai_socktype),t.ai_family=t.sa_family=a(e,t.ai_family);const r=S(t.sa_family,t.ai_addrlen,t.sa_data);if(!r)throw Error("error creating sockaddr");if(p=n("sendAddrinfo",t.ai_flags,t.ai_family,t.ai_socktype,t.ai_protocol,t.ai_addrlen,r,null!=t.ai_canonname?s.string(t.ai_canonname):0,m),!p)throw Error("error creating addrinfo structure");m=p,g-=1}if(!p)throw Error("error creating addrinfo structure");return u(E,p),0};const d={};c.gai_strerror=t=>{if(null!=d[t])return d[t];const n=s.string(e.gai_strerror?.(t)??"Unknown error");return d[t]=n,n};const A={};c.hstrerror=t=>{if(null!=A[t])return A[t];const n=s.string(e.hstrerror?.(t)??"Unknown error");return A[t]=n,n};let T=null;return c.__h_errno_location=()=>{if(null==T&&(T=s.malloc(4),s.i32(T,0)),null==T)throw Error("bug");return T},c},e.wasmToNativeFamily=_,e.wasmToNativeSocktype=l},2252:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=n(911),i=r(n(7746));e.default=function({posix:t,recv:e,send:n,callFunction:r}){return{if_indextoname:(e,r)=>{const{if_indextoname:o}=t;let _;null==o&&(0,s.notImplemented)("if_indextoname");try{_=o(e)}catch(t){return 0}return n.string(_,{ptr:r,len:i.default.IFNAMSIZ}),r},if_nametoindex:n=>{const{if_nametoindex:r}=t;null==r&&(0,s.notImplemented)("if_nametoindex");const i=e.string(n);try{return r(i)}catch(t){return 0}},if_nameindex:()=>{const{if_nameindex:e}=t;try{if(null==e){const t=r("createNameIndexArray",0);if(0==t)throw Error("out of memory");return t}const t=e(),s=r("createNameIndexArray",t.length);if(0==s)throw Error("out of memory");for(let e=0;e<t.length;e++)r("setNameIndexElement",s,e,t[e][0],n.string(t[e][1]));return s}catch(t){throw t.ret=0,t}},if_freenameindex:t=>{r("freeNameIndexArray",t)}}}},7810:(t,e,n)=>{"use strict";var r=n(5108);Object.defineProperty(e,"__esModule",{value:!0});const s=n(911);e.default=function(t){const{callFunction:e,posix:n,recv:i,send:o,wasi:_}=t;function a(t,n){e("set_statvfs",t,n.f_bsize,n.f_frsize,BigInt(n.f_blocks),BigInt(n.f_bfree),BigInt(n.f_bavail),BigInt(n.f_files),BigInt(n.f_ffree),BigInt(n.f_favail),n.f_fsid,n.f_flag,n.f_namemax)}function l(t){const e=_.FD_MAP.get(t);return null==e?-1:e.real}t.state.user_from_uid_cache={};const I={syslog:()=>{(0,s.notImplemented)("syslog")},login_tty:t=>(null==n.login_tty&&(0,s.notImplemented)("login_tty"),n.login_tty(l(t)),0),statvfs:(t,e)=>{null==n.statvfs&&(0,s.notImplemented)("statvfs");const r=i.string(t);return a(e,n.statvfs(r)),0},fstatvfs:(t,e)=>(null==n.fstatvfs&&(0,s.notImplemented)("fstatvfs"),a(e,n.fstatvfs(l(t))),0),ctermid:e=>{if(null==n.ctermid&&(0,s.notImplemented)("ctermid"),e){const t=n.ctermid();return o.string(t,{ptr:e,len:t.length+1}),e}if(t.state.ctermidPtr)return t.state.ctermidPtr;const r=n.ctermid();return t.state.ctermidPtr=o.string(r)},getpwnam_r:(t,e,n,r,s)=>(o.pointer(s,0),0),getpwuid:()=>0,getpwuid_r:(t,e,n,r,s)=>(o.pointer(s,0),0),openpty:()=>{(0,s.notImplemented)("openpty")},msync:()=>{(0,s.notImplemented)("msync")},madvise:()=>{(0,s.notImplemented)("madvise")},mremap:()=>{(0,s.notImplemented)("mremap")},tmpfile:()=>{(0,s.notImplemented)("tmpfile")},tcflush:()=>{(0,s.notImplemented)("tcflush")},getpwnam:()=>(r.log("STUB: getpwnam"),0),getrlimit:()=>{(0,s.notImplemented)("getrlimit")},setrlimit:()=>{(0,s.notImplemented)("setrlimit")},user_from_uid:(e,n=0)=>n?0:t.state.user_from_uid_cache[e]?t.state.user_from_uid_cache[e]:t.state.user_from_uid_cache[e]=o.string(`${e}`),group_from_gid:(t,e=0)=>I.user_from_uid(t,e),getrusage:(t,e)=>((0,s.notImplemented)("getrusage"),0)};return I}},3976:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(911);e.default=function({}){const t={};for(const e of"sched_get_priority_max sched_get_priority_min sched_getparam sched_getscheduler sched_rr_get_interval sched_setparam sched_setscheduler".split(/\s+/))t[e]=()=>(0,r.notImplemented)(e);return t}},2518:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.setSignalSet=e.getSignalSet=void 0;const s=r(n(7746)),i=n(911),o={};function _(t){return null==o[t]&&(o[t]=new Set),o[t]}e.getSignalSet=_,e.setSignalSet=function(t,e){o[t]=e};const a=new Set;e.default=function({process:t}){const e={kill:(e,n)=>(null==t.kill||t.kill(e,n),0),raise:n=>e.kill(t.pid??1,n),killpg:(e,n)=>(null==t.kill||t.kill(-e,n),0),sigemptyset:t=>(_(t).clear(),0),sigfillset:t=>{const e=_(t);for(let t=1;t<=31;t++)e.add(t);return 0},sigaddset:(t,e)=>(_(t).add(e),0),sigdelset:(t,e)=>(_(t).delete(e),0),sigismember:(t,e)=>_(t).has(e)?1:0,sigprocmask:(t,e,n)=>{try{if(!e)return 0;const r=_(e);switch(t){case s.default.SIG_BLOCK:for(const t of r)a.add(t);return 0;case s.default.SIG_UNBLOCK:for(const t of r)a.delete(t);return 0;case s.default.SIG_SETMASK:a.clear();for(const t of r)a.add(t);return 0;default:throw Error(`sigprocmask - invalid how=${t}`)}}finally{n&&function(t){const e=_(t);e.clear();for(const t of a)e.add(t)}(n)}},sigsuspend:()=>{(0,i.notImplemented)("sigsuspend")}};return e.pthread_sigmask=e.sigprocmask,e}},3505:function(t,e,n){"use strict";var r=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=s(n(7962)),o=(n(9939),s(n(7746)),n(3728),n(911));e.default=function({callFunction:t,posix:e,recv:n,wasi:s}){return{socket(t,e,n){throw(0,i.default)("ENOTSUP")},bind(e,s,i){r.log("bind stub ",{socket:e,sockaddrPtr:s,address_len:i});const _=t("recv_sockaddr_sa_family",s),a=n.buffer(t("recv_sockaddr_sa_data",s),i-2);return r.log({sa_family:_,sa_data:a.toString()}),r.log("sa_data = ",new Uint8Array(a)),(0,o.notImplemented)("bind"),-1},getsockname:(t,e,n)=>(r.log("getsockname stub ",{socket:t,sockaddrPtr:e,addressLenPtr:n}),(0,o.notImplemented)("getsockname"),-1),connect:(t,e,n)=>(r.log("connect stub ",{socket:t,sockaddrPtr:e,address_len:n}),(0,o.notImplemented)("connect"),-1)}}},7683:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(911),s=n(2518);e.default=function(t){const{callFunction:e,posix:n,recv:i,send:o}=t;function _(){return null==t.state.fileActions&&(t.state.spawn_fileActions={}),t.state.spawn_fileActions}function a(){return null==t.state.spawn_attrs&&(t.state.spawn_attrs={}),t.state.spawn_attrs}function l(t,e=!1){const n=a();if(null==n[t])return n[t]={};const r=n[t];if(null!=r)return e&&(null!=r.sigdefaultPtr&&(r.sigdefault=(0,s.getSignalSet)(r.sigdefaultPtr)),null!=r.sigmaskPtr&&(r.sigmask=(0,s.getSignalSet)(r.sigmaskPtr))),r;throw Error("bug")}return{posix_spawnattr_setschedparam:(t,n)=>(l(t).schedparam={sched_priority:e("get_posix_spawnattr_schedparam_sched_priority",n)},0),posix_spawnattr_getschedparam:(t,n)=>{const r=l(t).schedparam??0;return e("set_posix_spawnattr_schedparam_sched_priority",n,r),0},posix_spawnattr_setschedpolicy:(t,e)=>(l(t).schedpolicy=e,0),posix_spawnattr_getschedpolicy:(t,e)=>(o.i32(e,l(t).schedpolicy??0),0),posix_spawnattr_init:t=>(a()[t]={},0),posix_spawnattr_destroy:t=>(delete a()[t],0),posix_spawnattr_setflags:(t,e)=>(l(t).flags=e,0),posix_spawnattr_getflags:(t,e)=>(o.i32(e,l(t).flags??0),0),posix_spawnattr_setpgroup:(t,e)=>(l(t).pgroup=e,0),posix_spawnattr_getpgroup:(t,e)=>(o.i32(e,l(t).pgroup??0),0),posix_spawnattr_setsigmask:(t,e)=>(l(t).sigmaskPtr=e,0),posix_spawnattr_getsigmask:(t,e)=>{const n=l(t).sigmaskPtr;return(0,s.setSignalSet)(e,(0,s.getSignalSet)(n)),0},posix_spawnattr_setsigdefault:(t,e)=>(l(t).sigdefaultPtr=e,0),posix_spawnattr_getsigdefault:(t,e)=>{const n=l(t).sigdefaultPtr;return(0,s.setSignalSet)(e,(0,s.getSignalSet)(n)),0},posix_spawn:(t,e,s,a,I,c)=>{null==n.posix_spawn&&(0,r.notImplemented)("posix_spawn");const S=i.string(e),u=i.arrayOfStrings(I),f=i.arrayOfStrings(c),E=_(),d=n.posix_spawn(S,E[s],l(a,!0),u,f);return o.i32(t,d),0},posix_spawnp:(t,e,s,a,I,c)=>{null==n.posix_spawnp&&(0,r.notImplemented)("posix_spawnp");const S=i.string(e),u=i.arrayOfStrings(I),f=i.arrayOfStrings(c),E=_(),d=n.posix_spawnp(S,E[s],l(a,!0),u,f);return o.i32(t,d),0},posix_spawn_file_actions_init:t=>(_()[t]=[],0),posix_spawn_file_actions_destroy:t=>(delete _()[t],0),posix_spawn_file_actions_addclose:(t,e)=>{const n=_();return null==n[t]&&(n[t]=[]),n[t].push(["addclose",e]),0},posix_spawn_file_actions_addopen:(t,e,n,r,s)=>{const o=_();null==o[t]&&(o[t]=[]);const a=i.string(n);return o[t].push(["addopen",e,a,r,s]),0},posix_spawn_file_actions_adddup2:(t,e,n)=>{const r=_();return null==r[t]&&(r[t]=[]),r[t].push(["adddup2",e,n]),0}}}},5268:function(t,e,n){"use strict";n(5108);var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(6470),r(n(7746)),r(n(7962));const s=n(911);e.default=function({fs:t,process:e,recv:n,wasi:r}){return{chmod:(t,e)=>0,_fchmod:(t,e)=>0,fchmodat:(t,e,n,r)=>0,lchmod:(t,e)=>0,umask:t=>e.umask?.(t)??18,mkfifo:()=>{(0,s.notImplemented)("mkfifo")},mknod:()=>{(0,s.notImplemented)("mknod")}}}},434:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){const{fs:e,send:n}=t;return{tmpnam(r){for(let s=0;s<1e3;s++){let s="/tmp/tmpnam_";for(let t=0;t<6;t++)s+=String.fromCharCode(65+Math.floor(26*Math.random()));if(!e.existsSync(s))return r?(n.string(s,{ptr:r,len:20}),r):(t.state.tmpnam_buf||(t.state.tmpnam_buf=n.malloc(20)),n.string(s,{ptr:t.state.tmpnam_buf,len:20}),t.state.tmpnam_buf)}return 0},popen:(t,e)=>0,pclose:t=>-1}}},5198:function(t,e,n){"use strict";var r=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(911),o=(0,s(n(5022)).default)("posix:stdlib");e.default=function({child_process:t,os:e,recv:n,send:s,fs:_}){return{setjmp:()=>(o("STUB: setjmp - no op"),0),longjmp:()=>(o("STUB: longjmp - no op"),0),siglongjmp:()=>(o("STUB: siglongjmp - no op"),0),sigsetjmp:()=>(o("STUB: sigsetjmp - no op"),0),getloadavg:(t,n)=>{const{loadavg:r}=e;if(null==r)return-1;const i=r();return s.f64(t,i[0]),s.f64(t+8,i[1]),s.f64(t+16,i[2]),n},system:e=>{null==t.spawnSync&&(0,i.notImplemented)("system is not implemented yet");const s=n.string(e),{stdout:o,stderr:_,status:a}=t.spawnSync(s,{shell:!0});return r.log(o.toString()),r.warn(_.toString()),a},realpath:(t,e)=>{try{const r=n.string(t);o("realpath",{path:r});const i=_.realpathSync(r);return s.string(i,{ptr:e,len:4096})}catch(t){return o("realpath error ",t),0}}}}},6542:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=r(n(7746)),i={c_iflag:["IGNBRK","BRKINT","IGNPAR","PARMRK","INPCK","ISTRIP","INLCR","IGNCR","ICRNL","IXON","IXANY","IXOFF","IMAXBEL","IUTF8"],c_oflag:["OPOST","ONLCR","OCRNL","ONOCR","ONLRET","OFILL","OFDEL"],c_cflag:["CSIZE","CS5","CS6","CS7","CS8","CSTOPB","CREAD","PARENB","PARODD","HUPCL","CLOCAL"],c_lflag:["ICANON","ISIG","ECHO","ECHOE","ECHOK","ECHONL","NOFLSH","TOSTOP","IEXTEN"]};e.default=function({posix:t,callFunction:e,recv:n,send:r,wasi:o}){return{tcgetattr(n,_){const a=o.FD_MAP.get(n).real;let l,I;return null!=t.tcgetattr?(I=t.tcgetattr(a),l=function(e){const n={c_iflag:0,c_oflag:0,c_cflag:0,c_lflag:0};for(const r in e){n[r]=0;for(const o of i[r])e[r]&t.constants[o]&&(n[r]|=s.default[o])}return n}(I)):(I={},l=0==a||1==a?{c_iflag:27906,c_oflag:5,c_cflag:1200,c_lflag:32827}:{c_iflag:0,c_oflag:0,c_cflag:0,c_lflag:0}),function(t,{c_iflag:n,c_oflag:s,c_cflag:i,c_lflag:o}){let _=0;try{_=r.malloc(16),r.u32(_,n??0),r.u32(_+4,s??0),r.u32(_+8,i??0),r.u32(_+12,o??0),e("cowasm_termios_set",t,_)}finally{_&&r.free(_)}}(_,l),0},tcsetattr(_,a,l){const I=o.FD_MAP.get(_).real,c=function(t){let s=0;try{const i=4;return s=r.malloc(4*i),e("cowasm_termios_get",t,s),{c_iflag:n.u32(s),c_oflag:n.u32(s+i),c_cflag:n.u32(s+2*i),c_lflag:n.u32(s+3*i)}}finally{s&&r.free(s)}}(l);if(null!=t.tcsetattr){const e=function(e){const n={c_iflag:0,c_oflag:0,c_cflag:0,c_lflag:0};for(const r in i){n[r]=0;for(const o of i[r])e[r]&s.default[o]&&(n[r]|=t.constants[o])}return n}(c);t.tcsetattr(I,t.constants.TCSAFLUSH,e)}return 0}}}},1544:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(1743),s=n(911);e.default=function({child_process:t,memory:e,os:n}){return{adjtime(){(0,s.notImplemented)("TODO: implement adjtime")},settimeofday(){(0,s.notImplemented)("TODO: settimeofday")},clock_settime(s,i){if(null==t.spawnSync)throw Error("clock_settime is not supported on this platform");const o=new DataView(e.buffer).getUint32(i,!0);let _,a,l="",I=[];switch(n.platform?.()){case"darwin":_="date",a=["-f","%s",`${o}`];break;case"linux":_="date",a=[`--set=@${o}`];break;case"win32":const t=new Date(1e3*o);_="date",a=[r("m/d/yyyy",t)],l="time",a=[r("HH:MM:ss",t)];break;default:throw Error(`clock_settime not supported on platform  = ${n.platform?.()}`)}const{status:c,stderr:S}=t.spawnSync(_,a);if(c)throw Error(`clock_settime failed - ${S}`);if(l){const{status:e,stderr:n}=t.spawnSync(l,I);if(e)throw Error(`clock_settime failed - ${n}`)}return 0}}}},8385:function(t,e,n){"use strict";var r=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(911),o=s(n(7746)),_=s(n(5022)),a=n(3728),l=(0,_.default)("posix:unistd");e.default=function(t){const{fs:e,os:n,process:s,recv:_,send:I,wasi:c,posix:S,memory:u,callWithString:f}=t;function E(t){const e=c.FD_MAP.get(t);if(null==e)throw Error("invalid file descriptor");return e.real}const d=c.FD_MAP.get(0),A=c.FD_MAP.get(1),T={chown:(t,n,r)=>{const s=_.string(t);return e.chownSync(s,n,r),0},lchown:(t,n,r)=>{const s=_.string(t);return e.lchownSync(s,n,r),0},_fchown:(t,n,r)=>(e.fchownSync(E(t),n,r),0),getuid:()=>s.getuid?.()??0,getgid:()=>s.getgid?.()??0,_geteuid:()=>s.geteuid?.()??0,getegid:()=>s.getegid?.()??0,getgroups:(t,e)=>{const n=s.getgroups?.();if(null==n)return 0;if(0==t)return n.length;const r=Math.min(n.length,t);if(0==r)return 0;const i=new DataView(u.buffer);for(let t=0;t<r;t++)i.setUint32(e+4*t,n[t],!0);return r},getpid:()=>s.pid??1,getpgid:t=>S.getpgid?.(t)??1,setpgid:(t,e)=>(null==S.setpgid&&(0,i.notImplemented)("setpgid"),S.setpgid(t,e),0),getpgrp:()=>S.getpgrp?.()??1,nice:t=>{const e=n.getPriority?.();null!=e&&n.setPriority?.(e+t)},getpriority:(t,e)=>null==n.getPriority?0:0!=t?(r.warn("getpriority can only be implemented in node.js for *process id*"),0):n.getPriority?.(e),setpriority:(t,e,s)=>null==n.setPriority?0:0!=t?(r.warn("setpriority can only be implemented in node.js for *process id*"),-1):n.setPriority?.(e,s),dup:t=>{null==S.dup&&(0,i.notImplemented)("dup");const e=c.FD_MAP.get(t),n=S.dup(e.real),r=c.getUnusedFileDescriptor();return c.FD_MAP.set(r,{...e,real:n}),r},dup2:(t,e)=>{null==S.dup2&&(0,i.notImplemented)("dup2");const n=c.FD_MAP.get(t);let r;r=c.FD_MAP.has(e)?c.FD_MAP.get(e).real??e:e;const s=S.dup2(n.real,r);return c.FD_MAP.set(e,{...n,real:s}),e},sync:()=>{if(null!=e.fsyncSync)for(const[t,{real:n}]of c.FD_MAP)e.fsyncSync(n)},setuid:()=>{throw Error("setuid is not supported")},seteuid:t=>(null==S.seteuid&&(0,i.notImplemented)("seteuid"),S.seteuid(t),0),setegid:t=>(null==S.setegid&&(0,i.notImplemented)("setegid"),S.setegid(t),0),setgid:t=>(null==s.setgid&&(0,i.notImplemented)("setgid"),s.setgid(t),0),setsid:t=>(null==S.setsid&&(0,i.notImplemented)("setsid"),S.setsid(t)),getsid:()=>{(0,i.notImplemented)("getsid")},setreuid:t=>(null==S.setreuid&&(0,i.notImplemented)("setreuid"),S.setreuid(t),0),setregid:t=>(null==S.setregid&&(0,i.notImplemented)("setregid"),S.setregid(t),0),getppid:()=>null==S.getppid?T.getpid():S.getppid(),setgroups:()=>{(0,i.notImplemented)("setgroups")},setpgrp:()=>{(0,i.notImplemented)("setpgrp")},tcgetpgrp:()=>{(0,i.notImplemented)("tcgetpgrp")},tcsetpgrp:()=>{(0,i.notImplemented)("tcsetpgrp")},fork:()=>{null==S.fork&&(0,i.notImplemented)("fork");const t=S.fork();return 0==t&&S.close_event_loop?.(),t},fork1:()=>{(0,i.notImplemented)("fork1")},vfork:()=>T.fork(),forkpty:()=>{(0,i.notImplemented)("forkpty")},getlogin:()=>{if(null!=t.state.getlogin_ptr)return t.state.getlogin_ptr;const e=n.userInfo?.()?.username??"user";return t.state.getlogin_ptr=I.string(e)},gethostname:(t,e)=>{if(null==n.hostname)throw Error("gethostname not supported on this platform");const r=n.hostname();return I.string(r,{ptr:t,len:e}),0},sethostname:(t,e)=>{if(null==S.sethostname)throw Error("sethostname not supported on this platform");const n=_.string(t,e);return S.sethostname(n),0},ttyname:e=>{if(null==S.ttyname)throw Error("ttyname_r is not supported on this platform");return null!=t.state.ttyname_ptr||(t.state.ttyname_ptr=I.malloc(128),I.string(S.ttyname(e),{ptr:t.state.ttyname_ptr,len:128})),t.state.ttyname_ptr},ttyname_r:(t,e,n)=>{if(null==S.ttyname)throw Error("ttyname_r is not supported on this platform");return I.string(S.ttyname(t),{ptr:e,len:n}),0},alarm:t=>{if(null==S.alarm)throw Error("alarm is not supported on this platform");return S.alarm(t)},getresuid:(t,e,n)=>{let r,s,i;null==S.getresuid?r=s=i=0:({ruid:r,euid:s,suid:i}=S.getresuid());const o=new DataView(u.buffer);return o.setUint32(t,r,!0),o.setUint32(e,s,!0),o.setUint32(n,i,!0),0},getresgid:(t,e,n)=>{let r,s,i;null==S.getresgid?r=s=i=0:({rgid:r,egid:s,sgid:i}=S.getresgid());const o=new DataView(u.buffer);return o.setUint32(t,r,!0),o.setUint32(e,s,!0),o.setUint32(n,i,!0),0},setresuid:(t,e,n)=>(null!=S.setresuid&&S.setresuid(t,e,n),0),setresgid:(t,e,n)=>(null!=S.setresgid&&S.setresgid(t,e,n),0),execve:(t,e,n)=>{null==S._execve&&(0,i.notImplemented)("execve");const r=_.string(t),s=_.arrayOfStrings(e),o=_.arrayOfStrings(n);return l("execve",r,s,o),S._execve(r,s,o),0},execv:(t,e)=>{null==S.execv&&(0,i.notImplemented)("execv");const n=_.string(t),r=_.arrayOfStrings(e);return l("execv",n,r),S.execv(n,r),0},execvp:(t,e)=>{null==S.execvp&&(0,i.notImplemented)("execvp");const n=_.string(t),r=_.arrayOfStrings(e);return l("execvp",n,r),S.execvp(n,r),0},execlp:()=>{(0,i.notImplemented)("execlp")},fexecve:(t,e,n)=>{null==S._fexecve&&(0,i.notImplemented)("fexecve");const r=_.arrayOfStrings(e),s=_.arrayOfStrings(n);return S._fexecve(E(t),r,s),0},pipe:t=>{null==S.pipe&&(0,i.notImplemented)("pipe");const{readfd:e,writefd:n}=S.pipe(),r=c.getUnusedFileDescriptor();c.FD_MAP.set(r,{real:e,rights:d.rights,filetype:a.constants.WASI_FILETYPE_SOCKET_STREAM});const s=c.getUnusedFileDescriptor();return c.FD_MAP.set(s,{real:n,rights:A.rights,filetype:a.constants.WASI_FILETYPE_SOCKET_STREAM}),I.i32(t,r),I.i32(t+4,s),0},pipe2:(t,e)=>{null==S.pipe2&&(0,i.notImplemented)("pipe2");let n=0;e&o.default.O_NONBLOCK&&(n+=S.constants?.O_NONBLOCK??0);const{readfd:s,writefd:_}=S.pipe2(n);return r.warn("pipe2 -- TODO: we almost certainly need to abstract these through our WASI fd object!"),I.i32(t,s),I.i32(t+4,_),0},lockf:(t,e,n)=>{const{lockf:r}=S;let s;null==r&&(0,i.notImplemented)("lockf");for(const t of["F_ULOCK","F_LOCK","F_TLOCK","F_TEST"])if(e==o.default[t]){s=S.constants[t];break}if(null==s)throw Error(`invalid cmd ${e}`);return r(E(t),s,BigInt(n)),0},pause:()=>{const{pause:t}=S;return null==t&&(0,i.notImplemented)("pause"),t()},initgroups:(t,e)=>{const{initgroups:n}=s;return null==n&&(0,i.notImplemented)("initgroups"),n(_.string(t),e),0},getgrouplist:(t,e,n,r)=>{const{getgrouplist:s}=S,i=_.string(t),o=_.i32(r);let a;a=null==s?[e]:s(i,e);const l=Math.min(a.length,o);for(let t=0;t<l;t++)I.u32(n+4*t,a[t]);return I.i32(r,a.length),l<a.length?-1:0},fchdir:t=>{const e=c.FD_MAP.get(t)?.path;return e?f("chdir",e):(r.error(`fchdir: invalid file descriptor: ${t}`),-1)}};return T}},911:function(t,e,n){"use strict";var r=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.notImplemented=e.NotImplementedError=void 0;const i=(0,s(n(5022)).default)("posix");class o extends Error{constructor(t,e){super(`${t} is not implemented yet`),this.name="NotImplementedError",null!=e&&(this.ret=e)}}e.NotImplementedError=o,e.notImplemented=function(t,e=-1){throw r.warn("WARNING: calling NOT IMPLEMENTED function",t),i("WARNING: calling NOT IMPLEMENTED function",t),new o(t,e)}},1142:function(t,e,n){"use strict";var r=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(911),o=s(n(7746));e.default=function({posix:t,send:e}){function n(e){let n=0;for(const r of["WNOHANG","WUNTRACED"])e&o.default[r]&&(n|=t.constants[r]);return n}return{wait:n=>{null==t.wait&&(0,i.notImplemented)("wait");const{ret:r,wstatus:s}=t.wait();return e.i32(n,s),r},waitid:()=>((0,i.notImplemented)("waitid"),-1),waitpid:(r,s,o)=>{null==t.waitpid&&(0,i.notImplemented)("waitpid");const{ret:_,wstatus:a}=t.waitpid(r,n(o));return e.i32(s,a),_},wait3:(s,o,_)=>{null==t.wait3&&(0,i.notImplemented)("wait3"),0!=_&&(r.warn("wait3 not implemented for non-NULL *rusage"),(0,i.notImplemented)("wait3"));const{ret:a,wstatus:l}=t.wait3(n(o));return e.i32(s,l),a}}}},3267:(t,e,n)=>{"use strict";var r=n(5108);Object.defineProperty(e,"__esModule",{value:!0});const s={createKey:t=>JSON.stringify(t),ignoreSingleUndefined:!1};e.default=function(t,e){e={...s,...e||{}};const n={};return function(...s){e.ignoreSingleUndefined&&1===s.length&&void 0===s[0]&&(r.warn("Ignoring single undefined arg (reuseInFlight)"),s=[]);const i=e.createKey(s);return n.hasOwnProperty(i)||(n[i]=t.apply(this,s).then((t=>(delete n[i],t)),(t=>{throw delete n[i],t}))),n[i]}}},2835:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=n(3728),i=r(n(5516)),o=r(n(6578)),_=r(n(9714)),a=r(n(5022)),l=n(7187),I=r(n(4279)),c=r(n(8094)),S=r(n(5002)),u=(0,a.default)("wasm:worker:browser");async function f(t,e={}){u("wasmImportBrowser"),u("processing fs=",e.fs);const n=[];for(const t of e.fs??[])if("zipurl"==t.type){let e;e=t.async?{type:"zip-async",getData:async()=>await(await fetch(t.zipurl)).arrayBuffer(),mountpoint:t.mountpoint}:{type:"zip",data:await(await fetch(t.zipurl)).arrayBuffer(),mountpoint:t.mountpoint},n.push(e)}else n.push(t);const r=(0,s.createFileSystem)(n),_=await(0,o.default)({source:t,bindings:{...i.default,fs:r,posix:I.default},options:e,importWebAssembly:E,importWebAssemblySync:function(t,e){const n=new Uint8Array(r.readFileSync(t)),s=new WebAssembly.Module(n);return new WebAssembly.Instance(s,e)},readFileSync:t=>r.readFileSync(t),maxMemoryMB:1e3});return _}async function E(t,e){const{instance:n}=await WebAssembly.instantiateStreaming(fetch(t),e);return n}e.default=f,null==self.document&&function(){u("initializing worker");class t extends l.EventEmitter{constructor(){super(),this.postMessage=self.postMessage.bind(self),self.onmessage=({data:t})=>{this.emit("message",t)}}}const e=new t;(0,_.default)({wasmImport:f,parent:e,captureOutput:!0,IOHandler:crossOriginIsolated?c.default:S.default})}()},6578:function(t,e,n){"use strict";var r=n(5108),s=n(4155),i=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(e,n);s&&!("get"in s?!e.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,s)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),_=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&i(e,t,n);return o(e,t),e},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.strlen=void 0;const l=a(n(3728)),I=a(n(3267)),c=a(n(227)),S=_(n(9168)),u=a(n(5229)),f=a(n(5022)),E=a(n(7050)),d=(0,f.default)("wasm-worker");e.strlen=function(t,e){const n=new Uint8Array(e.buffer);let r=t;for(;n[r];)r+=1;return r-t};const A={},T=(0,I.default)((async function({source:t,bindings:e,options:n={},importWebAssemblySync:i,importWebAssembly:o,readFileSync:_,maxMemoryMB:a}){if(d("doWasmImport",t),null==t)throw Error("source must be defined");if(null!=A[t])return A[t];const I=(new Date).valueOf(),f=new WebAssembly.Memory({initial:(0,S.MBtoPages)(10),...a?{maximum:(0,S.MBtoPages)(a)}:{}}),T=new WebAssembly.Table({initial:1e4,element:"anyfunc"}),h={env:{reportError:(t,e)=>{const n=f.buffer.slice(t,t+e),r=new TextDecoder;throw Error(r.decode(n))},...n.wasmEnv,memory:f,__indirect_function_table:T}};let m;null==h.env.wasmGetSignalState&&(r.warn("wasmGetSignalState not defined; using STUB"),h.env.wasmGetSignalState=()=>0),null==h.env.wasmSendString&&(h.env.wasmSendString=(t,e)=>{m.result=m.recv.string(t,e)}),null==h.env.wasmSetException&&(h.env.wasmSetException=()=>{m.resultException=!0}),null==h.env.getrandom&&(h.env.getrandom=(t,n,r)=>(e.randomFillSync(new Uint8Array(f.buffer),t,n),n)),null==h.env.main&&(h.env.main=()=>0),null==h.env._Py_emscripten&&(h.env._Py_emscripten_runtime=()=>0),(0,u.default)(T,h.env);const{fs:p}=e,g={preopens:{"/":"/"},bindings:e,args:s.argv,env:n.env,sleep:n.sleep,getStdin:n.getStdin,sendStdout:n.sendStdout,sendStderr:n.sendStderr},W=new l.default(g);h.wasi_snapshot_preview1=W.wasiImport;const R={importWebAssemblySync:i,importWebAssembly:o,readFileSync:_,stub:!1},O=new E.default({memory:f,wasi:W,wasiConfig:g});O.injectFunctions(h.env);const y=await(0,S.default)({...R,path:t,importObject:h});return null!=W&&W.start(y,f),m=new c.default(y,f,p,T),O.init(m),A[t]=m,n.time&&d.enabled&&d(`imported ${t} in ${(new Date).valueOf()-I}ms`),m.table=T,m.wasi=W,m.posixContext=O,m.instance=y,m}),{createKey:t=>t[0]});e.default=T},9714:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=r(n(5022)),i=(0,s.default)("wasm:worker:init");e.default=function({wasmImport:t,parent:e,captureOutput:n,IOHandler:r}){let o;async function _(_){switch(i("worker got message ",_),_.event){case"init":const a=new r(_.options,(()=>{e.postMessage({event:"service-worker-broken"})}));_.debug&&s.default.enable(_.debug);const l={..._.options,sleep:a.sleep.bind(a),getStdin:a.getStdin.bind(a),wasmEnv:{wasmGetSignalState:a.getSignalState.bind(a)}};return n&&(l.sendStdout=t=>{e.postMessage({event:"stdout",data:t})},l.sendStderr=t=>{e.postMessage({event:"stderr",data:t})}),o=await t(_.name,l),{event:"init",status:"ok"};case"callWithString":if(null==o)throw Error("wasm must be initialized");return{result:o.callWithString(_.name,_.str,..._.args)};case"call":if(null==o)throw Error("wasm must be initialized");return{result:o.callWithString(_.name,"",[])};case"waitUntilFsLoaded":if(null==o?.fs)throw Error("wasm.fs must be initialized");const{waitUntilLoaded:I}=o.fs;return null==I?i("waitUntilLoaded - no wait function defined"):(await I(),i("waited and now file system")),void(i.enabled&&i("ls / = ",o.fs.readdirSync("/")));case"fetch":if(null==o?.fs)throw Error("wasm.fs must be initialized");return void await o.fetch(_.url,_.path,_.mode)}}e.on("message",(async t=>{try{const n={id:t.id,...await _(t)};e.postMessage(n)}catch(n){e.postMessage({id:t.id,error:n})}}))}},227:function(t,e,n){"use strict";var r=n(8764).Buffer,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(7187),o=s(n(9644)),_=s(n(8087)),a=n(9730),l=n(6470),I=new TextEncoder,c=8192;class S extends i.EventEmitter{constructor(t,e,n,r){super(),this.result=void 0,this.resultException=!1,this._getFunctionCache={},this.exports=t.exports,this.instance=t,this.memory=e,this.table=r,this.fs=n;const s={memory:this.memory,callFunction:(t,...e)=>{const n=this.getFunction(t);if(null==n)throw Error(`error - ${t} is not defined`);return n(...e)},callWithString:this.callWithString.bind(this)};this.send=new o.default(s),this.recv=new _.default(s)}terminate(){}exec(t=["command"]){return this.callWithString("cowasm_exec",t)}writeToStdin(t){throw Error("not implemented")}callWithString(t,e,...n){let r,s;if(r="string"==typeof t?this.getFunction(t):"object"==typeof t?this.getFunction(t.name,t.dll):t,null==r)throw Error(`no function "${"object"==typeof t?JSON.stringify(t):t}" defined in wasm module`);if(this.result=void 0,this.resultException=!1,null==e)s=r();else if("string"==typeof e){const t=I.encode(e);if(t.length<c)return s=this.callWithSmallString(r,t),this.result??s;const i=this.send.encodedString(t);try{s=r(i,...n)}finally{this.exports.c_free(i)}}else{const t=[];for(const n of e)t.push(this.send.string(n));const i=t.length,o=this.exports.c_malloc(4*(i+1)),_=new Int32Array(this.memory.buffer,o,i+1);let a=0;for(const e of t)_[a]=e,a+=1;_[i]=0;try{s=r(i,o,...n)}finally{this.exports.c_free(o);for(const e of t)this.exports.c_free(e)}}if(this.resultException)throw Error("RuntimeError");return this.result??s}getSmallStringPtr(){if(null==this.smallStringPtr&&(this.smallStringPtr=this.exports.c_malloc(c),!this.smallStringPtr))throw Error("MemoryError -- out of memory allocating small string buffer");return this.smallStringPtr}callWithSmallString(t,e,...n){const r=this.getSmallStringPtr(),s=e.length+1,i=new Int8Array(this.memory.buffer,r,s);return i.set(e),i[s-1]=0,t(r,...n)}getFunction(t,e){if(null!=e)return this.getFunctionUsingDlopen(t,e);const n=this._getFunctionCache[t];if(null!=n)return n;if(null!=this.table){const e=this.exports[`__WASM_EXPORT__${t}`];if(null!=e){const n=this.table.get(e());if(null!=n)return this._getFunctionCache[t]=n,n}}return this.exports[t]??this.instance.env[t]}getFunctionUsingDlopen(t,e){const n=this.callWithString("dlopen",e),r=this.getFunction("dlsym");if(null==r)throw Error("dlsym must be defined");const s=this.getSmallStringPtr();this.send.string(t,{ptr:s,len:c});const i=r(n,s);return this.table?.get(i)}closeDynamicLibrary(t){const e=this.callWithString("dlopen",t);if(0!=e){const t=this.getFunction("dlclose");if(null==t)throw Error("dlclose not defined");t(e)}}getcwd(){const t=this.getFunction("getcwd");if(null==t)throw Error("C library function getcwd must be exported");return this.recv.string(t(this.getSmallStringPtr(),c))}async waitUntilFsLoaded(){if(null==this.fs)throw Error("fs must be defined");return await(this.fs.waitUntilLoaded?.())}signal(t){throw Error("not implemented")}async fetch(t,e,n){const s=await(await fetch(t)).arrayBuffer(),{fs:i}=this;if(null==i)throw Error("fs must be defined");const o=(0,l.dirname)(e);await(0,a.callback)((t=>{i.mkdir(o,{recursive:!0},t)})),await(0,a.callback)((t=>{i.writeFile(e,r.from(s),t)})),n&&await(0,a.callback)((t=>{i.chmod(e,n,t)}))}}e.default=S},8094:function(t,e,n){"use strict";var r=n(8764).Buffer,s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=(0,s(n(5022)).default)("wasm:worker:io-using-atomics");e.default=class{constructor(t){if(i("creating ioHandler"),null==t.stdinLengthBuffer)throw Error("must define stdinLengthBuffer");if(null==t.stdinBuffer)throw Error("must define stdinBuffer");if(null==t.signalBuffer)throw Error("must define signalBuffer");this.stdinBuffer=r.from(t.stdinBuffer),this.stdinLength=new Int32Array(t.stdinLengthBuffer),this.signalState=new Int32Array(t.signalBuffer),this.sleepArray=new Int32Array(new SharedArrayBuffer(4))}sleep(t){for(i("sleep starting, milliseconds=",t);t>0;){const e=Math.min(t,500);if(Atomics.wait(this.sleepArray,0,0,e),t-=e,Atomics.load(this.signalState,0))return}}getStdin(t){const e=null!=t?(new Date).valueOf():0;for(;0==this.stdinLength[0];){if(i("getStdin: waiting for some new stdin"),Atomics.wait(this.stdinLength,0,0,t??1e3),Atomics.load(this.signalState,0))return r.from("");if(null!=t&&0==this.stdinLength[0]&&(new Date).valueOf()-e>t)return r.from("")}const n=this.stdinLength[0];i("getStdin: have stdin, processing ",n," bytes");const s=r.alloc(n);return this.stdinBuffer.copy(s,0,0,n),Atomics.store(this.stdinLength,0,0),Atomics.notify(this.stdinLength,0),s}getSignalState(){const t=Atomics.load(this.signalState,0);return t?(i("signalState",this.signalState[0]),Atomics.store(this.signalState,0,0),t):0}}},5002:function(t,e,n){"use strict";var r=n(8764).Buffer,s=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=(0,i(n(5022)).default)("wasm:worker:io-using-atomics");function _(t,e=3e3){s.warn("service worker not working, so burning CPU to avoid DOS'ing the server -- ",t);const n=(new Date).valueOf();for(;(new Date).valueOf()-n<=e;);}e.default=class{constructor(t,e){if(this.lastSignalCheck=0,o(t),this.id=t.id,this.serviceWorkerBroken=e,null==this.id)throw Error(`${this.id} must be a v4 uuid`)}request(t,e={}){const n=new XMLHttpRequest;n.open("POST",`/python-wasm-sw/${t}`,!1),n.setRequestHeader("cache-control","no-cache, no-store, max-age=0");try{n.send(JSON.stringify(e))}catch(t){this.serviceWorkerBroken(),_(t)}return 200!=n.status&&304!=n.status&&(this.serviceWorkerBroken(),_(`invalid status=${n.status}`)),n}sleep(t){o("sleep ",t);const e=(new Date).valueOf();for(;(new Date).valueOf()-e<=t;){try{this.request("sleep",{ms:Math.min(t,500)})}catch(t){return void o("sleep error",t)}if(this.getSignal(!1))return}}getStdin(t){const e=this.request("read-stdin",{id:this.id,ms:t??3e3});return 200==e.status?r.from(e.responseText??""):r.from("")}getSignal(t){const e=this.request("read-signal",{clear:t,id:this.id});return parseInt(e.responseText)??0}getSignalState(){const t=(new Date).valueOf();return t-this.lastSignalCheck<500?0:(this.lastSignalCheck=t,this.getSignal(!0))}}},4279:(t,e,n)=>{"use strict";var r=n(4155);Object.defineProperty(e,"__esModule",{value:!0});const s={getpid:()=>r.pid,getppid:()=>s.getpid?.()??1};e.default=s},7050:function(t,e,n){"use strict";var r=n(4155),s=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=i(n(8256)),_=i(n(9644)),a=i(n(8087)),l=n(4241),I=(0,i(n(5022)).default)("kernel:posix-context");e.default=class{constructor({wasiConfig:t,memory:e,wasi:n}){this.memory=e,this.wasi=n,this.wasiConfig=t;const{bindings:r,sleep:s}=t,i=this.callFunction.bind(this),o=this.callWithString.bind(this);this.posixEnv=this.createPosixEnv({memory:e,wasi:n,bindings:r,callFunction:i,callWithString:o,sleep:s})}createPosixEnv({bindings:t,memory:e,wasi:n,callFunction:s,callWithString:i,sleep:l}){return this.context={state:{},fs:t.fs,send:new _.default({memory:e,callFunction:s}),recv:new a.default({memory:e,callFunction:s}),wasi:n,run:this.run.bind(this),process:r,os:t.os??{},posix:t.posix??{},child_process:t.child_process??{},memory:e,callFunction:s,callWithString:i,getcwd:this.getcwd.bind(this),free:this.free.bind(this),sleep:l},(0,o.default)(this.context)}init(t){this.wasm=t,this.posixEnv.init()}injectFunctions(t){for(const e in this.posixEnv)null==t[e]&&(t[e]=this.posixEnv[e])}callWithString(t,e,...n){if(null==this.wasm)throw Error("wasm must be define");return this.wasm.callWithString(t,e,...n)}callFunction(t,...e){if(null==this.wasm)throw Error("wasm must be define");const n=this.wasm.getFunction(t);if(null==n)throw Error(`error - ${t} is not defined`);return n(...e)}getcwd(){if(null==this.wasm)throw Error("wasm must be define");if(null==this.wasm.getcwd)throw Error("error - getcwd is not defined");return this.wasm.getcwd()}free(t){this.wasm?.exports.c_free(t)}run(t){I("run",t);const{wasm:e}=this;if(null==e)throw Error("wasm must be define");if(null==t[0])throw Error("args must have length at least 1");const n={memory:new Uint8Array(this.memory.buffer).slice(),context:this.context.state,wasi:this.wasi.getState(),exit:this.wasiConfig.bindings.exit,dlopen:e.instance.getDlopenState()};this.context.state=(0,l.cloneDeep)(n.context);const r=(0,l.cloneDeep)(n.wasi);let i=-1;r.bindings.exit=t=>{i=t};try{let o;this.wasi.setState(r);try{if(o=e.getFunction("__main_argc_argv",t[0]),null==o)throw Error("main is null")}catch(n){try{if(o=e.getFunction("main",t[0]),null==o)throw Error("main is null")}catch(e){return s.error(`${t[0]}: ${e}`),127}}try{return o(t.length,e.send.arrayOfStrings(t))}catch(e){if(-1==i)return s.error(t[0],e),139}return-1==i?139:i}finally{e.instance.setDlopenState(n.dlopen),new Uint8Array(this.memory.buffer).set(n.memory),this.context.state=n.context,this.wasi.setState(n.wasi)}}}},8087:(t,e,n)=>{"use strict";var r=n(5108),s=n(8764).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.RecvFromWasmAbstractBase=void 0;const i=new TextDecoder;class o{view(){return new DataView(this.memory.buffer)}strlen(t){const e=new Uint8Array(this.memory.buffer);let n=t;for(;e[n];)n+=1;return n-t}pointer(t){return this.view().getUint32(t,!0)}u32(t){return this.view().getUint32(t,!0)}i32(t){return this.view().getInt32(t,!0)}pointer2(t){return new Uint32Array(this.memory.buffer)[t]}string(t,e){if(null==e&&null==(e=this.strlen(t)))throw Error("bug");const n=this.memory.buffer.slice(t,t+e);return i.decode(n)}buffer(t,e){return r.log(this.memory.buffer.slice(t,t+e)),s.from(this.memory.buffer.slice(t,t+e))}arrayOfStrings(t){const e=[];for(;;){const n=this.pointer(t);if(!n)break;e.push(this.string(n)),t+=4}return e}arrayOfI32(t){const e=[];if(0==t)return e;for(;;){const n=this.pointer(t);if(!n)break;e.push(this.i32(n)),t+=4}return e}}e.RecvFromWasmAbstractBase=o,e.default=class extends o{constructor({memory:t,callFunction:e}){super(),this.memory=t,this.callFunction=e}}},9644:(t,e,n)=>{"use strict";var r=n(5108);Object.defineProperty(e,"__esModule",{value:!0}),e.SendToWasmAbstractBase=void 0;const s=new TextEncoder;class i{malloc(t){const e=this.callFunction("c_malloc",t);if(!e)throw Error("Out of Memory");return e}free(t){this.callFunction("c_free",t)}view(){return new DataView(this.memory.buffer)}pointer(t,e){this.view().setUint32(t,e,!0)}i32(t,e){this.view().setInt32(t,e,!0)}f64(t,e){this.view().setFloat64(t,e,!0)}f32(t,e){this.view().setFloat32(t,e,!0)}u32(t,e){this.view().setUint32(t,e,!0)}string(t,e){return this.encodedString(s.encode(t),e)}encodedString(t,e){null!=e&&(e.len||r.warn("send-to-wasm: encodedString -- suspicious dest.len = 0!"),t=t.slice(0,e.len-1));const n=t.length+1,s=e?.ptr??this.malloc(n),i=new Int8Array(this.memory.buffer,s,n);return i.set(t),i[n-1]=0,s}arrayOfStrings(t){const e=this.malloc(4*(t.length+1));for(let n=0;n<t.length;n++){const r=this.string(t[n]);this.pointer(e+4*n,r)}return this.pointer(e+4*t.length,0),e}buffer(t){const e=this.malloc(t.byteLength),n=new Uint8Array(this.memory.buffer);return t.copy(n,e),e}}e.SendToWasmAbstractBase=i,e.default=class extends i{constructor({memory:t,callFunction:e}){super(),this.memory=t,this.callFunction=e}}},5229:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=(0,r(n(5022)).default)("python-wasm-trampoline");e.default=function(t,e){e._PyImport_InitFunc_TrampolineCall=e=>{const n=t.get(e)();return s("_PyImport_InitFunc_TrampolineCall - ptr=",e," r=",n),n},e._PyCFunctionWithKeywords_TrampolineCall=(e,n,r,s)=>t.get(e)(n,r,s),e.descr_set_trampoline_call=(e,n,r,s)=>t.get(e)(n,r,s),e.descr_get_trampoline_call=(e,n,r)=>t.get(e)(n,r)}},9696:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=t=>{(()=>{if("performance"in self||(self.performance={}),Date.now=Date.now||(()=>(new Date).getTime()),"now"in self.performance==0){let t=Date.now();performance.timing&&performance.timing.navigationStart&&(t=performance.timing.navigationStart),self.performance.now=()=>Date.now()-t}})();const e=Math.floor(.001*(Date.now()-performance.now())),n=.001*performance.now();let r=Math.floor(n)+e,s=Math.floor(n%1*1e9);return t&&(r-=t[0],s-=t[1],s<0&&(r--,s+=1e9)),[r,s]};n.bigint=t=>{const e=n(t);return 1e9*e[0]+e[1]},e.default=n},5516:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=n(1632),i=r(n(3182)),o=r(n(9696)),_=n(2327),a={hrtime:o.default.bigint,exit:t=>{throw new _.WASIExitError(t)},kill:t=>{throw new _.WASIKillError(t)},randomFillSync:s.randomFillSync,isTTY:()=>!0,path:i.default,fs:null};e.default=a},3622:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WASI_ENOMSG=e.WASI_ENOMEM=e.WASI_ENOLINK=e.WASI_ENOLCK=e.WASI_ENOEXEC=e.WASI_ENOENT=e.WASI_ENODEV=e.WASI_ENOBUFS=e.WASI_ENFILE=e.WASI_ENETUNREACH=e.WASI_ENETRESET=e.WASI_ENETDOWN=e.WASI_ENAMETOOLONG=e.WASI_EMULTIHOP=e.WASI_EMSGSIZE=e.WASI_EMLINK=e.WASI_EMFILE=e.WASI_ELOOP=e.WASI_EISDIR=e.WASI_EISCONN=e.WASI_EIO=e.WASI_EINVAL=e.WASI_EINTR=e.WASI_EINPROGRESS=e.WASI_EILSEQ=e.WASI_EIDRM=e.WASI_EHOSTUNREACH=e.WASI_EFBIG=e.WASI_EFAULT=e.WASI_EEXIST=e.WASI_EDQUOT=e.WASI_EDOM=e.WASI_EDESTADDRREQ=e.WASI_EDEADLK=e.WASI_ECONNRESET=e.WASI_ECONNREFUSED=e.WASI_ECONNABORTED=e.WASI_ECHILD=e.WASI_ECANCELED=e.WASI_EBUSY=e.WASI_EBADMSG=e.WASI_EBADF=e.WASI_EALREADY=e.WASI_EAGAIN=e.WASI_EAFNOSUPPORT=e.WASI_EADDRNOTAVAIL=e.WASI_EADDRINUSE=e.WASI_EACCES=e.WASI_E2BIG=e.WASI_ESUCCESS=void 0,e.WASI_SIGVTALRM=e.WASI_SIGUSR2=e.WASI_SIGUSR1=e.WASI_SIGURG=e.WASI_SIGTTOU=e.WASI_SIGTTIN=e.WASI_SIGTSTP=e.WASI_SIGTRAP=e.WASI_SIGTERM=e.WASI_SIGSTOP=e.WASI_SIGSEGV=e.WASI_SIGQUIT=e.WASI_SIGPIPE=e.WASI_SIGKILL=e.WASI_SIGINT=e.WASI_SIGILL=e.WASI_SIGHUP=e.WASI_SIGFPE=e.WASI_SIGCONT=e.WASI_SIGCHLD=e.WASI_SIGBUS=e.WASI_SIGALRM=e.WASI_SIGABRT=e.WASI_ENOTCAPABLE=e.WASI_EXDEV=e.WASI_ETXTBSY=e.WASI_ETIMEDOUT=e.WASI_ESTALE=e.WASI_ESRCH=e.WASI_ESPIPE=e.WASI_EROFS=e.WASI_ERANGE=e.WASI_EPROTOTYPE=e.WASI_EPROTONOSUPPORT=e.WASI_EPROTO=e.WASI_EPIPE=e.WASI_EPERM=e.WASI_EOWNERDEAD=e.WASI_EOVERFLOW=e.WASI_ENXIO=e.WASI_ENOTTY=e.WASI_ENOTSUP=e.WASI_ENOTSOCK=e.WASI_ENOTRECOVERABLE=e.WASI_ENOTEMPTY=e.WASI_ENOTDIR=e.WASI_ENOTCONN=e.WASI_ENOSYS=e.WASI_ENOSPC=e.WASI_ENOPROTOOPT=void 0,e.RIGHTS_REGULAR_FILE_BASE=e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL=e.WASI_RIGHT_SOCK_SHUTDOWN=e.WASI_RIGHT_POLL_FD_READWRITE=e.WASI_RIGHT_PATH_UNLINK_FILE=e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=e.WASI_RIGHT_PATH_SYMLINK=e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=e.WASI_RIGHT_FD_FILESTAT_GET=e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=e.WASI_RIGHT_PATH_FILESTAT_GET=e.WASI_RIGHT_PATH_RENAME_TARGET=e.WASI_RIGHT_PATH_RENAME_SOURCE=e.WASI_RIGHT_PATH_READLINK=e.WASI_RIGHT_FD_READDIR=e.WASI_RIGHT_PATH_OPEN=e.WASI_RIGHT_PATH_LINK_TARGET=e.WASI_RIGHT_PATH_LINK_SOURCE=e.WASI_RIGHT_PATH_CREATE_FILE=e.WASI_RIGHT_PATH_CREATE_DIRECTORY=e.WASI_RIGHT_FD_ALLOCATE=e.WASI_RIGHT_FD_ADVISE=e.WASI_RIGHT_FD_WRITE=e.WASI_RIGHT_FD_TELL=e.WASI_RIGHT_FD_SYNC=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=e.WASI_RIGHT_FD_SEEK=e.WASI_RIGHT_FD_READ=e.WASI_RIGHT_FD_DATASYNC=e.WASI_FDFLAG_SYNC=e.WASI_FDFLAG_RSYNC=e.WASI_FDFLAG_NONBLOCK=e.WASI_FDFLAG_DSYNC=e.WASI_FDFLAG_APPEND=e.WASI_FILETYPE_SYMBOLIC_LINK=e.WASI_FILETYPE_SOCKET_STREAM=e.WASI_FILETYPE_SOCKET_DGRAM=e.WASI_FILETYPE_REGULAR_FILE=e.WASI_FILETYPE_DIRECTORY=e.WASI_FILETYPE_CHARACTER_DEVICE=e.WASI_FILETYPE_BLOCK_DEVICE=e.WASI_FILETYPE_UNKNOWN=e.WASI_SIGXFSZ=e.WASI_SIGXCPU=void 0,e.SIGNAL_MAP=e.ERROR_MAP=e.WASI_WHENCE_END=e.WASI_WHENCE_CUR=e.WASI_WHENCE_SET=e.WASI_STDERR_FILENO=e.WASI_STDOUT_FILENO=e.WASI_STDIN_FILENO=e.WASI_DIRCOOKIE_START=e.WASI_PREOPENTYPE_DIR=e.WASI_O_TRUNC=e.WASI_O_EXCL=e.WASI_O_DIRECTORY=e.WASI_O_CREAT=e.WASI_FILESTAT_SET_MTIM_NOW=e.WASI_FILESTAT_SET_MTIM=e.WASI_FILESTAT_SET_ATIM_NOW=e.WASI_FILESTAT_SET_ATIM=e.WASI_EVENTTYPE_FD_WRITE=e.WASI_EVENTTYPE_FD_READ=e.WASI_EVENTTYPE_CLOCK=e.WASI_CLOCK_THREAD_CPUTIME_ID=e.WASI_CLOCK_PROCESS_CPUTIME_ID=e.WASI_CLOCK_MONOTONIC=e.WASI_CLOCK_REALTIME=e.RIGHTS_TTY_INHERITING=e.RIGHTS_TTY_BASE=e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_SOCKET_BASE=e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE=e.RIGHTS_REGULAR_FILE_INHERITING=void 0,e.WASI_ESUCCESS=0,e.WASI_E2BIG=1,e.WASI_EACCES=2,e.WASI_EADDRINUSE=3,e.WASI_EADDRNOTAVAIL=4,e.WASI_EAFNOSUPPORT=5,e.WASI_EAGAIN=6,e.WASI_EALREADY=7,e.WASI_EBADF=8,e.WASI_EBADMSG=9,e.WASI_EBUSY=10,e.WASI_ECANCELED=11,e.WASI_ECHILD=12,e.WASI_ECONNABORTED=13,e.WASI_ECONNREFUSED=14,e.WASI_ECONNRESET=15,e.WASI_EDEADLK=16,e.WASI_EDESTADDRREQ=17,e.WASI_EDOM=18,e.WASI_EDQUOT=19,e.WASI_EEXIST=20,e.WASI_EFAULT=21,e.WASI_EFBIG=22,e.WASI_EHOSTUNREACH=23,e.WASI_EIDRM=24,e.WASI_EILSEQ=25,e.WASI_EINPROGRESS=26,e.WASI_EINTR=27,e.WASI_EINVAL=28,e.WASI_EIO=29,e.WASI_EISCONN=30,e.WASI_EISDIR=31,e.WASI_ELOOP=32,e.WASI_EMFILE=33,e.WASI_EMLINK=34,e.WASI_EMSGSIZE=35,e.WASI_EMULTIHOP=36,e.WASI_ENAMETOOLONG=37,e.WASI_ENETDOWN=38,e.WASI_ENETRESET=39,e.WASI_ENETUNREACH=40,e.WASI_ENFILE=41,e.WASI_ENOBUFS=42,e.WASI_ENODEV=43,e.WASI_ENOENT=44,e.WASI_ENOEXEC=45,e.WASI_ENOLCK=46,e.WASI_ENOLINK=47,e.WASI_ENOMEM=48,e.WASI_ENOMSG=49,e.WASI_ENOPROTOOPT=50,e.WASI_ENOSPC=51,e.WASI_ENOSYS=52,e.WASI_ENOTCONN=53,e.WASI_ENOTDIR=54,e.WASI_ENOTEMPTY=55,e.WASI_ENOTRECOVERABLE=56,e.WASI_ENOTSOCK=57,e.WASI_ENOTSUP=58,e.WASI_ENOTTY=59,e.WASI_ENXIO=60,e.WASI_EOVERFLOW=61,e.WASI_EOWNERDEAD=62,e.WASI_EPERM=63,e.WASI_EPIPE=64,e.WASI_EPROTO=65,e.WASI_EPROTONOSUPPORT=66,e.WASI_EPROTOTYPE=67,e.WASI_ERANGE=68,e.WASI_EROFS=69,e.WASI_ESPIPE=70,e.WASI_ESRCH=71,e.WASI_ESTALE=72,e.WASI_ETIMEDOUT=73,e.WASI_ETXTBSY=74,e.WASI_EXDEV=75,e.WASI_ENOTCAPABLE=76,e.WASI_SIGABRT=0,e.WASI_SIGALRM=1,e.WASI_SIGBUS=2,e.WASI_SIGCHLD=3,e.WASI_SIGCONT=4,e.WASI_SIGFPE=5,e.WASI_SIGHUP=6,e.WASI_SIGILL=7,e.WASI_SIGINT=8,e.WASI_SIGKILL=9,e.WASI_SIGPIPE=10,e.WASI_SIGQUIT=11,e.WASI_SIGSEGV=12,e.WASI_SIGSTOP=13,e.WASI_SIGTERM=14,e.WASI_SIGTRAP=15,e.WASI_SIGTSTP=16,e.WASI_SIGTTIN=17,e.WASI_SIGTTOU=18,e.WASI_SIGURG=19,e.WASI_SIGUSR1=20,e.WASI_SIGUSR2=21,e.WASI_SIGVTALRM=22,e.WASI_SIGXCPU=23,e.WASI_SIGXFSZ=24,e.WASI_FILETYPE_UNKNOWN=0,e.WASI_FILETYPE_BLOCK_DEVICE=1,e.WASI_FILETYPE_CHARACTER_DEVICE=2,e.WASI_FILETYPE_DIRECTORY=3,e.WASI_FILETYPE_REGULAR_FILE=4,e.WASI_FILETYPE_SOCKET_DGRAM=5,e.WASI_FILETYPE_SOCKET_STREAM=6,e.WASI_FILETYPE_SYMBOLIC_LINK=7,e.WASI_FDFLAG_APPEND=1,e.WASI_FDFLAG_DSYNC=2,e.WASI_FDFLAG_NONBLOCK=4,e.WASI_FDFLAG_RSYNC=8,e.WASI_FDFLAG_SYNC=16,e.WASI_RIGHT_FD_DATASYNC=BigInt(1),e.WASI_RIGHT_FD_READ=BigInt(2),e.WASI_RIGHT_FD_SEEK=BigInt(4),e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=BigInt(8),e.WASI_RIGHT_FD_SYNC=BigInt(16),e.WASI_RIGHT_FD_TELL=BigInt(32),e.WASI_RIGHT_FD_WRITE=BigInt(64),e.WASI_RIGHT_FD_ADVISE=BigInt(128),e.WASI_RIGHT_FD_ALLOCATE=BigInt(256),e.WASI_RIGHT_PATH_CREATE_DIRECTORY=BigInt(512),e.WASI_RIGHT_PATH_CREATE_FILE=BigInt(1024),e.WASI_RIGHT_PATH_LINK_SOURCE=BigInt(2048),e.WASI_RIGHT_PATH_LINK_TARGET=BigInt(4096),e.WASI_RIGHT_PATH_OPEN=BigInt(8192),e.WASI_RIGHT_FD_READDIR=BigInt(16384),e.WASI_RIGHT_PATH_READLINK=BigInt(32768),e.WASI_RIGHT_PATH_RENAME_SOURCE=BigInt(65536),e.WASI_RIGHT_PATH_RENAME_TARGET=BigInt(131072),e.WASI_RIGHT_PATH_FILESTAT_GET=BigInt(262144),e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=BigInt(524288),e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=BigInt(1048576),e.WASI_RIGHT_FD_FILESTAT_GET=BigInt(2097152),e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=BigInt(4194304),e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=BigInt(8388608),e.WASI_RIGHT_PATH_SYMLINK=BigInt(16777216),e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=BigInt(33554432),e.WASI_RIGHT_PATH_UNLINK_FILE=BigInt(67108864),e.WASI_RIGHT_POLL_FD_READWRITE=BigInt(134217728),e.WASI_RIGHT_SOCK_SHUTDOWN=BigInt(268435456),e.RIGHTS_ALL=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_REGULAR_FILE_BASE=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_REGULAR_FILE_INHERITING=BigInt(0),e.RIGHTS_DIRECTORY_BASE=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE|e.RIGHTS_REGULAR_FILE_BASE,e.RIGHTS_SOCKET_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_ALL,e.RIGHTS_TTY_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_TTY_INHERITING=BigInt(0),e.WASI_CLOCK_REALTIME=0,e.WASI_CLOCK_MONOTONIC=1,e.WASI_CLOCK_PROCESS_CPUTIME_ID=2,e.WASI_CLOCK_THREAD_CPUTIME_ID=3,e.WASI_EVENTTYPE_CLOCK=0,e.WASI_EVENTTYPE_FD_READ=1,e.WASI_EVENTTYPE_FD_WRITE=2,e.WASI_FILESTAT_SET_ATIM=1,e.WASI_FILESTAT_SET_ATIM_NOW=2,e.WASI_FILESTAT_SET_MTIM=4,e.WASI_FILESTAT_SET_MTIM_NOW=8,e.WASI_O_CREAT=1,e.WASI_O_DIRECTORY=2,e.WASI_O_EXCL=4,e.WASI_O_TRUNC=8,e.WASI_PREOPENTYPE_DIR=0,e.WASI_DIRCOOKIE_START=0,e.WASI_STDIN_FILENO=0,e.WASI_STDOUT_FILENO=1,e.WASI_STDERR_FILENO=2,e.WASI_WHENCE_SET=0,e.WASI_WHENCE_CUR=1,e.WASI_WHENCE_END=2,e.ERROR_MAP={E2BIG:e.WASI_E2BIG,EACCES:e.WASI_EACCES,EADDRINUSE:e.WASI_EADDRINUSE,EADDRNOTAVAIL:e.WASI_EADDRNOTAVAIL,EAFNOSUPPORT:e.WASI_EAFNOSUPPORT,EALREADY:e.WASI_EALREADY,EAGAIN:e.WASI_EAGAIN,EBADF:e.WASI_EBADF,EBADMSG:e.WASI_EBADMSG,EBUSY:e.WASI_EBUSY,ECANCELED:e.WASI_ECANCELED,ECHILD:e.WASI_ECHILD,ECONNABORTED:e.WASI_ECONNABORTED,ECONNREFUSED:e.WASI_ECONNREFUSED,ECONNRESET:e.WASI_ECONNRESET,EDEADLOCK:e.WASI_EDEADLK,EDESTADDRREQ:e.WASI_EDESTADDRREQ,EDOM:e.WASI_EDOM,EDQUOT:e.WASI_EDQUOT,EEXIST:e.WASI_EEXIST,EFAULT:e.WASI_EFAULT,EFBIG:e.WASI_EFBIG,EHOSTDOWN:e.WASI_EHOSTUNREACH,EHOSTUNREACH:e.WASI_EHOSTUNREACH,EIDRM:e.WASI_EIDRM,EILSEQ:e.WASI_EILSEQ,EINPROGRESS:e.WASI_EINPROGRESS,EINTR:e.WASI_EINTR,EINVAL:e.WASI_EINVAL,EIO:e.WASI_EIO,EISCONN:e.WASI_EISCONN,EISDIR:e.WASI_EISDIR,ELOOP:e.WASI_ELOOP,EMFILE:e.WASI_EMFILE,EMLINK:e.WASI_EMLINK,EMSGSIZE:e.WASI_EMSGSIZE,EMULTIHOP:e.WASI_EMULTIHOP,ENAMETOOLONG:e.WASI_ENAMETOOLONG,ENETDOWN:e.WASI_ENETDOWN,ENETRESET:e.WASI_ENETRESET,ENETUNREACH:e.WASI_ENETUNREACH,ENFILE:e.WASI_ENFILE,ENOBUFS:e.WASI_ENOBUFS,ENODEV:e.WASI_ENODEV,ENOENT:e.WASI_ENOENT,ENOEXEC:e.WASI_ENOEXEC,ENOLCK:e.WASI_ENOLCK,ENOLINK:e.WASI_ENOLINK,ENOMEM:e.WASI_ENOMEM,ENOMSG:e.WASI_ENOMSG,ENOPROTOOPT:e.WASI_ENOPROTOOPT,ENOSPC:e.WASI_ENOSPC,ENOSYS:e.WASI_ENOSYS,ENOTCONN:e.WASI_ENOTCONN,ENOTDIR:e.WASI_ENOTDIR,ENOTEMPTY:e.WASI_ENOTEMPTY,ENOTRECOVERABLE:e.WASI_ENOTRECOVERABLE,ENOTSOCK:e.WASI_ENOTSOCK,ENOTTY:e.WASI_ENOTTY,ENXIO:e.WASI_ENXIO,EOVERFLOW:e.WASI_EOVERFLOW,EOWNERDEAD:e.WASI_EOWNERDEAD,EPERM:e.WASI_EPERM,EPIPE:e.WASI_EPIPE,EPROTO:e.WASI_EPROTO,EPROTONOSUPPORT:e.WASI_EPROTONOSUPPORT,EPROTOTYPE:e.WASI_EPROTOTYPE,ERANGE:e.WASI_ERANGE,EROFS:e.WASI_EROFS,ESPIPE:e.WASI_ESPIPE,ESRCH:e.WASI_ESRCH,ESTALE:e.WASI_ESTALE,ETIMEDOUT:e.WASI_ETIMEDOUT,ETXTBSY:e.WASI_ETXTBSY,EXDEV:e.WASI_EXDEV},e.SIGNAL_MAP={[e.WASI_SIGHUP]:"SIGHUP",[e.WASI_SIGINT]:"SIGINT",[e.WASI_SIGQUIT]:"SIGQUIT",[e.WASI_SIGILL]:"SIGILL",[e.WASI_SIGTRAP]:"SIGTRAP",[e.WASI_SIGABRT]:"SIGABRT",[e.WASI_SIGBUS]:"SIGBUS",[e.WASI_SIGFPE]:"SIGFPE",[e.WASI_SIGKILL]:"SIGKILL",[e.WASI_SIGUSR1]:"SIGUSR1",[e.WASI_SIGSEGV]:"SIGSEGV",[e.WASI_SIGUSR2]:"SIGUSR2",[e.WASI_SIGPIPE]:"SIGPIPE",[e.WASI_SIGALRM]:"SIGALRM",[e.WASI_SIGTERM]:"SIGTERM",[e.WASI_SIGCHLD]:"SIGCHLD",[e.WASI_SIGCONT]:"SIGCONT",[e.WASI_SIGSTOP]:"SIGSTOP",[e.WASI_SIGTSTP]:"SIGTSTP",[e.WASI_SIGTTIN]:"SIGTTIN",[e.WASI_SIGTTOU]:"SIGTTOU",[e.WASI_SIGURG]:"SIGURG",[e.WASI_SIGXCPU]:"SIGXCPU",[e.WASI_SIGXFSZ]:"SIGXFSZ",[e.WASI_SIGVTALRM]:"SIGVTALRM"}},214:function(t,e,n){"use strict";var r=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystem=void 0;const i=s(n(6665)),o=n(5829),_=n(2839);function a(t,e){if("zip"==t.type)return function(t,e="/"){const n=(0,o.createFsFromVolume)(new o.Volume);return n.mkdirSync(e,{recursive:!0}),(0,i.default)({data:t,fs:n,directory:e}),n}(t.data,t.mountpoint);if("zip-async"==t.type)return function(t,e="/"){const n=(0,o.createFsFromVolume)(new o.Volume),s=(async()=>{let s;try{s=await t()}catch(t){throw r.warn(`FAILED to load async filesystem for '${e}' - ${t}`),t}(0,i.default)({data:s,fs:n,directory:e})})();return n.waitUntilLoaded=()=>s,n}(t.getData,t.mountpoint);if("zipfile"==t.type)throw Error(`you must convert zipfile -- read ${t.zipfile} into memory`);if("zipurl"==t.type)throw Error(`you must convert zipurl -- read ${t.zipurl} into memory`);if("native"==t.type)return null==e?e:function(t){function e(e){let n=0;for(const r in o.fs.constants)r.startsWith("O_")&&e&o.fs.constants[r]&&(n|=t.constants[r]);return n}const n={...t.promises,open:async(e,n,r)=>await t.promises.open(e,n,r)};return{...{...t,promises:n},open:async(n,r,s)=>await t.open(n,e(r),s),openSync:(n,r,s)=>t.openSync(n,e(r),s),constants:o.fs.constants}}(e);if("mem"==t.type)return l(t.contents);if("dev"==t.type)return function(){const t=o.Volume.fromJSON({"/dev/stdin":"","/dev/stdout":"","/dev/stderr":""});t.releasedFds=[0,1,2];const e=t.openSync("/dev/stderr","w"),n=t.openSync("/dev/stdout","w"),r=t.openSync("/dev/stdin","r");if(2!=e)throw Error(`invalid handle for stderr: ${e}`);if(1!=n)throw Error(`invalid handle for stdout: ${n}`);if(0!=r)throw Error(`invalid handle for stdin: ${r}`);return(0,o.createFsFromVolume)(t)}();throw Error(`unknown spec type - ${JSON.stringify(t)}`)}function l(t){const e=null!=t?o.Volume.fromJSON(t):new o.Volume;return(0,o.createFsFromVolume)(e)}e.createFileSystem=function(t,e){if(0==t.length)return l();if(1==t.length)return a(t[0],e)??l();const n=new _.Union,r=[];for(const s of t){const t=a(s,e);null!=t&&(n.use(t),null!=t.waitUntilLoaded&&r.push(t.waitUntilLoaded.bind(t)))}return{...n,constants:o.fs.constants,waitUntilLoaded:async()=>{for(const t of r)await t()}}}},3728:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(e,n);s&&!("get"in s?!e.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,s)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),s=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return s(e,t),e},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.constants=e.createFileSystem=void 0;const _=o(n(9215));e.default=_.default;var a=n(214);Object.defineProperty(e,"createFileSystem",{enumerable:!0,get:function(){return a.createFileSystem}});const l=i(n(3622));e.constants=l},2327:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WASIKillError=e.WASIExitError=e.WASIError=void 0;class n extends Error{constructor(t){super(),this.errno=t,Object.setPrototypeOf(this,n.prototype)}}e.WASIError=n;class r extends Error{constructor(t){super(`WASI Exit error: ${t}`),this.code=t,Object.setPrototypeOf(this,r.prototype)}}e.WASIExitError=r;class s extends Error{constructor(t){super(`WASI Kill signal: ${t}`),this.signal=t,Object.setPrototypeOf(this,s.prototype)}}e.WASIKillError=s},6665:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(6470),s=n(1811);e.default=function({data:t,fs:e,directory:n}){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),!(t instanceof Uint8Array))throw Error("impossible");const i=(0,s.unzipSync)(t);for(const[t,s]of Object.entries(i)){const i=(0,r.join)(n,t);e.mkdirSync((0,r.dirname)(i),{recursive:!0}),i.endsWith("/")||(e.writeFileSync(i,s),e.chmodSync(i,511))}}},9215:function(t,e,n){"use strict";var r=n(8764).Buffer,s=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=i(n(5912)),_=(0,o.default)("wasi"),a=(0,o.default)("wasi:open"),l=n(2327),I=i(n(905)),c=n(3622),S=c.WASI_RIGHT_FD_DATASYNC|c.WASI_RIGHT_FD_READ|c.WASI_RIGHT_FD_SYNC|c.WASI_RIGHT_FD_ADVISE|c.WASI_RIGHT_FD_FILESTAT_GET|c.WASI_RIGHT_POLL_FD_READWRITE,u=c.WASI_RIGHT_FD_DATASYNC|c.WASI_RIGHT_FD_WRITE|c.WASI_RIGHT_FD_SYNC|c.WASI_RIGHT_FD_ADVISE|c.WASI_RIGHT_FD_FILESTAT_GET|c.WASI_RIGHT_POLL_FD_READWRITE,f=u,E=t=>{const e=Math.trunc(t),n=BigInt(Math.round(1e6*(t-e)));return BigInt(e)*BigInt(1e6)+n},d=t=>{"number"==typeof t&&(t=Math.trunc(t));const e=BigInt(t);return Number(e/BigInt(1e6))},A=t=>(...e)=>{try{return t(...e)}catch(t){let e=t;for(;null!=e.prev;)e=e.prev;if(e?.code&&"string"==typeof e?.code)return c.ERROR_MAP[e.code]||c.WASI_EINVAL;if(e instanceof l.WASIError)return e.errno;throw e}},T=(t,e)=>{const n=t.FD_MAP.get(e);if(!n)throw new l.WASIError(c.WASI_EBADF);if(void 0===n.filetype){const r=t.bindings.fs.fstatSync(n.real),{filetype:s,rightsBase:i,rightsInheriting:o}=h(t,e,r);n.filetype=s,n.rights||(n.rights={base:i,inheriting:o})}return n},h=(t,e,n)=>{switch(!0){case n.isBlockDevice():return{filetype:c.WASI_FILETYPE_BLOCK_DEVICE,rightsBase:c.RIGHTS_BLOCK_DEVICE_BASE,rightsInheriting:c.RIGHTS_BLOCK_DEVICE_INHERITING};case n.isCharacterDevice():{const n=c.WASI_FILETYPE_CHARACTER_DEVICE;return void 0!==e&&t.bindings.isTTY(e)?{filetype:n,rightsBase:c.RIGHTS_TTY_BASE,rightsInheriting:c.RIGHTS_TTY_INHERITING}:{filetype:n,rightsBase:c.RIGHTS_CHARACTER_DEVICE_BASE,rightsInheriting:c.RIGHTS_CHARACTER_DEVICE_INHERITING}}case n.isDirectory():return{filetype:c.WASI_FILETYPE_DIRECTORY,rightsBase:c.RIGHTS_DIRECTORY_BASE,rightsInheriting:c.RIGHTS_DIRECTORY_INHERITING};case n.isFIFO():return{filetype:c.WASI_FILETYPE_SOCKET_STREAM,rightsBase:c.RIGHTS_SOCKET_BASE,rightsInheriting:c.RIGHTS_SOCKET_INHERITING};case n.isFile():return{filetype:c.WASI_FILETYPE_REGULAR_FILE,rightsBase:c.RIGHTS_REGULAR_FILE_BASE,rightsInheriting:c.RIGHTS_REGULAR_FILE_INHERITING};case n.isSocket():return{filetype:c.WASI_FILETYPE_SOCKET_STREAM,rightsBase:c.RIGHTS_SOCKET_BASE,rightsInheriting:c.RIGHTS_SOCKET_INHERITING};case n.isSymbolicLink():return{filetype:c.WASI_FILETYPE_SYMBOLIC_LINK,rightsBase:BigInt(0),rightsInheriting:BigInt(0)};default:return{filetype:c.WASI_FILETYPE_UNKNOWN,rightsBase:BigInt(0),rightsInheriting:BigInt(0)}}};let m=!1;e.default=class{constructor(t){this.lastStdin=0,this.env={},this.sleep=t.sleep,this.getStdin=t.getStdin,this.sendStdout=t.sendStdout,this.sendStderr=t.sendStderr;let e={};t.preopens&&(e=t.preopens),t&&t.env&&(this.env=t.env);let n=[];t&&t.args&&(n=t.args),this.memory=void 0,this.view=void 0,this.bindings=t.bindings;const i=this.bindings.fs;this.FD_MAP=new Map([[c.WASI_STDIN_FILENO,{real:0,filetype:c.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:S,inheriting:BigInt(0)},path:"/dev/stdin"}],[c.WASI_STDOUT_FILENO,{real:1,filetype:c.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:u,inheriting:BigInt(0)},path:"/dev/stdout"}],[c.WASI_STDERR_FILENO,{real:2,filetype:c.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:f,inheriting:BigInt(0)},path:"/dev/stderr"}]]);const o=this.bindings.path;for(const[t,n]of Object.entries(e)){const e=i.openSync(n,i.constants.O_RDONLY),r=this.getUnusedFileDescriptor();this.FD_MAP.set(r,{real:e,filetype:c.WASI_FILETYPE_DIRECTORY,rights:{base:c.RIGHTS_DIRECTORY_BASE,inheriting:c.RIGHTS_DIRECTORY_INHERITING},fakePath:t,path:n})}const p=(t,e)=>(this.refreshMemory(),Array.from({length:e},((e,n)=>{const r=t+8*n,s=this.view.getUint32(r,!0);let i=this.view.getUint32(r+4,!0);i>this.memory.buffer.byteLength-s&&(_("getiovs: warning -- truncating buffer to fit in memory"),i=Math.min(i,this.memory.buffer.byteLength-s));const o=new Uint8Array(this.memory.buffer,s,i);return(0,I.default)(o)}))),g=(t,e)=>{const n=T(this,t);if(e!==BigInt(0)&&(n.rights.base&e)===BigInt(0))throw new l.WASIError(c.WASI_EPERM);return n},W=this.bindings.hrtime(),R=t=>{switch(t){case c.WASI_CLOCK_MONOTONIC:return this.bindings.hrtime();case c.WASI_CLOCK_REALTIME:return E(Date.now());case c.WASI_CLOCK_PROCESS_CPUTIME_ID:case c.WASI_CLOCK_THREAD_CPUTIME_ID:return this.bindings.hrtime()-W;default:return null}};this.wasiImport={args_get:(t,e)=>{this.refreshMemory();let s=t,i=e;return n.forEach((t=>{this.view.setUint32(s,i,!0),s+=4,i+=r.from(this.memory.buffer).write(`${t}\0`,i)})),c.WASI_ESUCCESS},args_sizes_get:(t,e)=>{this.refreshMemory(),this.view.setUint32(t,n.length,!0);const s=n.reduce(((t,e)=>t+r.byteLength(e)+1),0);return this.view.setUint32(e,s,!0),c.WASI_ESUCCESS},environ_get:(t,e)=>{this.refreshMemory();let n=t,s=e;return Object.entries(this.env).forEach((([t,e])=>{this.view.setUint32(n,s,!0),n+=4,s+=r.from(this.memory.buffer).write(`${t}=${e}\0`,s)})),c.WASI_ESUCCESS},environ_sizes_get:(t,e)=>{this.refreshMemory();const n=Object.entries(this.env).map((([t,e])=>`${t}=${e}\0`)),s=n.reduce(((t,e)=>t+r.byteLength(e)),0);return this.view.setUint32(t,n.length,!0),this.view.setUint32(e,s,!0),c.WASI_ESUCCESS},clock_res_get:(t,e)=>{let n;switch(t){case c.WASI_CLOCK_MONOTONIC:case c.WASI_CLOCK_PROCESS_CPUTIME_ID:case c.WASI_CLOCK_THREAD_CPUTIME_ID:n=BigInt(1);break;case c.WASI_CLOCK_REALTIME:n=BigInt(1e3)}if(!n)throw Error("invalid clockId");return this.view.setBigUint64(e,n),c.WASI_ESUCCESS},clock_time_get:(t,e,n)=>{this.refreshMemory();const r=R(t);return null===r?c.WASI_EINVAL:(this.view.setBigUint64(n,BigInt(r),!0),c.WASI_ESUCCESS)},fd_advise:A(((t,e,n,r)=>(g(t,c.WASI_RIGHT_FD_ADVISE),c.WASI_ENOSYS))),fd_allocate:A(((t,e,n)=>(g(t,c.WASI_RIGHT_FD_ALLOCATE),c.WASI_ENOSYS))),fd_close:A((t=>{const e=g(t,BigInt(0));return i.closeSync(e.real),this.FD_MAP.delete(t),c.WASI_ESUCCESS})),fd_datasync:A((t=>{const e=g(t,c.WASI_RIGHT_FD_DATASYNC);return i.fdatasyncSync(e.real),c.WASI_ESUCCESS})),fd_fdstat_get:A(((t,e)=>{const n=g(t,BigInt(0));if(this.refreshMemory(),null==n.filetype)throw Error("stats.filetype must be set");return this.view.setUint8(e,n.filetype),this.view.setUint16(e+2,0,!0),this.view.setUint16(e+4,0,!0),this.view.setBigUint64(e+8,BigInt(n.rights.base),!0),this.view.setBigUint64(e+8+8,BigInt(n.rights.inheriting),!0),c.WASI_ESUCCESS})),fd_fdstat_set_flags:A(((t,e)=>(g(t,c.WASI_RIGHT_FD_FDSTAT_SET_FLAGS),c.WASI_ENOSYS))),fd_fdstat_set_rights:A(((t,e,n)=>{const r=g(t,BigInt(0));return(r.rights.base|e)>r.rights.base||(r.rights.inheriting|n)>r.rights.inheriting?c.WASI_EPERM:(r.rights.base=e,r.rights.inheriting=n,c.WASI_ESUCCESS)})),fd_filestat_get:A(((t,e)=>{const n=g(t,c.WASI_RIGHT_FD_FILESTAT_GET),r=i.fstatSync(n.real);if(this.refreshMemory(),this.view.setBigUint64(e,BigInt(r.dev),!0),e+=8,this.view.setBigUint64(e,BigInt(r.ino),!0),e+=8,null==n.filetype)throw Error("stats.filetype must be set");return this.view.setUint8(e,n.filetype),e+=8,this.view.setBigUint64(e,BigInt(r.nlink),!0),e+=8,this.view.setBigUint64(e,BigInt(r.size),!0),e+=8,this.view.setBigUint64(e,E(r.atimeMs),!0),e+=8,this.view.setBigUint64(e,E(r.mtimeMs),!0),e+=8,this.view.setBigUint64(e,E(r.ctimeMs),!0),c.WASI_ESUCCESS})),fd_filestat_set_size:A(((t,e)=>{const n=g(t,c.WASI_RIGHT_FD_FILESTAT_SET_SIZE);return i.ftruncateSync(n.real,Number(e)),c.WASI_ESUCCESS})),fd_filestat_set_times:A(((t,e,n,r)=>{const s=g(t,c.WASI_RIGHT_FD_FILESTAT_SET_TIMES),o=i.fstatSync(s.real);let _=o.atime,a=o.mtime;const l=d(R(c.WASI_CLOCK_REALTIME)),I=c.WASI_FILESTAT_SET_ATIM|c.WASI_FILESTAT_SET_ATIM_NOW;if((r&I)===I)return c.WASI_EINVAL;const S=c.WASI_FILESTAT_SET_MTIM|c.WASI_FILESTAT_SET_MTIM_NOW;return(r&S)===S?c.WASI_EINVAL:((r&c.WASI_FILESTAT_SET_ATIM)===c.WASI_FILESTAT_SET_ATIM?_=d(e):(r&c.WASI_FILESTAT_SET_ATIM_NOW)===c.WASI_FILESTAT_SET_ATIM_NOW&&(_=l),(r&c.WASI_FILESTAT_SET_MTIM)===c.WASI_FILESTAT_SET_MTIM?a=d(n):(r&c.WASI_FILESTAT_SET_MTIM_NOW)===c.WASI_FILESTAT_SET_MTIM_NOW&&(a=l),i.futimesSync(s.real,new Date(_),new Date(a)),c.WASI_ESUCCESS)})),fd_prestat_get:A(((t,e)=>{const n=g(t,BigInt(0));return this.refreshMemory(),this.view.setUint8(e,c.WASI_PREOPENTYPE_DIR),this.view.setUint32(e+4,r.byteLength(n.fakePath??n.path??""),!0),c.WASI_ESUCCESS})),fd_prestat_dir_name:A(((t,e,n)=>{const s=g(t,BigInt(0));return this.refreshMemory(),r.from(this.memory.buffer).write(s.fakePath??s.path??"",e,n,"utf8"),c.WASI_ESUCCESS})),fd_pwrite:A(((t,e,n,r,s)=>{const o=g(t,c.WASI_RIGHT_FD_WRITE|c.WASI_RIGHT_FD_SEEK);let _=0;return p(e,n).forEach((t=>{let e=0;for(;e<t.byteLength;)e+=i.writeSync(o.real,t,e,t.byteLength-e,Number(r)+_+e);_+=e})),this.view.setUint32(s,_,!0),c.WASI_ESUCCESS})),fd_write:A(((t,e,n,r)=>{const s=g(t,c.WASI_RIGHT_FD_WRITE),o=1==s.real,_=2==s.real;let a=0;return p(e,n).forEach((t=>{if(0!=t.byteLength)if(o&&null!=this.sendStdout)this.sendStdout(t),a+=t.byteLength;else if(_&&null!=this.sendStderr)this.sendStderr(t),a+=t.byteLength;else{let e=0;for(;e<t.byteLength;){const n=i.writeSync(s.real,t,e,t.byteLength-e,s.offset?Number(s.offset):null);s.offset&&(s.offset+=BigInt(n)),e+=n}a+=e}})),this.view.setUint32(r,a,!0),c.WASI_ESUCCESS})),fd_pread:A(((t,e,n,r,s)=>{const o=g(t,c.WASI_RIGHT_FD_READ|c.WASI_RIGHT_FD_SEEK);let _=0;t:for(const t of p(e,n)){let e=0;for(;e<t.byteLength;){const n=t.byteLength-e,s=i.readSync(o.real,t,e,t.byteLength-e,Number(r)+_+e);if(e+=s,_+=s,0===s||s<n)break t}_+=e}return this.view.setUint32(s,_,!0),c.WASI_ESUCCESS})),fd_read:A(((t,e,n,r)=>{const o=g(t,c.WASI_RIGHT_FD_READ),_=0===o.real;let a=0;t:for(const t of p(e,n)){let e=0;for(;e<t.byteLength;){let n=t.byteLength-e,r=_||void 0===o.offset?null:Number(o.offset),l=0;if(_)if(null!=this.getStdin)null==this.stdinBuffer&&(this.stdinBuffer=this.getStdin()),null!=this.stdinBuffer&&(l=this.stdinBuffer.copy(t),l==this.stdinBuffer.length?this.stdinBuffer=void 0:this.stdinBuffer=this.stdinBuffer.slice(l));else{null!=this.sleep||m||(m=!0,s.log("(cpu waiting for stdin: please define a way to sleep!) "));try{l=i.readSync(o.real,t,e,n,r)}catch(t){}0==l?this.shortPause():this.lastStdin=(new Date).valueOf()}else l=i.readSync(o.real,t,e,n,r);if(o.filetype==c.WASI_FILETYPE_REGULAR_FILE&&(o.offset=(o.offset?o.offset:BigInt(0))+BigInt(l)),e+=l,a+=l,0===l||l<n)break t}}return this.view.setUint32(r,a,!0),c.WASI_ESUCCESS})),fd_readdir:A(((t,e,n,s,_)=>{const a=g(t,c.WASI_RIGHT_FD_READDIR);this.refreshMemory();const l=i.readdirSync(a.path,{withFileTypes:!0}),I=e;for(let t=Number(s);t<l.length;t+=1){const s=l[t];let _=r.byteLength(s.name);if(e-I>n)break;if(this.view.setBigUint64(e,BigInt(t+1),!0),(e+=8)-I>n)break;const S=i.lstatSync(o.resolve(a.path,s.name));if(this.view.setBigUint64(e,BigInt(S.ino),!0),(e+=8)-I>n)break;if(this.view.setUint32(e,_,!0),(e+=4)-I>n)break;let u;switch(!0){case S.isBlockDevice():u=c.WASI_FILETYPE_BLOCK_DEVICE;break;case S.isCharacterDevice():u=c.WASI_FILETYPE_CHARACTER_DEVICE;break;case S.isDirectory():u=c.WASI_FILETYPE_DIRECTORY;break;case S.isFIFO():u=c.WASI_FILETYPE_SOCKET_STREAM;break;case S.isFile():u=c.WASI_FILETYPE_REGULAR_FILE;break;case S.isSocket():u=c.WASI_FILETYPE_SOCKET_STREAM;break;case S.isSymbolicLink():u=c.WASI_FILETYPE_SYMBOLIC_LINK;break;default:u=c.WASI_FILETYPE_UNKNOWN}if(this.view.setUint8(e,u),e+=1,(e+=3)+_>=I+n)break;r.from(this.memory.buffer).write(s.name,e),e+=_}const S=e-I;return this.view.setUint32(_,Math.min(S,n),!0),c.WASI_ESUCCESS})),fd_renumber:A(((t,e)=>(g(t,BigInt(0)),g(e,BigInt(0)),i.closeSync(this.FD_MAP.get(t).real),this.FD_MAP.set(t,this.FD_MAP.get(e)),this.FD_MAP.delete(e),c.WASI_ESUCCESS))),fd_seek:A(((t,e,n,r)=>{const s=g(t,c.WASI_RIGHT_FD_SEEK);switch(this.refreshMemory(),n){case c.WASI_WHENCE_CUR:s.offset=(s.offset?s.offset:BigInt(0))+BigInt(e);break;case c.WASI_WHENCE_END:const{size:t}=i.fstatSync(s.real);s.offset=BigInt(t)+BigInt(e);break;case c.WASI_WHENCE_SET:s.offset=BigInt(e)}if(null==s.offset)throw Error("stats.offset must be defined");return this.view.setBigUint64(r,s.offset,!0),c.WASI_ESUCCESS})),fd_tell:A(((t,e)=>{const n=g(t,c.WASI_RIGHT_FD_TELL);return this.refreshMemory(),n.offset||(n.offset=BigInt(0)),this.view.setBigUint64(e,n.offset,!0),c.WASI_ESUCCESS})),fd_sync:A((t=>{const e=g(t,c.WASI_RIGHT_FD_SYNC);return i.fsyncSync(e.real),c.WASI_ESUCCESS})),path_create_directory:A(((t,e,n)=>{const s=g(t,c.WASI_RIGHT_PATH_CREATE_DIRECTORY);if(!s.path)return c.WASI_EINVAL;this.refreshMemory();const _=r.from(this.memory.buffer,e,n).toString();return i.mkdirSync(o.resolve(s.path,_)),c.WASI_ESUCCESS})),path_filestat_get:A(((t,e,n,s,_)=>{const a=g(t,c.WASI_RIGHT_PATH_FILESTAT_GET);if(!a.path)return c.WASI_EINVAL;this.refreshMemory();const l=r.from(this.memory.buffer,n,s).toString();let I;return I=e?i.statSync(o.resolve(a.path,l)):i.lstatSync(o.resolve(a.path,l)),this.view.setBigUint64(_,BigInt(I.dev),!0),_+=8,this.view.setBigUint64(_,BigInt(I.ino),!0),_+=8,this.view.setUint8(_,h(this,void 0,I).filetype),_+=8,this.view.setBigUint64(_,BigInt(I.nlink),!0),_+=8,this.view.setBigUint64(_,BigInt(I.size),!0),_+=8,this.view.setBigUint64(_,E(I.atimeMs),!0),_+=8,this.view.setBigUint64(_,E(I.mtimeMs),!0),_+=8,this.view.setBigUint64(_,E(I.ctimeMs),!0),c.WASI_ESUCCESS})),path_filestat_set_times:A(((t,e,n,s,_,a,l)=>{const I=g(t,c.WASI_RIGHT_PATH_FILESTAT_SET_TIMES);if(!I.path)return c.WASI_EINVAL;this.refreshMemory();const S=i.fstatSync(I.real);let u=S.atime,f=S.mtime;const E=d(R(c.WASI_CLOCK_REALTIME)),A=c.WASI_FILESTAT_SET_ATIM|c.WASI_FILESTAT_SET_ATIM_NOW;if((l&A)===A)return c.WASI_EINVAL;const T=c.WASI_FILESTAT_SET_MTIM|c.WASI_FILESTAT_SET_MTIM_NOW;if((l&T)===T)return c.WASI_EINVAL;(l&c.WASI_FILESTAT_SET_ATIM)===c.WASI_FILESTAT_SET_ATIM?u=d(_):(l&c.WASI_FILESTAT_SET_ATIM_NOW)===c.WASI_FILESTAT_SET_ATIM_NOW&&(u=E),(l&c.WASI_FILESTAT_SET_MTIM)===c.WASI_FILESTAT_SET_MTIM?f=d(a):(l&c.WASI_FILESTAT_SET_MTIM_NOW)===c.WASI_FILESTAT_SET_MTIM_NOW&&(f=E);const h=r.from(this.memory.buffer,n,s).toString();return i.utimesSync(o.resolve(I.path,h),new Date(u),new Date(f)),c.WASI_ESUCCESS})),path_link:A(((t,e,n,s,_,a,l)=>{const I=g(t,c.WASI_RIGHT_PATH_LINK_SOURCE),S=g(_,c.WASI_RIGHT_PATH_LINK_TARGET);if(!I.path||!S.path)return c.WASI_EINVAL;this.refreshMemory();const u=r.from(this.memory.buffer,n,s).toString(),f=r.from(this.memory.buffer,a,l).toString();return i.linkSync(o.resolve(I.path,u),o.resolve(S.path,f)),c.WASI_ESUCCESS})),path_open:A(((t,e,n,s,_,I,S,u,f)=>{const E=g(t,c.WASI_RIGHT_PATH_OPEN);I=BigInt(I),S=BigInt(S);const d=(I&(c.WASI_RIGHT_FD_READ|c.WASI_RIGHT_FD_READDIR))!==BigInt(0),A=(I&(c.WASI_RIGHT_FD_DATASYNC|c.WASI_RIGHT_FD_WRITE|c.WASI_RIGHT_FD_ALLOCATE|c.WASI_RIGHT_FD_FILESTAT_SET_SIZE))!==BigInt(0);let h;A&&d?h=i.constants.O_RDWR:d?h=i.constants.O_RDONLY:A&&(h=i.constants.O_WRONLY);let m=I|c.WASI_RIGHT_PATH_OPEN,p=I|S;0!=(_&c.WASI_O_CREAT)&&(h|=i.constants.O_CREAT,m|=c.WASI_RIGHT_PATH_CREATE_FILE),0!=(_&c.WASI_O_DIRECTORY)&&(h|=i.constants.O_DIRECTORY),0!=(_&c.WASI_O_EXCL)&&(h|=i.constants.O_EXCL),0!=(_&c.WASI_O_TRUNC)&&(h|=i.constants.O_TRUNC,m|=c.WASI_RIGHT_PATH_FILESTAT_SET_SIZE),0!=(u&c.WASI_FDFLAG_APPEND)&&(h|=i.constants.O_APPEND),0!=(u&c.WASI_FDFLAG_DSYNC)&&(i.constants.O_DSYNC?h|=i.constants.O_DSYNC:h|=i.constants.O_SYNC,p|=c.WASI_RIGHT_FD_DATASYNC),0!=(u&c.WASI_FDFLAG_NONBLOCK)&&(h|=i.constants.O_NONBLOCK),0!=(u&c.WASI_FDFLAG_RSYNC)&&(i.constants.O_RSYNC?h|=i.constants.O_RSYNC:h|=i.constants.O_SYNC,p|=c.WASI_RIGHT_FD_SYNC),0!=(u&c.WASI_FDFLAG_SYNC)&&(h|=i.constants.O_SYNC,p|=c.WASI_RIGHT_FD_SYNC),A&&0==(h&(i.constants.O_APPEND|i.constants.O_TRUNC))&&(p|=c.WASI_RIGHT_FD_SEEK),this.refreshMemory();const W=r.from(this.memory.buffer,n,s).toString();if("dev/tty"==W)return this.view.setUint32(f,c.WASI_STDIN_FILENO,!0),c.WASI_ESUCCESS;if(a("path_open",W),W.startsWith("proc/"))throw new l.WASIError(c.WASI_EBADF);const R=o.resolve(E.path,W);let O,y,w;try{O=i.realpathSync(R)}catch(t){if("ENOENT"!==t?.code)throw t;O=R}if(A)try{y=i.statSync(O).isDirectory()}catch(t){}w=!A&&y?i.openSync(O,i.constants.O_RDONLY):i.openSync(O,h);const N=this.getUnusedFileDescriptor();return this.FD_MAP.set(N,{real:w,filetype:void 0,rights:{base:m,inheriting:p},path:O}),T(this,N),this.view.setUint32(f,N,!0),c.WASI_ESUCCESS})),path_readlink:A(((t,e,n,s,_,a)=>{const l=g(t,c.WASI_RIGHT_PATH_READLINK);if(!l.path)return c.WASI_EINVAL;this.refreshMemory();const I=r.from(this.memory.buffer,e,n).toString(),S=o.resolve(l.path,I),u=i.readlinkSync(S),f=r.from(this.memory.buffer).write(u,s,_);return this.view.setUint32(a,f,!0),c.WASI_ESUCCESS})),path_remove_directory:A(((t,e,n)=>{const s=g(t,c.WASI_RIGHT_PATH_REMOVE_DIRECTORY);if(!s.path)return c.WASI_EINVAL;this.refreshMemory();const _=r.from(this.memory.buffer,e,n).toString();return i.rmdirSync(o.resolve(s.path,_)),c.WASI_ESUCCESS})),path_rename:A(((t,e,n,s,_,a)=>{const l=g(t,c.WASI_RIGHT_PATH_RENAME_SOURCE),I=g(s,c.WASI_RIGHT_PATH_RENAME_TARGET);if(!l.path||!I.path)return c.WASI_EINVAL;this.refreshMemory();const S=r.from(this.memory.buffer,e,n).toString(),u=r.from(this.memory.buffer,_,a).toString();return i.renameSync(o.resolve(l.path,S),o.resolve(I.path,u)),c.WASI_ESUCCESS})),path_symlink:A(((t,e,n,s,_)=>{const a=g(n,c.WASI_RIGHT_PATH_SYMLINK);if(!a.path)return c.WASI_EINVAL;this.refreshMemory();const l=r.from(this.memory.buffer,t,e).toString(),I=r.from(this.memory.buffer,s,_).toString();return i.symlinkSync(l,o.resolve(a.path,I)),c.WASI_ESUCCESS})),path_unlink_file:A(((t,e,n)=>{const s=g(t,c.WASI_RIGHT_PATH_UNLINK_FILE);if(!s.path)return c.WASI_EINVAL;this.refreshMemory();const _=r.from(this.memory.buffer,e,n).toString();return i.unlinkSync(o.resolve(s.path,_)),c.WASI_ESUCCESS})),poll_oneoff:(t,e,n,r)=>{let i=0,o=BigInt(0);const _=BigInt(this.bindings.hrtime());this.refreshMemory();for(let r=0;r<n;r+=1){const n=this.view.getBigUint64(t,!0);t+=8;const r=this.view.getUint8(t);switch(t+=1,r){case c.WASI_EVENTTYPE_CLOCK:{t+=7;const r=this.view.getUint32(t,!0);t+=4,t+=4;const s=this.view.getBigUint64(t,!0);t+=8,t+=8;const _=this.view.getUint16(t,!0);t+=2,t+=6;const a=1===_;let l=c.WASI_ESUCCESS;const I=R(r);if(null==I)l=c.WASI_EINVAL;else{const t=(a?s:I+s)-I;t>o&&(o=t)}this.view.setBigUint64(e,n,!0),e+=8,this.view.setUint16(e,l,!0),e+=2,this.view.setUint8(e,c.WASI_EVENTTYPE_CLOCK),e+=1,e+=5,i+=1;break}case c.WASI_EVENTTYPE_FD_READ:case c.WASI_EVENTTYPE_FD_WRITE:t+=3,t+=4,this.view.setBigUint64(e,n,!0),e+=8,this.view.setUint16(e,c.WASI_ENOSYS,!0),e+=2,this.view.setUint8(e,r),e+=1,e+=5,i+=1,n==BigInt(0)&&c.WASI_EVENTTYPE_FD_READ==r&&this.shortPause();break;default:return c.WASI_EINVAL}}if(this.view.setUint32(r,i,!0),o>0&&(o-=BigInt(this.bindings.hrtime())-_,o>=1e6))if(null!=this.sleep||m||(m=!0,s.log("(cpu waiting for stdin: please define a way to sleep!) ")),null!=this.sleep){const t=d(o);this.sleep(t)}else{const t=BigInt(this.bindings.hrtime())+o;for(;BigInt(this.bindings.hrtime())<t;);}return c.WASI_ESUCCESS},proc_exit:t=>(this.bindings.exit(t),c.WASI_ESUCCESS),proc_raise:t=>t in c.SIGNAL_MAP?(this.bindings.kill(c.SIGNAL_MAP[t]),c.WASI_ESUCCESS):c.WASI_EINVAL,random_get:(t,e)=>(this.refreshMemory(),this.bindings.randomFillSync(new Uint8Array(this.memory.buffer),t,e),c.WASI_ESUCCESS),sched_yield:()=>c.WASI_ESUCCESS,sock_recv:()=>c.WASI_ENOSYS,sock_send:()=>c.WASI_ENOSYS,sock_shutdown:()=>c.WASI_ENOSYS},_.enabled&&Object.keys(this.wasiImport).forEach((t=>{const e=this.wasiImport[t];this.wasiImport[t]=function(...n){"fd_read"!=t&&"poll_oneoff"!=t&&_(t,n);try{let r=e(...n);return"fd_read"!=t&&"poll_oneoff"!=t&&_("result = ",r),r}catch(t){throw _("error: ",t),t}}}))}getState(){return{env:this.env,FD_MAP:this.FD_MAP,bindings:this.bindings}}setState(t){this.env=t.env,this.FD_MAP=t.FD_MAP,this.bindings=t.bindings}shortPause(){null!=this.sleep&&(new Date).valueOf()-this.lastStdin>2e3&&this.sleep(50)}getUnusedFileDescriptor(){let t=3;for(;this.FD_MAP.has(t);)t+=1;if(t>32768)throw Error("no available file descriptors");return t}refreshMemory(){this.view&&0!==this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer))}setMemory(t){this.memory=t}start(t,e){const n=t.exports;if(null===n||"object"!=typeof n)throw new Error(`instance.exports must be an Object. Received ${n}.`);if(null==e&&!((e=n.memory)instanceof WebAssembly.Memory))throw new Error(`instance.exports.memory must be a WebAssembly.Memory. Recceived ${e}.`);this.setMemory(e),n._start&&n._start()}getImportNamespace(t){let e=null;for(let n of WebAssembly.Module.imports(t))if("function"===n.kind&&n.module.startsWith("wasi_"))if(e){if(e!==n.module)throw new Error("Multiple namespaces detected.")}else e=n.module;return e}getImports(t){switch(this.getImportNamespace(t)){case"wasi_unstable":return{wasi_unstable:this.wasiImport};case"wasi_snapshot_preview1":return{wasi_snapshot_preview1:this.wasiImport};default:throw new Error("Can't detect a WASI namespace for the WebAssembly Module")}}initWasiFdInfo(){if(null!=this.env.WASI_FD_INFO){const t=JSON.parse(this.env.WASI_FD_INFO);for(const e in t){s.log(e);const n=parseInt(e);if(this.FD_MAP.has(n))continue;const r=t[e];try{this.bindings.fs.fstatSync(r)}catch(t){s.log("discarding ",{wasi_fd:e,real:r});continue}const i={real:r,filetype:c.WASI_FILETYPE_SOCKET_STREAM,rights:{base:S,inheriting:BigInt(0)}};this.FD_MAP.set(n,i)}s.log("after initWasiFdInfo: ",this.FD_MAP),s.log("fdInfo = ",t)}else s.log("no WASI_FD_INFO")}}},9862:()=>{},964:()=>{}},r={};function s(t){var e=r[t];if(void 0!==e)return e.exports;var i=r[t]={id:t,loaded:!1,exports:{}};return n[t].call(i.exports,i,i.exports,s),i.loaded=!0,i.exports}s.m=n,s.x=()=>{var t=s.O(void 0,[298],(()=>s(2835)));return s.O(t)},t=[],s.O=(e,n,r,i)=>{if(!n){var o=1/0;for(I=0;I<t.length;I++){for(var[n,r,i]=t[I],_=!0,a=0;a<n.length;a++)(!1&i||o>=i)&&Object.keys(s.O).every((t=>s.O[t](n[a])))?n.splice(a--,1):(_=!1,i<o&&(o=i));if(_){t.splice(I--,1);var l=r();void 0!==l&&(e=l)}}return e}i=i||0;for(var I=t.length;I>0&&t[I-1][2]>i;I--)t[I]=t[I-1];t[I]=[n,r,i]},s.f={},s.e=t=>Promise.all(Object.keys(s.f).reduce(((e,n)=>(s.f[n](t,e),e)),[])),s.u=t=>t+".bundle.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;s.g.importScripts&&(t=s.g.location+"");var e=s.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=t})(),(()=>{var t={753:1};s.f.i=(e,n)=>{t[e]||importScripts(s.p+s.u(e))};var e=self.webpackChunkcowasm_sh=self.webpackChunkcowasm_sh||[],n=e.push.bind(e);e.push=e=>{var[r,i,o]=e;for(var _ in i)s.o(i,_)&&(s.m[_]=i[_]);for(o&&o(s);r.length;)t[r.pop()]=1;n(e)}})(),e=s.x,s.x=()=>s.e(298).then(e),s.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,