/*! For license information please see 658.bundle.js.LICENSE.txt */
(self.webpackChunkcowasm_sh=self.webpackChunkcowasm_sh||[]).push([[658],{2403:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.initConstants=void 0;const i=(0,r(n(1227)).default)("posix:constants"),o={};e.default=o,e.initConstants=function(t){const{names:e,values:n}=function({callFunction:t,recv:e},n){let r=t("getConstants");if(0==r)throw Error("unable to receive JSON object");return JSON.parse(e.string(r))}(t);for(let t=0;t<e.length;t++)o[e[t]]=n[t];i(o)}},4255:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function({sleep:t}){return{epoll_create:t=>0,epoll_create1:t=>0,epoll_ctl:(t,e,n,r)=>0,epoll_wait:(e,n,r,i)=>(t?.(i),0)}}},9319:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.nativeToWasm=void 0;const i=r(n(2403));e.default=function(t){const e=i.default[t],n=Error(`Error ${t}  (errno=${e}).`);return n.wasiErrno=e,n},e.nativeToWasm=function(t){const e=["E2BIG","EACCES","EBADF","EBUSY","ECHILD","EDEADLK","EEXIST","EFAULT","EFBIG","EINTR","EINVAL","EIO","EISDIR","EMFILE","EMLINK","ENFILE","ENODEV","ENOENT","ENOEXEC","ENOMEM","ENOSPC","ENOTDIR","ENOTTY","ENXIO","EPERM","EPIPE","EROFS","ESPIPE","ESRCH","ETXTBSY","EXDEV"],n={};for(const r of e){const e=t.constants?.[r];if(!e)throw Error(`posix constant ${r} not known`);const o=i.default[r];if(!o)throw Error(`wasm constant ${r} not known`);n[e]=o}return n}},7335:function(t,e,n){"use strict";var r=n(8764).Buffer,i=n(5108),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=o(n(1227)),a=n(9319),u=o(n(2403)),c=n(6470),l=(0,s.default)("posix:fork-exec"),f=r.from("\0asm");e.default=function({posix:t,recv:e,wasi:n,run:o,fs:s,child_process:h}){function p(t){const e=n.FD_MAP.get(t);return null==e?-1:e.real}function d(){const e={};for(const r of n.FD_MAP.keys()){const i=n.FD_MAP.get(r);try{t.is_inheritable(i.real)&&(e[r]=i.real)}catch(t){l("getInheritableDescriptorsMap",i.real,t)}}return e}return{python_wasm_set_inheritable:(e,n)=>{if(null==t.set_inheritable)return 0;const r=p(e);if(-1==r)throw Error("invalid file descriptor");try{t.set_inheritable(r,!!n)}catch(t){return 0}return 0},python_wasm_fork_exec:(n,r,i,o,s,c,f,h,_,g,y,m,S,E,v,I,b,w,A,T,O,R,N,F,W,C)=>{l("called fork_exec"),l("ignoring these: ",{restore_signals:E,call_setsid:v,pgid_to_set:I,call_setgid:b,gid:w,call_setgroups:A,groups_size:T,groups:O,call_setuid:R,uid:N,child_umask:F,child_sigmask:W}),l("before change",{p2cread:s,p2cwrite:c,c2pread:f,c2pwrite:h,errread:_,errwrite:g,errpipe_read:y,errpipe_write:m});const L=[],P=(0,a.nativeToWasm)(t);for(let t=0;t<100;t++)L[t]=P[t]??u.default.ENOENT;const D=JSON.stringify(d()),x=e.arrayOfStrings(i);x.length>0&&x.push(`WASI_FD_INFO=${D}`);const k={exec_array:e.arrayOfStrings(n),argv:e.arrayOfStrings(r),envp:x,cwd:e.string(o),p2cread:p(s),p2cwrite:p(c),c2pread:p(f),c2pwrite:p(h),errread:p(_),errwrite:p(g),errpipe_read:p(y),errpipe_write:p(m),close_fds:S,fds_to_keep:e.arrayOfI32(C).map(p),err_map:L,WASI_FD_INFO:D};l("opts",k),l("descriptors map = ",d());try{const e=t.fork_exec(k);return l("got subprocess = ",e),e}catch(t){return l("error doing fork",t),-1}},cowasm_vforkexec:(t,n=0)=>{const a=e.arrayOfStrings(t),u=n?e.string(n):"";if(l("cowasm_vforkexec",a),!a[0])throw l("cowasm_vforkexec","no argv[0]"),Error("argv[0] must be defined");try{if(!a[0].includes("/")){l("cowasm_vforkexec","go through search path to find",a[0]);for(const t of u.split(":")){const e=(0,c.join)((0,c.resolve)(t),a[0]);try{if(s.statSync(e).mode&s.constants.S_IXUSR){a[0]=e;break}}catch(t){}}l("cowasm_vforkexec","found",a[0])}if(!a[0].includes("/")||!s.existsSync(a[0]))return l("cowasm_vforkexec","could not find executable"),i.error(`${a[0]}: not found\n`),127;if(!(s.statSync(a[0]).mode&s.constants.S_IXUSR))return l("cowasm_vforkexec","executable has wrong permissions (missing IXUSR)"),i.error(`${a[0]}: Permission denied\n`),126;const t=function(t){const e=s.openSync(t,"r"),n=r.alloc(4);return s.readSync(e,n,0,4,0),f.equals(n)}(a[0]);if(l("isWasm = ",t),t)return l("running wasm executable",a[0]),o(a);if(null!=h)return l("running native executable",a[0]),function(t){if(null==h)return i.log("ERROR: Running native commands not yet implemented in this environment."),1;try{return h.execFileSync(t[0],t.slice(1),{stdio:"inherit"}),0}catch(t){return t.status}}(a);l("can't run anything"),i.error(`${a[0]}: cannot execute binary file\n`)}catch(t){i.trace(`${a[0]}: ${t}`)}return 127}}}},417:function(t,e,n){"use strict";var r=n(4155),i=n(5108),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=o(n(7335)),a=o(n(4255)),u=o(n(6987)),c=o(n(8195)),l=o(n(8947)),f=o(n(3450)),h=o(n(3011)),p=o(n(8319)),d=o(n(3)),_=o(n(6373)),g=o(n(5343)),y=o(n(2385)),m=o(n(8819)),S=o(n(3999)),E=o(n(9204)),v=o(n(5005)),I=n(2403),b=o(n(2403)),w=o(n(1227)),A=(0,w.default)("posix:not-implemented"),T=(0,w.default)("posix:call"),O=(0,w.default)("posix:return"),R=(0,w.default)("posix:error");r.env.__STUPID_HACK__="",e.default=function(t){const e={...(0,a.default)(t),...(0,s.default)(t),...(0,u.default)(t),...(0,c.default)(t),...(0,l.default)(t),...(0,f.default)(t),...(0,h.default)(t),...(0,p.default)(t),...(0,d.default)(t),...(0,y.default)(t),...(0,_.default)(t),...(0,g.default)(t),...(0,S.default)(t),...(0,m.default)(t),...(0,E.default)(t),...(0,v.default)(t)},n={};let r,o={};if(null!=t.posix.constants)for(const e in t.posix.constants)o[t.posix.constants[e]]=e;function w(e,n,r){if(0==e||isNaN(e))return void t.callFunction("setErrno",e);const s=o[e];if(null!=s){const i=b.default[s];if(null!=i)return R.enabled&&R({name:n,nativeErrno:e,wasiErrno:i,symbol:s,args:r}),void t.callFunction("setErrno",i)}const a=null!=s?`WARNING in posix '${n}': Unable to map nativeErrno ${e}: add ${s} to WASM posix constants in @cowasm/kernel`:`WARNING in posix '${n}': Unable to map nativeErrno ${e}: add native symbol corresponding to errno=${e} to the posix-node package`;i.warn(a),A(a)}r=null!=t.posix.chdir?()=>{try{t.posix.chdir?.(t.getcwd())}catch(t){}}:()=>{};for(const o in e)n[o]=(...n)=>{r();try{T(o,n);const t=e[o](...n);return O(o,t),t}catch(e){return R(o,e),null!=e.wasiErrno?t.callFunction("setErrno",e.wasiErrno):null!=e.code?w(parseInt(e.code),o,n):"NotImplementedError"==e.name?t.callFunction("setErrno",b.default.ENOSYS):(i.trace(`WARNING: Posix library call to ${o} raised exception without error code.  The raised error is '${e}'`),A(`Posix call to ${o} raised exception without error code`,e)),e.ret??-1}};return n.init=()=>{(0,I.initConstants)(t)},n}},6987:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.sendSockaddr=e.wasmToNativeSocktype=e.nativeToWasmFamily=e.wasmToNativeFamily=void 0;const o=n(2130),s=i(n(2403));function a(t,e){if(0==e)return e;if(e==s.default.AF_INET)return t.constants.AF_INET;if(e==s.default.AF_INET6)return t.constants.AF_INET6;throw Error(`unsupported WASM address family: ${e}`)}function u(t,e){if(0==e)return e;if(e==t.constants.AF_INET)return s.default.AF_INET;if(e==t.constants.AF_INET6)return s.default.AF_INET6;throw Error(`unsupported native address family: ${e}`)}function c(t,e){if(!e)return e;let n=0;for(const i in s.default)if(i.startsWith("SOCK")&&s.default[i]&e){if(null==t.constants[i]){const t=`We need the constant ${i} to be defined in the posix-node module.`;throw r.warn(t),Error(t)}n|=t.constants[i],e&=~s.default[i]}if(0!=e){const t=`Unable to convert remainging socktype ${e} to native. Make sure all SOCK* constants are defined.`;throw r.warn(t),Error(t)}return n}function l(t,e){if(!e)return e;let n=0;for(const i in t.constants)if(i.startsWith("SOCK")&&t.constants[i]&e){if(null==s.default[i]){const t=`We need the constant ${i} to be defined in the posix-node module.`;throw r.warn(t),Error(t)}n|=s.default[i],e&=~t.constants[i]}if(0!=e){const t=`Unable to convert remainging socktype ${e} to native. Make sure all SOCK* posix.constants are defined.`;throw r.warn(t),Error(t)}return n}function f(t,e,n,r,i,o){null==n&&(n=t.malloc(2+i));const s=new DataView(e.buffer);s.setUint16(n,r,!0);for(let t=0;t<i;t++)s.setUint8(n+2+t,o[t]);return n}e.default=function({memory:t,posix:e,callFunction:n,recv:r,send:i,free:s}){const h={};for(const t of" getprotobyname getservbyname getservbyport getnameinfo".split(/\s+/))h[t]=()=>(0,o.notImplemented)(t);function p(t){const e=i.malloc(4*(t.length+1));if(0==e)throw Error("out of memory");for(let n=0;n<t.length;n++){const r=i.string(t[n]);i.pointer(e+4*n,r)}return i.pointer(e+4*t.length,0),e}function d(t){const r=u(e,t.h_addrtype);return n("sendHostent",i.string(t.h_name),p(t.h_aliases),r,t.h_length,p(t.h_addr_list),t.h_addr_list.length)}h.gethostbyname=t=>{try{null==e.gethostbyname&&(0,o.notImplemented)("gethostbyaddr",0);const n=r.string(t);return d(e.gethostbyname(n))}catch(t){throw t.ret=0,t}},h.gethostbyaddr=(t,i,a)=>{try{null==e.gethostbyaddr&&(0,o.notImplemented)("gethostbyaddr",0);const i=n("recvAddr",t,a);if(0==i)return 0;const u=r.string(i);return s(i),d(e.gethostbyaddr(u))}catch(t){throw t.ret=0,t}},h.getaddrinfo=(s,h,p,d)=>{if(null==e.getaddrinfo)return(0,o.notImplemented)("getaddrinfo"),-1;const _=r.string(s),g=r.string(h),y=function(n){const r=new DataView(t.buffer),i=r.getUint32(n,!0);n+=4;let o=a(e,r.getUint32(n,!0));n+=4;const s=c(e,r.getUint32(n,!0));return n+=4,{flags:i,family:o,socktype:s,protocol:r.getUint32(n,!0)}}(p);let m;try{m=e.getaddrinfo(_,g,y)}catch(t){if(t.code)return parseInt(t.code);throw t}let S=0,E=0,v=m.length-1;for(;v>=0;){const r=m[v];r.ai_socktype=l(e,r.ai_socktype),r.ai_family=r.sa_family=u(e,r.ai_family);const o=f(i,t,null,r.sa_family,r.ai_addrlen,r.sa_data);if(!o)throw Error("error creating sockaddr");if(E=n("sendAddrinfo",r.ai_flags,r.ai_family,r.ai_socktype,r.ai_protocol,r.ai_addrlen,o,null!=r.ai_canonname?i.string(r.ai_canonname):0,S),!E)throw Error("error creating addrinfo structure");S=E,v-=1}if(!E)throw Error("error creating addrinfo structure");return i.pointer(d,E),0};const _={};h.gai_strerror=t=>{if(null!=_[t])return _[t];const n=i.string(e.gai_strerror?.(t)??"Unknown error");return _[t]=n,n};const g={};h.hstrerror=t=>{if(null!=g[t])return g[t];const n=i.string(e.hstrerror?.(t)??"Unknown error");return g[t]=n,n};let y=null;return h.__h_errno_location=()=>{if(null==y&&(y=i.malloc(4),i.i32(y,0)),null==y)throw Error("bug");return y},h},e.wasmToNativeFamily=a,e.nativeToWasmFamily=u,e.wasmToNativeSocktype=c,e.sendSockaddr=f},8195:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(2130),o=r(n(2403));e.default=function({posix:t,recv:e,send:n,callFunction:r}){return{if_indextoname:(e,r)=>{const{if_indextoname:s}=t;let a;null==s&&(0,i.notImplemented)("if_indextoname");try{a=s(e)}catch(t){return 0}return n.string(a,{ptr:r,len:o.default.IFNAMSIZ}),r},if_nametoindex:n=>{const{if_nametoindex:r}=t;null==r&&(0,i.notImplemented)("if_nametoindex");const o=e.string(n);try{return r(o)}catch(t){return 0}},if_nameindex:()=>{const{if_nameindex:e}=t;try{if(null==e){const t=r("createNameIndexArray",0);if(0==t)throw Error("out of memory");return t}const t=e(),i=r("createNameIndexArray",t.length);if(0==i)throw Error("out of memory");for(let e=0;e<t.length;e++)r("setNameIndexElement",i,e,t[e][0],n.string(t[e][1]));return i}catch(t){throw t.ret=0,t}},if_freenameindex:t=>{r("freeNameIndexArray",t)}}}},8947:(t,e,n)=>{"use strict";var r=n(5108);Object.defineProperty(e,"__esModule",{value:!0});const i=n(2130);e.default=function(t){const{callFunction:e,posix:n,recv:o,send:s,wasi:a}=t;function u(t,n){e("set_statvfs",t,n.f_bsize,n.f_frsize,BigInt(n.f_blocks),BigInt(n.f_bfree),BigInt(n.f_bavail),BigInt(n.f_files),BigInt(n.f_ffree),BigInt(n.f_favail),n.f_fsid,n.f_flag,n.f_namemax)}function c(t){const e=a.FD_MAP.get(t);return null==e?-1:e.real}t.state.user_from_uid_cache={};const l={syslog:()=>{(0,i.notImplemented)("syslog")},login_tty:t=>(null==n.login_tty&&(0,i.notImplemented)("login_tty"),n.login_tty(c(t)),0),statvfs:(t,e)=>{null==n.statvfs&&(0,i.notImplemented)("statvfs");const r=o.string(t);return u(e,n.statvfs(r)),0},fstatvfs:(t,e)=>(null==n.fstatvfs&&(0,i.notImplemented)("fstatvfs"),u(e,n.fstatvfs(c(t))),0),ctermid:e=>{if(null==n.ctermid&&(0,i.notImplemented)("ctermid"),e){const t=n.ctermid();return s.string(t,{ptr:e,len:t.length+1}),e}if(t.state.ctermidPtr)return t.state.ctermidPtr;const r=n.ctermid();return t.state.ctermidPtr=s.string(r)},getpwnam_r:(t,e,n,r,i)=>(s.pointer(i,0),0),getpwuid:()=>0,getpwuid_r:(t,e,n,r,i)=>(s.pointer(i,0),0),openpty:()=>{(0,i.notImplemented)("openpty")},msync:()=>{(0,i.notImplemented)("msync")},madvise:()=>{(0,i.notImplemented)("madvise")},mremap:()=>{(0,i.notImplemented)("mremap")},tmpfile:()=>{(0,i.notImplemented)("tmpfile")},openlog:()=>{(0,i.notImplemented)("openlog")},tcflush:()=>{(0,i.notImplemented)("tcflush")},getpwnam:()=>(r.log("STUB: getpwnam"),0),getrlimit:()=>{(0,i.notImplemented)("getrlimit")},setrlimit:()=>{(0,i.notImplemented)("setrlimit")},user_from_uid:(e,n=0)=>n?0:t.state.user_from_uid_cache[e]?t.state.user_from_uid_cache[e]:t.state.user_from_uid_cache[e]=s.string(`${e}`),group_from_gid:(t,e=0)=>l.user_from_uid(t,e),getrusage:(t,e)=>((0,i.notImplemented)("getrusage"),0),_Znwm:()=>{(0,i.notImplemented)("_Znwm")},_ZdlPv:()=>{(0,i.notImplemented)("_ZdlPv")},__cxa_throw:()=>{(0,i.notImplemented)("__cxa_throw")},__cxa_allocate_exception:()=>{(0,i.notImplemented)("__cxa_allocate_exception")},_ZNSt20bad_array_new_lengthC1Ev:()=>{(0,i.notImplemented)("_ZNSt20bad_array_new_lengthC1Ev")},_ZNSt20bad_array_new_lengthD1Ev:()=>{(0,i.notImplemented)("_ZNSt20bad_array_new_lengthD1Ev")},_ZTISt20bad_array_new_length:()=>{(0,i.notImplemented)("_ZTISt20bad_array_new_length")},ngettext:()=>{(0,i.notImplemented)("ngettext")},dngettext:()=>{(0,i.notImplemented)("dngettext")},dcngettext:()=>{(0,i.notImplemented)("dcngettext")}};return l}},3450:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(2130);e.default=function({}){const t={};for(const e of"sched_get_priority_max sched_get_priority_min sched_getparam sched_getscheduler sched_rr_get_interval sched_setparam sched_setscheduler".split(/\s+/))t[e]=()=>(0,r.notImplemented)(e);return t}},3011:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.setSignalSet=e.getSignalSet=void 0;const i=r(n(2403)),o=n(2130),s={};function a(t){return null==s[t]&&(s[t]=new Set),s[t]}e.getSignalSet=a,e.setSignalSet=function(t,e){s[t]=e};const u=new Set;e.default=function({process:t}){const e={kill:(e,n)=>(null==t.kill||t.kill(e,n),0),raise:n=>e.kill(t.pid??1,n),killpg:(e,n)=>(null==t.kill||t.kill(-e,n),0),sigemptyset:t=>(a(t).clear(),0),sigfillset:t=>{const e=a(t);for(let t=1;t<=31;t++)e.add(t);return 0},sigaddset:(t,e)=>(a(t).add(e),0),sigdelset:(t,e)=>(a(t).delete(e),0),sigismember:(t,e)=>a(t).has(e)?1:0,sigprocmask:(t,e,n)=>{try{if(!e)return 0;const r=a(e);switch(t){case i.default.SIG_BLOCK:for(const t of r)u.add(t);return 0;case i.default.SIG_UNBLOCK:for(const t of r)u.delete(t);return 0;case i.default.SIG_SETMASK:u.clear();for(const t of r)u.add(t);return 0;default:throw Error(`sigprocmask - invalid how=${t}`)}}finally{n&&function(t){const e=a(t);e.clear();for(const t of u)e.add(t)}(n)}},sigsuspend:()=>{(0,o.notImplemented)("sigsuspend")}};return e.pthread_sigmask=e.sigprocmask,e}},8319:function(t,e,n){"use strict";var r=n(8764).Buffer,i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=i(n(9319)),s=n(6987),a=i(n(2403)),u=n(7545),c=(0,i(n(1227)).default)("posix:socket");e.default=function({callFunction:t,posix:e,recv:n,wasi:i,send:l,memory:f}){function h(t,n){(0,s.sendSockaddr)(l,f,n,(0,s.nativeToWasmFamily)(e,t.sa_family),t.sa_len,t.sa_data)}function p(r,i){const o=(0,s.wasmToNativeFamily)(e,t("recv_sockaddr_sa_family",r)),a=i-2,u=n.buffer(t("recv_sockaddr_sa_data",r),a);for(let t=a;t<a;t++)u[t]=0;return{sa_family:o,sa_len:a,sa_data:u}}function d(t){const e=i.FD_MAP.get(t);if(null==e)throw Error(`invalid fd=${t}`);return e.real}function _(t){const e=i.FD_MAP.get(t);if(null==e)throw Error(`unknown sock type for fd=${t}`);return e.socktype}function g(t){let n=0;for(const r of["MSG_OOB","MSG_PEEK","MSG_WAITALL","MSG_DONTROUTE"])t&a.default[r]&&(n|=e.constants[r]);return n}function y(t){return t==a.default.SOL_SOCKET?e.constants.SOL_SOCKET:t}function m(t){for(const n in a.default)if(n.startsWith("SO_")&&t==a.default[n]){const t=e.constants[n];if(null==t)throw Error(`unsupported option name "${n}" -- defined in WebAssembly but not natively`);return t}throw Error(`unknown option name ${t}`)}function S(t,e){const n=i.getUnusedFileDescriptor(1e3);return i.FD_MAP.set(n,{real:t,rights:{base:u.SOCKET_DEFAULT_RIGHTS,inheriting:BigInt(0)},filetype:u.constants.WASI_FILETYPE_SOCKET_STREAM,socktype:e}),n}return{socket(t,n,r){if(null==e.socket)throw(0,o.default)("ENOTSUP");c("socket",{family:t,socktype:n,protocol:r});const i=(0,s.wasmToNativeFamily)(e,t);let u;a.default.SOCK_CLOEXEC&n?(n&=~a.default.SOCK_CLOEXEC,u=!1):u=!0;const l=(0,s.wasmToNativeSocktype)(e,n),f=r,h=e.socket(i,l,f);return u||e.set_inheritable(h,u),S(h,n)},bind(t,n,r){if(c("bind",t),null==e.bind)throw(0,o.default)("ENOTSUP");const i=p(n,r);return c("bind: address",i),e.bind(d(t),i),0},connect(t,n,r){if(null==e.connect)throw(0,o.default)("ENOTSUP");const i=p(n,r);return c("connect",{socket:t,sockaddr:i,address_len:r}),e.connect(d(t),i),0},getsockname(t,n,r){if(null==e.getsockname)throw(0,o.default)("ENOTSUP");c("getsockname",t);const i=e.getsockname(d(t));return h(i,n),l.u32(r,i.sa_len),0},getpeername(t,n,r){c("getpeername",t);const i=e.getpeername(d(t));return h(i,n),l.u32(r,i.sa_len),0},recv(t,n,i,s){if(c("recv",{socket:t,bufPtr:n,length:i,flags:s}),null==e.recv)throw(0,o.default)("ENOTSUP");const a=r.alloc(i),u=e.recv(d(t),a,g(s));return l.buffer(a,n),u},recvfrom(t,n,i,s,a,u){if(c("recvfrom",{socket:t,bufPtr:n,length:i,flags:s,sockaddrPtr:a,sockaddrLenPtr:u}),null==e.recvfrom)throw(0,o.default)("ENOTSUP");const f=r.alloc(i),{bytesReceived:p,sockaddr:_}=e.recvfrom(d(t),f,g(s));return c("recvfrom got ",{buffer:f,bytesReceived:p,sockaddr:_}),l.buffer(f,n),h(_,a),l.u32(u,_.sa_len),p},send(t,r,i,s){if(c("send",{socket:t,bufPtr:r,length:i,flags:s}),null==e.send)throw(0,o.default)("ENOTSUP");const a=n.buffer(r,i);return e.send(d(t),a,g(s))},sendto(t,n,i,s,a,u){if(c("sendto",{socket:t,bufPtr:n,length:i,flags:s,addressPtr:a,addressLen:u}),null==e.sendto)throw(0,o.default)("ENOTSUP");const l=r.alloc(i),f=p(a,u),h=e.sendto(d(t),l,g(s),f);return c("sendto sent ",h),h},shutdown(t,n){if(c("shutdown",{socket:t,how:n}),null==e.shutdown)throw(0,o.default)("ENOTSUP");let r=-1;for(const t of["SHUT_RD","SHUT_WR","SHUT_RDWR"])if(n==a.default[t]){r=e.constants[t];break}if(-1==r)throw(0,o.default)("EINVAL");return e.shutdown(d(t),r),0},listen(t,n){if(c("listen",{socket:t,backlog:n}),null==e.listen)throw(0,o.default)("ENOTSUP");return e.listen(d(t),n)},accept(t,n,r){if(c("accept",{socket:t}),null==e.accept)throw(0,o.default)("ENOTSUP");const{fd:i,sockaddr:s}=e.accept(d(t));return h(s,n),l.u32(r,s.sa_len),c("accept got back ",{fd:i,sockaddr:s}),S(i,_(t))},getsockopt(t,i,s,u,f){if(c("getsockopt",{socket:t,level:i,option_name:s,option_value_ptr:u,option_len_ptr:f}),i==a.default.SOL_SOCKET&&s==a.default.SO_TYPE){const e=_(t),n=new ArrayBuffer(4);new DataView(n).setUint32(0,e,!0);const i=r.from(n);return l.buffer(i,u),l.i32(f,i.length),0}if(null==e.getsockopt)throw(0,o.default)("ENOTSUP");const h=e.getsockopt(d(t),y(i),m(s),n.i32(f));return l.buffer(h,u),l.i32(f,h.length),0},setsockopt(t,r,i,s,a){if(c("setsockopt",{socket:t,level:r,option_name:i,option_value_ptr:s,option_len:a}),null==e.setsockopt)throw(0,o.default)("ENOTSUP");const u=n.buffer(s,a);return e.setsockopt(d(t),y(r),m(i),u),0},pollSocket:(t,n,r)=>(null==e.pollSocket||e.pollSocket(d(t),"read"==n?a.default.POLLIN:a.default.POLLOUT,Math.min(250,r)),0)}}},3:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(2130),i=n(3011);e.default=function(t){const{callFunction:e,posix:n,recv:o,send:s}=t;function a(){return null==t.state.fileActions&&(t.state.spawn_fileActions={}),t.state.spawn_fileActions}function u(){return null==t.state.spawn_attrs&&(t.state.spawn_attrs={}),t.state.spawn_attrs}function c(t,e=!1){const n=u();if(null==n[t])return n[t]={};const r=n[t];if(null!=r)return e&&(null!=r.sigdefaultPtr&&(r.sigdefault=(0,i.getSignalSet)(r.sigdefaultPtr)),null!=r.sigmaskPtr&&(r.sigmask=(0,i.getSignalSet)(r.sigmaskPtr))),r;throw Error("bug")}return{posix_spawnattr_setschedparam:(t,n)=>(c(t).schedparam={sched_priority:e("get_posix_spawnattr_schedparam_sched_priority",n)},0),posix_spawnattr_getschedparam:(t,n)=>{const r=c(t).schedparam??0;return e("set_posix_spawnattr_schedparam_sched_priority",n,r),0},posix_spawnattr_setschedpolicy:(t,e)=>(c(t).schedpolicy=e,0),posix_spawnattr_getschedpolicy:(t,e)=>(s.i32(e,c(t).schedpolicy??0),0),posix_spawnattr_init:t=>(u()[t]={},0),posix_spawnattr_destroy:t=>(delete u()[t],0),posix_spawnattr_setflags:(t,e)=>(c(t).flags=e,0),posix_spawnattr_getflags:(t,e)=>(s.i32(e,c(t).flags??0),0),posix_spawnattr_setpgroup:(t,e)=>(c(t).pgroup=e,0),posix_spawnattr_getpgroup:(t,e)=>(s.i32(e,c(t).pgroup??0),0),posix_spawnattr_setsigmask:(t,e)=>(c(t).sigmaskPtr=e,0),posix_spawnattr_getsigmask:(t,e)=>{const n=c(t).sigmaskPtr;return(0,i.setSignalSet)(e,(0,i.getSignalSet)(n)),0},posix_spawnattr_setsigdefault:(t,e)=>(c(t).sigdefaultPtr=e,0),posix_spawnattr_getsigdefault:(t,e)=>{const n=c(t).sigdefaultPtr;return(0,i.setSignalSet)(e,(0,i.getSignalSet)(n)),0},posix_spawn:(t,e,i,u,l,f)=>{null==n.posix_spawn&&(0,r.notImplemented)("posix_spawn");const h=o.string(e),p=o.arrayOfStrings(l),d=o.arrayOfStrings(f),_=a(),g=n.posix_spawn(h,_[i],c(u,!0),p,d);return s.i32(t,g),0},posix_spawnp:(t,e,i,u,l,f)=>{null==n.posix_spawnp&&(0,r.notImplemented)("posix_spawnp");const h=o.string(e),p=o.arrayOfStrings(l),d=o.arrayOfStrings(f),_=a(),g=n.posix_spawnp(h,_[i],c(u,!0),p,d);return s.i32(t,g),0},posix_spawn_file_actions_init:t=>(a()[t]=[],0),posix_spawn_file_actions_destroy:t=>(delete a()[t],0),posix_spawn_file_actions_addclose:(t,e)=>{const n=a();return null==n[t]&&(n[t]=[]),n[t].push(["addclose",e]),0},posix_spawn_file_actions_addopen:(t,e,n,r,i)=>{const s=a();null==s[t]&&(s[t]=[]);const u=o.string(n);return s[t].push(["addopen",e,u,r,i]),0},posix_spawn_file_actions_adddup2:(t,e,n)=>{const r=a();return null==r[t]&&(r[t]=[]),r[t].push(["adddup2",e,n]),0}}}},2385:function(t,e,n){"use strict";n(5108);var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(6470),r(n(2403)),r(n(9319));const i=n(2130);e.default=function({fs:t,process:e,recv:n,wasi:r}){return{chmod:(t,e)=>0,_fchmod:(t,e)=>0,fchmodat:(t,e,n,r)=>0,lchmod:(t,e)=>0,umask:t=>e.umask?.(t)??18,mkfifo:()=>{(0,i.notImplemented)("mkfifo")},mknod:()=>{(0,i.notImplemented)("mknod")}}}},5343:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){const{fs:e,send:n}=t;return{tmpnam(r){for(let i=0;i<1e3;i++){let i="/tmp/tmpnam_";for(let t=0;t<6;t++)i+=String.fromCharCode(65+Math.floor(26*Math.random()));if(!e.existsSync(i))return r?(n.string(i,{ptr:r,len:20}),r):(t.state.tmpnam_buf||(t.state.tmpnam_buf=n.malloc(20)),n.string(i,{ptr:t.state.tmpnam_buf,len:20}),t.state.tmpnam_buf)}return 0},popen:(t,e)=>0,pclose:t=>-1}}},6373:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=n(2130),s=(0,i(n(1227)).default)("posix:stdlib");e.default=function({child_process:t,os:e,recv:n,send:i,fs:a}){return{setjmp:()=>(s("STUB: setjmp - no op"),0),longjmp:()=>(s("STUB: longjmp - no op"),0),siglongjmp:()=>(s("STUB: siglongjmp - no op"),0),sigsetjmp:()=>(s("STUB: sigsetjmp - no op"),0),getloadavg:(t,n)=>{const{loadavg:r}=e;if(null==r)return-1;const o=r();return i.f64(t,o[0]),i.f64(t+8,o[1]),i.f64(t+16,o[2]),n},system:e=>{null==t.spawnSync&&(0,o.notImplemented)("system is not implemented yet");const i=n.string(e),{stdout:s,stderr:a,status:u}=t.spawnSync(i,{shell:!0});return r.log(s.toString()),r.warn(a.toString()),u},realpath:(t,e)=>{try{const r=n.string(t);s("realpath",{path:r});const o=a.realpathSync(r);return i.string(o,{ptr:e,len:4096})}catch(t){return s("realpath error ",t),0}}}}},8819:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(1227)),o=r(n(2403)),s=(0,i.default)("posix:termios"),a={c_iflag:["IGNBRK","BRKINT","IGNPAR","PARMRK","INPCK","ISTRIP","INLCR","IGNCR","ICRNL","IXON","IXANY","IXOFF","IMAXBEL","IUTF8"],c_oflag:["OPOST","ONLCR","OCRNL","ONOCR","ONLRET","OFILL","OFDEL"],c_cflag:["CSIZE","CS5","CS6","CS7","CS8","CSTOPB","CREAD","PARENB","PARODD","HUPCL","CLOCAL"],c_lflag:["ISIG","ICANON","ECHO","ECHOE","ECHOK","ECHONL","NOFLSH","TOSTOP","IEXTEN"]};e.default=function({posix:t,recv:e,send:n,wasi:r,noStdio:i}){function u(e){const n={c_iflag:0,c_oflag:0,c_cflag:0,c_lflag:0};let r=[];for(const i in e){n[i]=0;for(const u of a[i])e[i]&t.constants[u]&&(n[i]|=o.default[u],s.enabled&&r.push(u))}return s.enabled&&(r.sort(),s("NATIVE: ",r.join(" "))),n}return{tcgetattr(e,o){const s=r.FD_MAP.get(e).real;let a,c;return i||null==t.tcgetattr?(c={},a=0==s||1==s?{c_iflag:27906,c_oflag:5,c_cflag:1200,c_lflag:32827}:{c_iflag:0,c_oflag:0,c_cflag:0,c_lflag:0}):(c=t.tcgetattr(s),a=u(c)),function(t,{c_iflag:e,c_oflag:r,c_cflag:i,c_lflag:o}){n.u32(t,e??0),n.u32(t+4,r??0),n.u32(t+8,i??0),n.u32(t+12,o??0)}(o,a),0},tcsetattr(n,c,l){const f=r.FD_MAP.get(n).real,h=function(t){return{c_iflag:e.u32(t),c_oflag:e.u32(t+4),c_cflag:e.u32(t+8),c_lflag:e.u32(t+12)}}(l);if(i||null==t.tcsetattr||null==t.tcgetattr)return 0;const p=t.tcgetattr(f),d={...p},_=u(p);let g=!1;for(const e in a)for(const n of a[e])(h[e]&o.default[n])!=(_[e]&o.default[n])&&(g=!0,h[e]&o.default[n]?p[e]|=t.constants[n]:p[e]&=~t.constants[n]);return g?(s("tcsetattr",{fd:f,tio_native:p,tio_native_orig:d}),t.tcsetattr(f,t.constants.TCSANOW,p),0):(s("tcsetattr: nothing changed"),0)},tcdrain:()=>(s("tcdrain - STUB"),0),tcflow:()=>(s("tcflow - STUB"),0),tcflush:()=>(s("tcflush - STUB"),0),tcsendbreak:()=>(s("tcsendbreak - STUB"),0)}}},3999:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(520),i=n(2130);e.default=function({child_process:t,memory:e,os:n}){return{adjtime(){(0,i.notImplemented)("TODO: implement adjtime")},settimeofday(){(0,i.notImplemented)("TODO: settimeofday")},clock_settime(i,o){if(null==t.spawnSync)throw Error("clock_settime is not supported on this platform");const s=new DataView(e.buffer).getUint32(o,!0);let a,u,c="",l=[];switch(n.platform?.()){case"darwin":a="date",u=["-f","%s",`${s}`];break;case"linux":a="date",u=[`--set=@${s}`];break;case"win32":const t=new Date(1e3*s);a="date",u=[r("m/d/yyyy",t)],c="time",u=[r("HH:MM:ss",t)];break;default:throw Error(`clock_settime not supported on platform  = ${n.platform?.()}`)}const{status:f,stderr:h}=t.spawnSync(a,u);if(f)throw Error(`clock_settime failed - ${h}`);if(c){const{status:e,stderr:n}=t.spawnSync(c,l);if(e)throw Error(`clock_settime failed - ${n}`)}return 0}}}},9204:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=n(2130),s=i(n(2403)),a=i(n(1227)),u=n(7545),c=(0,a.default)("posix:unistd");e.default=function(t){const{fs:e,os:n,process:i,recv:a,send:l,wasi:f,posix:h,memory:p,callWithString:d}=t;function _(t){const e=f.FD_MAP.get(t);if(null==e)throw Error("invalid file descriptor");return e.real}const g=f.FD_MAP.get(0),y=f.FD_MAP.get(1),m={chown:(t,n,r)=>{const i=a.string(t);return e.chownSync(i,n,r),0},lchown:(t,n,r)=>{const i=a.string(t);return e.lchownSync(i,n,r),0},_fchown:(t,n,r)=>(0==n||0==r||e.fchownSync(_(t),n,r),0),getuid:()=>i.getuid?.()??0,getgid:()=>i.getgid?.()??0,_geteuid:()=>i.geteuid?.()??0,getegid:()=>i.getegid?.()??0,getgroups:(t,e)=>{const n=i.getgroups?.();if(null==n)return 0;if(0==t)return n.length;const r=Math.min(n.length,t);if(0==r)return 0;const o=new DataView(p.buffer);for(let t=0;t<r;t++)o.setUint32(e+4*t,n[t],!0);return r},getpid:()=>i.pid??1,getpgid:t=>h.getpgid?.(t)??1,setpgid:(t,e)=>(null==h.setpgid&&(0,o.notImplemented)("setpgid"),h.setpgid(t,e),0),getpgrp:()=>h.getpgrp?.()??1,nice:t=>{const e=n.getPriority?.();null!=e&&n.setPriority?.(e+t)},getpriority:(t,e)=>null==n.getPriority?0:0!=t?(r.warn("getpriority can only be implemented in node.js for *process id*"),0):n.getPriority?.(e),setpriority:(t,e,i)=>null==n.setPriority?0:0!=t?(r.warn("setpriority can only be implemented in node.js for *process id*"),-1):n.setPriority?.(e,i),dup:t=>{null==h.dup&&(0,o.notImplemented)("dup");const e=f.FD_MAP.get(t),n=h.dup(e.real),r=f.getUnusedFileDescriptor();return f.FD_MAP.set(r,{...e,real:n}),r},dup2:(t,e)=>{null==h.dup2&&(0,o.notImplemented)("dup2");const n=f.FD_MAP.get(t);let r;r=f.FD_MAP.has(e)?f.FD_MAP.get(e).real??e:e;const i=h.dup2(n.real,r);return f.FD_MAP.set(e,{...n,real:i}),e},sync:()=>{if(null!=e.fsyncSync)for(const[t,{real:n}]of f.FD_MAP)e.fsyncSync(n)},setuid:()=>{throw Error("setuid is not supported")},seteuid:t=>(null==h.seteuid&&(0,o.notImplemented)("seteuid"),h.seteuid(t),0),setegid:t=>(null==h.setegid&&(0,o.notImplemented)("setegid"),h.setegid(t),0),setgid:t=>(null==i.setgid&&(0,o.notImplemented)("setgid"),i.setgid(t),0),setsid:t=>(null==h.setsid&&(0,o.notImplemented)("setsid"),h.setsid(t)),getsid:()=>{(0,o.notImplemented)("getsid")},setreuid:t=>(null==h.setreuid&&(0,o.notImplemented)("setreuid"),h.setreuid(t),0),setregid:t=>(null==h.setregid&&(0,o.notImplemented)("setregid"),h.setregid(t),0),getppid:()=>null==h.getppid?m.getpid():h.getppid(),setgroups:()=>{(0,o.notImplemented)("setgroups")},setpgrp:()=>{(0,o.notImplemented)("setpgrp")},tcgetpgrp:()=>{(0,o.notImplemented)("tcgetpgrp")},tcsetpgrp:()=>{(0,o.notImplemented)("tcsetpgrp")},fork:()=>{null==h.fork&&(0,o.notImplemented)("fork");const t=h.fork();return 0==t&&h.close_event_loop?.(),t},fork1:()=>{(0,o.notImplemented)("fork1")},vfork:()=>m.fork(),forkpty:()=>{(0,o.notImplemented)("forkpty")},getlogin:()=>{if(null!=t.state.getlogin_ptr)return t.state.getlogin_ptr;const e=n.userInfo?.()?.username??"user";return t.state.getlogin_ptr=l.string(e)},gethostname:(t,e)=>{if(null==n.hostname)throw Error("gethostname not supported on this platform");const r=n.hostname();return l.string(r,{ptr:t,len:e}),0},sethostname:(t,e)=>{if(null==h.sethostname)throw Error("sethostname not supported on this platform");const n=a.string(t,e);return h.sethostname(n),0},ttyname:e=>{if(null==h.ttyname)throw Error("ttyname_r is not supported on this platform");return null!=t.state.ttyname_ptr||(t.state.ttyname_ptr=l.malloc(128),l.string(h.ttyname(e),{ptr:t.state.ttyname_ptr,len:128})),t.state.ttyname_ptr},ttyname_r:(t,e,n)=>{if(null==h.ttyname)throw Error("ttyname_r is not supported on this platform");return l.string(h.ttyname(t),{ptr:e,len:n}),0},alarm:t=>{if(null==h.alarm)throw Error("alarm is not supported on this platform");return h.alarm(t)},getresuid:(t,e,n)=>{let r,i,o;null==h.getresuid?r=i=o=0:({ruid:r,euid:i,suid:o}=h.getresuid());const s=new DataView(p.buffer);return s.setUint32(t,r,!0),s.setUint32(e,i,!0),s.setUint32(n,o,!0),0},getresgid:(t,e,n)=>{let r,i,o;null==h.getresgid?r=i=o=0:({rgid:r,egid:i,sgid:o}=h.getresgid());const s=new DataView(p.buffer);return s.setUint32(t,r,!0),s.setUint32(e,i,!0),s.setUint32(n,o,!0),0},setresuid:(t,e,n)=>(null!=h.setresuid&&h.setresuid(t,e,n),0),setresgid:(t,e,n)=>(null!=h.setresgid&&h.setresgid(t,e,n),0),execve:(t,e,n)=>{null==h._execve&&(0,o.notImplemented)("execve");const r=a.string(t),i=a.arrayOfStrings(e),s=a.arrayOfStrings(n);return c("execve",r,i,s),h._execve(r,i,s),0},execv:(t,e)=>{null==h.execv&&(0,o.notImplemented)("execv");const n=a.string(t),r=a.arrayOfStrings(e);return c("execv",n,r),h.execv(n,r),0},execvp:(t,e)=>{null==h.execvp&&(0,o.notImplemented)("execvp");const n=a.string(t),r=a.arrayOfStrings(e);return c("execvp",n,r),h.execvp(n,r),0},execlp:()=>{(0,o.notImplemented)("execlp")},fexecve:(t,e,n)=>{null==h._fexecve&&(0,o.notImplemented)("fexecve");const r=a.arrayOfStrings(e),i=a.arrayOfStrings(n);return h._fexecve(_(t),r,i),0},pipe:t=>{null==h.pipe&&(0,o.notImplemented)("pipe");const{readfd:e,writefd:n}=h.pipe(),r=f.getUnusedFileDescriptor();f.FD_MAP.set(r,{real:e,rights:g.rights,filetype:u.constants.WASI_FILETYPE_SOCKET_STREAM});const i=f.getUnusedFileDescriptor();return f.FD_MAP.set(i,{real:n,rights:y.rights,filetype:u.constants.WASI_FILETYPE_SOCKET_STREAM}),l.i32(t,r),l.i32(t+4,i),0},pipe2:(t,e)=>{null==h.pipe2&&(0,o.notImplemented)("pipe2");let n=0;e&s.default.O_NONBLOCK&&(n+=h.constants?.O_NONBLOCK??0);const{readfd:i,writefd:a}=h.pipe2(n);return r.warn("pipe2 -- TODO: we almost certainly need to abstract these through our WASI fd object!"),l.i32(t,i),l.i32(t+4,a),0},lockf:(t,e,n)=>{const{lockf:r}=h;let i;null==r&&(0,o.notImplemented)("lockf");for(const t of["F_ULOCK","F_LOCK","F_TLOCK","F_TEST"])if(e==s.default[t]){i=h.constants[t];break}if(null==i)throw Error(`invalid cmd ${e}`);return r(_(t),i,BigInt(n)),0},pause:()=>{const{pause:t}=h;return null==t&&(0,o.notImplemented)("pause"),t()},initgroups:(t,e)=>{const{initgroups:n}=i;return null==n&&(0,o.notImplemented)("initgroups"),n(a.string(t),e),0},getgrouplist:(t,e,n,r)=>{const{getgrouplist:i}=h,o=a.string(t),s=a.i32(r);let u;u=null==i?[e]:i(o,e);const c=Math.min(u.length,s);for(let t=0;t<c;t++)l.u32(n+4*t,u[t]);return l.i32(r,u.length),c<u.length?-1:0},fchdir:t=>{const e=f.FD_MAP.get(t)?.path;return e?d("chdir",e):(r.error(`fchdir: invalid file descriptor: ${t}`),-1)},fcntlSetFlags:(t,e)=>{if(null==h.fcntlSetFlags||null==h.fcntlGetFlags)return(0,o.notImplemented)("fcntlSetFlags"),0;const n=f.FD_MAP.get(t)?.real;if(null==n)throw Error("invalid file descriptor");let r=h.fcntlGetFlags(n),i=r;for(const t of["O_NONBLOCK","O_APPEND"])e&s.default[t]?i|=h.constants[t]:i&=~h.constants[t];return r==i?c("fcntlSetFlags - unchanged"):(c("fcntlSetFlags ",r," to",i),h.fcntlSetFlags(n,i)),0}};return m}},2130:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.notImplemented=e.NotImplementedError=void 0;const o=(0,i(n(1227)).default)("posix");class s extends Error{constructor(t,e){super(`${t} is not implemented yet`),this.name="NotImplementedError",null!=e&&(this.ret=e)}}e.NotImplementedError=s,e.notImplemented=function(t,e=-1){throw r.warn("WARNING: calling NOT IMPLEMENTED function",t),o("WARNING: calling NOT IMPLEMENTED function",t),new s(t,e)}},5005:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=n(2130),s=i(n(2403));e.default=function({posix:t,send:e}){function n(e){let n=0;for(const r of["WNOHANG","WUNTRACED"])e&s.default[r]&&(n|=t.constants[r]);return n}return{wait:n=>{null==t.wait&&(0,o.notImplemented)("wait");const{ret:r,wstatus:i}=t.wait();return e.i32(n,i),r},waitid:()=>((0,o.notImplemented)("waitid"),-1),waitpid:(r,i,s)=>{null==t.waitpid&&(0,o.notImplemented)("waitpid");const{ret:a,wstatus:u}=t.waitpid(r,n(s));return e.i32(i,u),a},wait3:(i,s,a)=>{null==t.wait3&&(0,o.notImplemented)("wait3"),0!=a&&(r.warn("wait3 not implemented for non-NULL *rusage"),(0,o.notImplemented)("wait3"));const{ret:u,wstatus:c}=t.wait3(n(s));return e.i32(i,c),u}}}},3400:(t,e,n)=>{"use strict";var r=n(5108);Object.defineProperty(e,"__esModule",{value:!0});const i={createKey:t=>JSON.stringify(t),ignoreSingleUndefined:!1};e.default=function(t,e){e={...i,...e||{}};const n={};return function(...i){e.ignoreSingleUndefined&&1===i.length&&void 0===i[0]&&(r.warn("Ignoring single undefined arg (reuseInFlight)"),i=[]);const o=e.createKey(i);return n.hasOwnProperty(o)||(n[o]=t.apply(this,i).then((t=>(delete n[o],t)),(t=>{throw delete n[o],t}))),n[o]}}},5658:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(7545),o=r(n(8778)),s=r(n(7241)),a=r(n(2722)),u=r(n(1227)),c=n(7187),l=r(n(6459)),f=r(n(5987)),h=r(n(1772)),p=(0,u.default)("wasm:worker:browser");async function d(t,e={}){p("wasmImportBrowser"),p("processing fs=",e.fs);const n=[];for(const t of e.fs??[])if("zipurl"==t.type){let e;e=t.async?{type:"zip-async",getData:async()=>await(await fetch(t.zipurl)).arrayBuffer(),mountpoint:t.mountpoint}:{type:"zip",data:await(await fetch(t.zipurl)).arrayBuffer(),mountpoint:t.mountpoint},n.push(e)}else n.push(t);const r=(0,i.createFileSystem)(n),a=await(0,s.default)({source:t,bindings:{...o.default,fs:r,posix:l.default},options:e,importWebAssembly:_,importWebAssemblySync:function(t,e){const n=new Uint8Array(r.readFileSync(t)),i=new WebAssembly.Module(n);return new WebAssembly.Instance(i,e)},readFileSync:t=>r.readFileSync(t),maxMemoryMB:1e3});return a}async function _(t,e){const{instance:n}=await WebAssembly.instantiateStreaming(fetch(t),e);return n}e.default=d,null==self.document&&function(){p("initializing worker");class t extends c.EventEmitter{constructor(){super(),this.postMessage=self.postMessage.bind(self),self.onmessage=({data:t})=>{this.emit("message",t)}}}const e=new t;(0,a.default)({wasmImport:d,parent:e,captureOutput:!0,IOHandler:crossOriginIsolated?f.default:h.default})}()},7241:function(t,e,n){"use strict";var r=n(5108),i=n(4155),o=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,i)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),s=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&o(e,t,n);return s(e,t),e},u=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.strlen=void 0;const c=u(n(7545)),l=u(n(3400)),f=u(n(7839)),h=a(n(8069)),p=u(n(2773)),d=u(n(1227)),_=u(n(3390)),g=(0,d.default)("wasm-worker");e.strlen=function(t,e){const n=new Uint8Array(e.buffer);let r=t;for(;n[r];)r+=1;return r-t};const y={},m=(0,l.default)((async function({source:t,bindings:e,options:n={},importWebAssemblySync:o,importWebAssembly:s,readFileSync:a,maxMemoryMB:u}){if(g("doWasmImport",t),null==t)throw Error("source must be defined");if(null!=y[t])return y[t];const l=(new Date).valueOf(),d=new WebAssembly.Memory({initial:(0,h.MBtoPages)(10),...u?{maximum:(0,h.MBtoPages)(u)}:{}}),m=new WebAssembly.Table({initial:1e4,element:"anyfunc"}),S={env:{reportError:(t,e)=>{const n=d.buffer.slice(t,t+e),r=new TextDecoder;throw Error(r.decode(n))},...n.wasmEnv,memory:d,__indirect_function_table:m}};let E;null==S.env.wasmGetSignalState&&(r.warn("wasmGetSignalState not defined; using STUB"),S.env.wasmGetSignalState=()=>0),null==S.env.wasmSendString&&(S.env.wasmSendString=(t,e)=>{E.result=E.recv.string(t,e)}),null==S.env.wasmSetException&&(S.env.wasmSetException=()=>{E.resultException=!0}),null==S.env.getrandom&&(S.env.getrandom=(t,n,r)=>(e.randomFillSync(new Uint8Array(d.buffer),t,n),n)),null==S.env.main&&(S.env.main=()=>0),null==S.env._Py_emscripten&&(S.env._Py_emscripten_runtime=()=>0),(0,p.default)(m,S.env);const{fs:v}=e,I={preopens:{"/":"/"},bindings:e,args:i.argv,env:n.env,sleep:n.sleep,getStdin:n.getStdin,sendStdout:n.sendStdout,sendStderr:n.sendStderr},b=new c.default(I);S.wasi_snapshot_preview1=b.wasiImport;const w={importWebAssemblySync:o,importWebAssembly:s,readFileSync:a,stub:!1},A=new _.default({memory:d,wasi:b,wasiConfig:I,noStdio:!!n.noStdio});A.injectFunctions(S);const T=await(0,h.default)({...w,path:t,importObject:S});return null!=b&&b.start(T,d),E=new f.default(T,d,v,m),A.init(E),y[t]=E,n.time&&g.enabled&&g(`imported ${t} in ${(new Date).valueOf()-l}ms`),E.table=m,E.wasi=b,E.posixContext=A,E.instance=T,E}),{createKey:t=>t[0]});e.default=m},2722:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(1227)),o=n(8444),s=(0,i.default)("wasm:worker:init");e.default=function({wasmImport:t,parent:e,captureOutput:n,IOHandler:r}){let a;async function u(u){switch(s("worker got message ",u),u.event){case"init":const c=new r(u.options,(()=>{e.postMessage({event:"service-worker-broken"})}));u.debug&&i.default.enable(u.debug);const l={...u.options,sleep:c.sleep.bind(c),getStdin:c.getStdin.bind(c),wasmEnv:{wasmGetSignalState:c.getSignalState.bind(c)}};return(n||u.options.noStdio)&&(l.sendStdout=t=>{c.sendOutput(o.Stream.STDOUT,t)},l.sendStderr=t=>{c.sendOutput(o.Stream.STDERR,t)}),a=await t(u.name,l),{event:"init",status:"ok"};case"callWithString":if(null==a)throw Error("wasm must be initialized");return{result:a.callWithString(u.name,u.str,...u.args)};case"call":if(null==a)throw Error("wasm must be initialized");return{result:a.callWithString(u.name,"",[])};case"waitUntilFsLoaded":if(null==a?.fs)throw Error("wasm.fs must be initialized");const{waitUntilLoaded:f}=a.fs;return null==f?s("waitUntilLoaded - no wait function defined"):(await f(),s("waited and now file system")),void(s.enabled&&s("ls / = ",a.fs.readdirSync("/")));case"fetch":if(null==a?.fs)throw Error("wasm.fs must be initialized");return void await a.fetch(u.url,u.path,u.mode)}}e.on("message",(async t=>{try{const n={id:t.id,...await u(t)};e.postMessage(n)}catch(n){e.postMessage({id:t.id,error:n})}}))}},7839:function(t,e,n){"use strict";var r=n(8764).Buffer,i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=n(7187),s=i(n(5361)),a=i(n(2450)),u=n(7918),c=n(6470),l=new TextEncoder,f=8192;class h extends o.EventEmitter{constructor(t,e,n,r){super(),this.result=void 0,this.resultException=!1,this._getFunctionCache={},this.exports=t.exports,this.instance=t,this.memory=e,this.table=r,this.fs=n;const i={memory:this.memory,callFunction:(t,...e)=>{const n=this.getFunction(t);if(null==n)throw Error(`error - ${t} is not defined`);return n(...e)},callWithString:this.callWithString.bind(this)};this.send=new s.default(i),this.recv=new a.default(i)}terminate(){}exec(t=["command"]){return this.callWithString("cowasm_exec",t)}writeToStdin(t){throw Error("not implemented")}callWithString(t,e,...n){let r,i;if(r="string"==typeof t?this.getFunction(t):"object"==typeof t?this.getFunction(t.name,t.dll):t,null==r)throw Error(`no function "${"object"==typeof t?JSON.stringify(t):t}" defined in wasm module`);if(this.result=void 0,this.resultException=!1,null==e)i=r();else if("string"==typeof e){const t=l.encode(e);if(t.length<f)return i=this.callWithSmallString(r,t),this.result??i;const o=this.send.encodedString(t);try{i=r(o,...n)}finally{this.exports.c_free(o)}}else{const t=[];for(const n of e)t.push(this.send.string(n));const o=t.length,s=this.exports.c_malloc(4*(o+1)),a=new Int32Array(this.memory.buffer,s,o+1);let u=0;for(const e of t)a[u]=e,u+=1;a[o]=0;try{i=r(o,s,...n)}finally{this.exports.c_free(s);for(const e of t)this.exports.c_free(e)}}if(this.resultException)throw Error("RuntimeError");return this.result??i}getSmallStringPtr(){if(null==this.smallStringPtr&&(this.smallStringPtr=this.exports.c_malloc(f),!this.smallStringPtr))throw Error("MemoryError -- out of memory allocating small string buffer");return this.smallStringPtr}callWithSmallString(t,e,...n){const r=this.getSmallStringPtr(),i=e.length+1,o=new Int8Array(this.memory.buffer,r,i);return o.set(e),o[i-1]=0,t(r,...n)}getFunction(t,e){if(null!=e)return this.getFunctionUsingDlopen(t,e);let n=this._getFunctionCache[t];if(null!=n)return n;if(null!=this.table){const e=this.exports[`__WASM_EXPORT__${t}`];if(null!=e&&(n=this.table.get(e()),null!=n))return this._getFunctionCache[t]=n,n}return n=this.exports[t]??this.instance.env[t],this._getFunctionCache[t]=n,n}getFunctionUsingDlopen(t,e){const n=this.callWithString("dlopen",e),r=this.getFunction("dlsym");if(null==r)throw Error("dlsym must be defined");const i=this.getSmallStringPtr();this.send.string(t,{ptr:i,len:f});const o=r(n,i);return this.table?.get(o)}closeDynamicLibrary(t){const e=this.callWithString("dlopen",t);if(0!=e){const t=this.getFunction("dlclose");if(null==t)throw Error("dlclose not defined");t(e)}}getcwd(){const t=this.getFunction("getcwd");if(null==t)throw Error("C library function getcwd must be exported");return this.recv.string(t(this.getSmallStringPtr(),f))}async waitUntilFsLoaded(){if(null==this.fs)throw Error("fs must be defined");return await(this.fs.waitUntilLoaded?.())}signal(t){throw Error("not implemented")}async fetch(t,e,n){const i=await(await fetch(t)).arrayBuffer(),{fs:o}=this;if(null==o)throw Error("fs must be defined");const s=(0,c.dirname)(e);await(0,u.callback)((t=>{o.mkdir(s,{recursive:!0},t)})),await(0,u.callback)((t=>{o.writeFile(e,r.from(i),t)})),n&&await(0,u.callback)((t=>{o.chmod(e,n,t)}))}}e.default=h},5987:function(t,e,n){"use strict";var r=n(8764).Buffer,i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=(0,i(n(1227)).default)("wasm:worker:io-using-atomics");e.default=class{constructor(t){if(o("creating ioHandler"),null==t.stdinLengthBuffer)throw Error("must define stdinLengthBuffer");if(null==t.stdinBuffer)throw Error("must define stdinBuffer");if(null==t.outputLengthBuffer)throw Error("must define outputLengthBuffer");if(null==t.outputBuffer)throw Error("must define outputBuffer");if(null==t.signalBuffer)throw Error("must define signalBuffer");this.stdinBuffer=r.from(t.stdinBuffer),this.stdinLength=new Int32Array(t.stdinLengthBuffer),this.outputBuffer=r.from(t.outputBuffer),this.outputLength=new Int32Array(t.outputLengthBuffer),this.signalState=new Int32Array(t.signalBuffer),this.sleepArray=new Int32Array(new SharedArrayBuffer(4))}sleep(t){for(o("sleep starting, milliseconds=",t);t>0;){const e=Math.min(t,500);if(Atomics.wait(this.sleepArray,0,0,e),t-=e,Atomics.load(this.signalState,0))return}}getStdin(t){const e=null!=t?(new Date).valueOf():0;for(;0==this.stdinLength[0];){if(o("getStdin: waiting for some new stdin"),Atomics.wait(this.stdinLength,0,0,t??1e3),Atomics.load(this.signalState,0))return r.from("");if(null!=t&&0==this.stdinLength[0]&&(new Date).valueOf()-e>t)return r.from("")}const n=this.stdinLength[0];o("getStdin: have stdin, processing ",n," bytes");const i=r.alloc(n);return this.stdinBuffer.copy(i,0,0,n),Atomics.store(this.stdinLength,0,0),Atomics.notify(this.stdinLength,0),i}sendOutput(t,e){for(o.enabled&&o("sendOutput",t,e,{len:this.outputLength[0]},(new TextDecoder).decode(e));e.length>0;){for(;this.outputLength[0]>0&&this.outputBuffer[0]!=t||this.outputLength[0]==this.outputBuffer.length;)Atomics.wait(this.outputLength,0,this.outputLength[0]);this.outputBuffer[0]=0,0==this.outputLength[0]&&(this.outputLength[0]=1);const n=e.copy(this.outputBuffer,this.outputLength[0]);e=e.subarray(n);const r=n+this.outputLength[0];o("setting output buffer size to ",r),Atomics.store(this.outputLength,0,r),this.outputBuffer[0]=t,Atomics.notify(this.outputLength,0)}}getSignalState(){const t=Atomics.load(this.signalState,0);return t?(o("signalState",this.signalState[0]),Atomics.store(this.signalState,0,0),t):0}}},1772:function(t,e,n){"use strict";var r=n(8764).Buffer,i=n(5108),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=(0,o(n(1227)).default)("wasm:worker:io-using-atomics"),a=new TextDecoder;function u(t,e=3e3){i.warn("service worker not working, so burning CPU to avoid DOS'ing the server -- ",t);const n=(new Date).valueOf();for(;(new Date).valueOf()-n<=e;);}e.default=class{constructor(t,e){if(this.lastSignalCheck=0,s(t),this.id=t.id,this.serviceWorkerBroken=e,null==this.id)throw Error(`${this.id} must be a v4 uuid`)}request(t,e={}){const n=new XMLHttpRequest;n.open("POST",`/python-wasm-sw/${t}`,!1),n.setRequestHeader("cache-control","no-cache, no-store, max-age=0");try{n.send(JSON.stringify(e))}catch(t){this.serviceWorkerBroken(),u(t)}return 200!=n.status&&304!=n.status&&(this.serviceWorkerBroken(),u(`invalid status=${n.status}`)),n}sleep(t){s("sleep ",t);const e=(new Date).valueOf();for(;(new Date).valueOf()-e<=t;){try{this.request("sleep",{ms:Math.min(t,500)})}catch(t){return void s("sleep error",t)}if(this.getSignal(!1))return}}getStdin(t){const e=this.request("read-stdin",{id:this.id,ms:t??3e3});return 200==e.status?r.from(e.responseText??""):r.from("")}getSignal(t){const e=this.request("read-signal",{clear:t,id:this.id});return parseInt(e.responseText)??0}sendOutput(t,e){let n;try{n=a.decode(e)}catch(t){return}s("sendOutput",n),this.request("write-output",{id:this.id,stream:`${t}`,data:n})}getSignalState(){const t=(new Date).valueOf();return t-this.lastSignalCheck<500?0:(this.lastSignalCheck=t,this.getSignal(!0))}}},6459:(t,e,n)=>{"use strict";var r=n(4155);Object.defineProperty(e,"__esModule",{value:!0});const i={getpid:()=>r.pid,getppid:()=>i.getpid?.()??1};e.default=i},3390:function(t,e,n){"use strict";var r=n(4155),i=n(5108),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=o(n(417)),a=o(n(5361)),u=o(n(2450)),c=n(6486),l=(0,o(n(1227)).default)("kernel:posix-context");e.default=class{constructor({wasiConfig:t,memory:e,wasi:n,noStdio:r}){l("noStdio",r),this.memory=e,this.wasi=n,this.wasiConfig=t;const{bindings:i,sleep:o}=t,s=this.callFunction.bind(this),a=this.callWithString.bind(this);this.posixEnv=this.createPosixEnv({memory:e,wasi:n,bindings:i,callFunction:s,callWithString:a,sleep:o,noStdio:r})}createPosixEnv({bindings:t,memory:e,wasi:n,callFunction:i,callWithString:o,sleep:c,noStdio:l}){return this.context={state:{},fs:t.fs,send:new a.default({memory:e,callFunction:i}),recv:new u.default({memory:e,callFunction:i}),wasi:n,run:this.run.bind(this),process:r,os:t.os??{},posix:t.posix??{},child_process:t.child_process??{},memory:e,callFunction:i,callWithString:o,getcwd:this.getcwd.bind(this),free:this.free.bind(this),sleep:c,noStdio:l},(0,s.default)(this.context)}init(t){this.wasm=t,this.posixEnv.init()}injectFunctions({env:t,wasi_snapshot_preview1:e}){for(const e in this.posixEnv)null==t[e]&&(t[e]=this.posixEnv[e]);for(const t of["recv","send","shutdown","fcntlSetFlags","pollSocket"])null!=this.posixEnv[t]&&(e[`sock_${t}`]=this.posixEnv[t])}callWithString(t,e,...n){if(null==this.wasm)throw Error("wasm must be define");return this.wasm.callWithString(t,e,...n)}callFunction(t,...e){if(null==this.wasm)throw Error("wasm must be define");const n=this.wasm.getFunction(t);if(null==n)throw Error(`error - ${t} is not defined`);return n(...e)}getcwd(){if(null==this.wasm)throw Error("wasm must be define");if(null==this.wasm.getcwd)throw Error("error - getcwd is not defined");return this.wasm.getcwd()}free(t){this.wasm?.exports.c_free(t)}run(t){l("run",t);const{wasm:e}=this;if(null==e)throw Error("wasm must be define");if(null==t[0])throw Error("args must have length at least 1");const n={memory:new Uint8Array(this.memory.buffer).slice(),context:this.context.state,wasi:this.wasi.getState(),exit:this.wasiConfig.bindings.exit,dlopen:e.instance.getDlopenState()};this.context.state=(0,c.cloneDeep)(n.context);const r=(0,c.cloneDeep)(n.wasi);let o=-1;r.bindings.exit=t=>{o=t};try{let s;this.wasi.setState(r);try{if(s=e.getFunction("__main_argc_argv",t[0]),null==s)throw Error("__main_argc_argv is null")}catch(n){try{if(s=e.getFunction("main",t[0]),null==s)throw Error("main and __main_argc_argv are both null")}catch(e){return i.error(`${t[0]}: ${e}`),127}}try{return s(t.length,e.send.arrayOfStrings(t))}catch(e){if(-1==o)return i.error(t[0],e),139}return-1==o?139:o}finally{e.instance.setDlopenState(n.dlopen),new Uint8Array(this.memory.buffer).set(n.memory),this.context.state=n.context,this.wasi.setState(n.wasi)}}}},2450:(t,e,n)=>{"use strict";var r=n(8764).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.RecvFromWasmAbstractBase=void 0;const i=new TextDecoder;class o{view(){return new DataView(this.memory.buffer)}strlen(t){const e=new Uint8Array(this.memory.buffer);let n=t;for(;e[n];)n+=1;return n-t}pointer(t){return this.view().getUint32(t,!0)}u32(t){return this.view().getUint32(t,!0)}i32(t){return this.view().getInt32(t,!0)}pointer2(t){return new Uint32Array(this.memory.buffer)[t]}string(t,e){if(null==e&&null==(e=this.strlen(t)))throw Error("bug");const n=this.memory.buffer.slice(t,t+e);return i.decode(n)}buffer(t,e){return r.from(this.memory.buffer.slice(t,t+e))}arrayOfStrings(t){const e=[];for(;;){const n=this.pointer(t);if(!n)break;e.push(this.string(n)),t+=4}return e}arrayOfI32(t){const e=[];if(0==t)return e;for(;;){const n=this.pointer(t);if(!n)break;e.push(this.i32(n)),t+=4}return e}}e.RecvFromWasmAbstractBase=o,e.default=class extends o{constructor({memory:t,callFunction:e}){super(),this.memory=t,this.callFunction=e}}},5361:(t,e,n)=>{"use strict";var r=n(5108);Object.defineProperty(e,"__esModule",{value:!0}),e.SendToWasmAbstractBase=void 0;const i=new TextEncoder;class o{malloc(t){const e=this.callFunction("c_malloc",t);if(!e)throw Error("Out of Memory");return e}free(t){this.callFunction("c_free",t)}view(){return new DataView(this.memory.buffer)}pointer(t,e){this.view().setUint32(t,e,!0)}i32(t,e){this.view().setInt32(t,e,!0)}f64(t,e){this.view().setFloat64(t,e,!0)}f32(t,e){this.view().setFloat32(t,e,!0)}u32(t,e){this.view().setUint32(t,e,!0)}string(t,e){return this.encodedString(i.encode(t),e)}encodedString(t,e){null!=e&&(e.len||r.warn("send-to-wasm: encodedString -- suspicious dest.len = 0!"),t=t.slice(0,e.len-1));const n=t.length+1,i=e?.ptr??this.malloc(n),o=new Int8Array(this.memory.buffer,i,n);return o.set(t),o[n-1]=0,i}arrayOfStrings(t){const e=this.malloc(4*(t.length+1));for(let n=0;n<t.length;n++){const r=this.string(t[n]);this.pointer(e+4*n,r)}return this.pointer(e+4*t.length,0),e}buffer(t,e){null==e&&(e=this.malloc(t.byteLength));const n=new Uint8Array(this.memory.buffer);return t.copy(n,e),e}}e.SendToWasmAbstractBase=o,e.default=class extends o{constructor({memory:t,callFunction:e}){super(),this.memory=t,this.callFunction=e}}},2773:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=(0,r(n(1227)).default)("python-wasm-trampoline");e.default=function(t,e){e._PyImport_InitFunc_TrampolineCall=e=>{const n=t.get(e)();return i("_PyImport_InitFunc_TrampolineCall - ptr=",e," r=",n),n},e._PyCFunctionWithKeywords_TrampolineCall=(e,n,r,i)=>t.get(e)(n,r,i),e.descr_set_trampoline_call=(e,n,r,i)=>t.get(e)(n,r,i),e.descr_get_trampoline_call=(e,n,r)=>t.get(e)(n,r)}},8444:(t,e)=>{"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.Stream=void 0,(n=e.Stream||(e.Stream={}))[n.STDOUT=1]="STDOUT",n[n.STDERR=2]="STDERR"},2764:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Dirent=void 0;const r=n(7994),i=n(8988),{S_IFMT:o,S_IFDIR:s,S_IFREG:a,S_IFBLK:u,S_IFCHR:c,S_IFLNK:l,S_IFIFO:f,S_IFSOCK:h}=r.constants;class p{constructor(){this.name="",this.mode=0}static build(t,e){const n=new p,{mode:r}=t.getNode();return n.name=(0,i.strToEncoding)(t.getName(),e),n.mode=r,n}_checkModeProperty(t){return(this.mode&o)===t}isDirectory(){return this._checkModeProperty(s)}isFile(){return this._checkModeProperty(a)}isBlockDevice(){return this._checkModeProperty(u)}isCharacterDevice(){return this._checkModeProperty(c)}isSymbolicLink(){return this._checkModeProperty(l)}isFIFO(){return this._checkModeProperty(f)}isSocket(){return this._checkModeProperty(h)}}e.Dirent=p,e.default=p},5844:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Stats=void 0;const r=n(7994),i=n(2874),{S_IFMT:o,S_IFDIR:s,S_IFREG:a,S_IFBLK:u,S_IFCHR:c,S_IFLNK:l,S_IFIFO:f,S_IFSOCK:h}=r.constants;class p{static build(t,e=!1){const n=new p,{uid:r,gid:o,atime:s,mtime:a,ctime:u}=t,c=e?i.default:t=>t;n.uid=c(r),n.gid=c(o),n.rdev=c(0),n.blksize=c(4096),n.ino=c(t.ino),n.size=c(t.getSize()),n.blocks=c(1),n.atime=s,n.mtime=a,n.ctime=u,n.birthtime=u,n.atimeMs=c(s.getTime()),n.mtimeMs=c(a.getTime());const l=c(u.getTime());return n.ctimeMs=l,n.birthtimeMs=l,n.dev=c(0),n.mode=c(t.mode),n.nlink=c(t.nlink),n}_checkModeProperty(t){return(Number(this.mode)&o)===t}isDirectory(){return this._checkModeProperty(s)}isFile(){return this._checkModeProperty(a)}isBlockDevice(){return this._checkModeProperty(u)}isCharacterDevice(){return this._checkModeProperty(c)}isSymbolicLink(){return this._checkModeProperty(l)}isFIFO(){return this._checkModeProperty(f)}isSocket(){return this._checkModeProperty(h)}}e.Stats=p,e.default=p},7994:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.constants=void 0,e.constants={O_RDONLY:0,O_WRONLY:1,O_RDWR:2,S_IFMT:61440,S_IFREG:32768,S_IFDIR:16384,S_IFCHR:8192,S_IFBLK:24576,S_IFIFO:4096,S_IFLNK:40960,S_IFSOCK:49152,O_CREAT:64,O_EXCL:128,O_NOCTTY:256,O_TRUNC:512,O_APPEND:1024,O_DIRECTORY:65536,O_NOATIME:262144,O_NOFOLLOW:131072,O_SYNC:1052672,O_DIRECT:16384,O_NONBLOCK:2048,S_IRWXU:448,S_IRUSR:256,S_IWUSR:128,S_IXUSR:64,S_IRWXG:56,S_IRGRP:32,S_IWGRP:16,S_IXGRP:8,S_IRWXO:7,S_IROTH:4,S_IWOTH:2,S_IXOTH:1,F_OK:0,R_OK:4,W_OK:2,X_OK:1,UV_FS_SYMLINK_DIR:1,UV_FS_SYMLINK_JUNCTION:2,UV_FS_COPYFILE_EXCL:1,UV_FS_COPYFILE_FICLONE:2,UV_FS_COPYFILE_FICLONE_FORCE:4,COPYFILE_EXCL:1,COPYFILE_FICLONE:2,COPYFILE_FICLONE_FORCE:4}},8988:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.strToEncoding=e.assertEncoding=e.ENCODING_UTF8=void 0;const r=n(1526),i=n(2324);e.ENCODING_UTF8="utf8",e.assertEncoding=function(t){if(t&&!r.Buffer.isEncoding(t))throw new i.TypeError("ERR_INVALID_OPT_VALUE_ENCODING",t)},e.strToEncoding=function(t,n){return n&&n!==e.ENCODING_UTF8?"buffer"===n?new r.Buffer(t):new r.Buffer(t).toString(n):t}},2874:(t,e)=>{"function"==typeof BigInt?e.default=BigInt:e.default=function(){throw new Error("BigInt is not supported in this environment.")}},5370:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fs=e.createFsFromVolume=e.vol=e.Volume=void 0;const r=n(5844),i=n(2764),o=n(1299),{fsSyncMethods:s,fsAsyncMethods:a}=n(5659),u=n(7994),{F_OK:c,R_OK:l,W_OK:f,X_OK:h}=u.constants;function p(t){const e={F_OK:c,R_OK:l,W_OK:f,X_OK:h,constants:u.constants,Stats:r.default,Dirent:i.default};for(const n of s)"function"==typeof t[n]&&(e[n]=t[n].bind(t));for(const n of a)"function"==typeof t[n]&&(e[n]=t[n].bind(t));return e.StatWatcher=t.StatWatcher,e.FSWatcher=t.FSWatcher,e.WriteStream=t.WriteStream,e.ReadStream=t.ReadStream,e.promises=t.promises,e._toUnixTimestamp=o.toUnixTimestamp,e}e.Volume=o.Volume,e.vol=new o.Volume,e.createFsFromVolume=p,e.fs=p(e.vol),t.exports={...t.exports,...e.fs},t.exports.semantic=!0},1526:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.bufferFrom=e.bufferAllocUnsafe=e.Buffer=void 0;const r=n(8764);function i(t,...e){return new r.Buffer(t,...e)}Object.defineProperty(e,"Buffer",{enumerable:!0,get:function(){return r.Buffer}});const o=r.Buffer.allocUnsafe||i;e.bufferAllocUnsafe=o;const s=r.Buffer.from||i;e.bufferFrom=s},2324:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.E=e.AssertionError=e.message=e.RangeError=e.TypeError=e.Error=void 0;const r=n(9282),i=n(9539),o="undefined"==typeof Symbol?"_kCode":Symbol("code"),s={};function a(t){return class extends t{constructor(t,...e){super(l(t,e)),this.code=t,this[o]=t,this.name=`${super.name} [${this[o]}]`}}}const u="undefined"!=typeof globalThis?globalThis:n.g;class c extends u.Error{constructor(t){if("object"!=typeof t||null===t)throw new e.TypeError("ERR_INVALID_ARG_TYPE","options","object");t.message?super(t.message):super(`${i.inspect(t.actual).slice(0,128)} ${t.operator} ${i.inspect(t.expected).slice(0,128)}`),this.generatedMessage=!t.message,this.name="AssertionError [ERR_ASSERTION]",this.code="ERR_ASSERTION",this.actual=t.actual,this.expected=t.expected,this.operator=t.operator,e.Error.captureStackTrace(this,t.stackStartFunction)}}function l(t,e){r.strictEqual(typeof t,"string");const n=s[t];let o;if(r(n,`An invalid error message key was used: ${t}.`),"function"==typeof n)o=n;else{if(o=i.format,void 0===e||0===e.length)return n;e.unshift(n)}return String(o.apply(null,e))}function f(t,e){s[t]="function"==typeof e?e:String(e)}function h(t,e){if(r(t,"expected is required"),r("string"==typeof e,"thing is required"),Array.isArray(t)){const n=t.length;return r(n>0,"At least one expected value needs to be specified"),t=t.map((t=>String(t))),n>2?`one of ${e} ${t.slice(0,n-1).join(", ")}, or `+t[n-1]:2===n?`one of ${e} ${t[0]} or ${t[1]}`:`of ${e} ${t[0]}`}return`of ${e} ${String(t)}`}e.AssertionError=c,e.message=l,e.E=f,e.Error=a(u.Error),e.TypeError=a(u.TypeError),e.RangeError=a(u.RangeError),f("ERR_ARG_NOT_ITERABLE","%s must be iterable"),f("ERR_ASSERTION","%s"),f("ERR_BUFFER_OUT_OF_BOUNDS",(function(t,e){return e?"Attempt to write outside buffer bounds":`"${t}" is outside of buffer bounds`})),f("ERR_CHILD_CLOSED_BEFORE_REPLY","Child closed before reply received"),f("ERR_CONSOLE_WRITABLE_STREAM","Console expects a writable stream instance for %s"),f("ERR_CPU_USAGE","Unable to obtain cpu usage %s"),f("ERR_DNS_SET_SERVERS_FAILED",((t,e)=>`c-ares failed to set servers: "${t}" [${e}]`)),f("ERR_FALSY_VALUE_REJECTION","Promise was rejected with falsy value"),f("ERR_ENCODING_NOT_SUPPORTED",(t=>`The "${t}" encoding is not supported`)),f("ERR_ENCODING_INVALID_ENCODED_DATA",(t=>`The encoded data was not valid for encoding ${t}`)),f("ERR_HTTP_HEADERS_SENT","Cannot render headers after they are sent to the client"),f("ERR_HTTP_INVALID_STATUS_CODE","Invalid status code: %s"),f("ERR_HTTP_TRAILER_INVALID","Trailers are invalid with this transfer encoding"),f("ERR_INDEX_OUT_OF_RANGE","Index out of range"),f("ERR_INVALID_ARG_TYPE",(function(t,e,n){let i,o;if(r(t,"name is required"),e.includes("not ")?(i="must not be",e=e.split("not ")[1]):i="must be",Array.isArray(t)){o=`The ${t.map((t=>`"${t}"`)).join(", ")} arguments ${i} ${h(e,"type")}`}else if(t.includes(" argument"))o=`The ${t} ${i} ${h(e,"type")}`;else{const n=t.includes(".")?"property":"argument";o=`The "${t}" ${n} ${i} ${h(e,"type")}`}return arguments.length>=3&&(o+=". Received type "+(null!==n?typeof n:"null")),o})),f("ERR_INVALID_ARRAY_LENGTH",((t,e,n)=>(r.strictEqual(typeof n,"number"),`The array "${t}" (length ${n}) must be of length ${e}.`))),f("ERR_INVALID_BUFFER_SIZE","Buffer size must be a multiple of %s"),f("ERR_INVALID_CALLBACK","Callback must be a function"),f("ERR_INVALID_CHAR","Invalid character in %s"),f("ERR_INVALID_CURSOR_POS","Cannot set cursor row without setting its column"),f("ERR_INVALID_FD",'"fd" must be a positive integer: %s'),f("ERR_INVALID_FILE_URL_HOST",'File URL host must be "localhost" or empty on %s'),f("ERR_INVALID_FILE_URL_PATH","File URL path %s"),f("ERR_INVALID_HANDLE_TYPE","This handle type cannot be sent"),f("ERR_INVALID_IP_ADDRESS","Invalid IP address: %s"),f("ERR_INVALID_OPT_VALUE",((t,e)=>`The value "${String(e)}" is invalid for option "${t}"`)),f("ERR_INVALID_OPT_VALUE_ENCODING",(t=>`The value "${String(t)}" is invalid for option "encoding"`)),f("ERR_INVALID_REPL_EVAL_CONFIG",'Cannot specify both "breakEvalOnSigint" and "eval" for REPL'),f("ERR_INVALID_SYNC_FORK_INPUT","Asynchronous forks do not support Buffer, Uint8Array or string input: %s"),f("ERR_INVALID_THIS",'Value of "this" must be of type %s'),f("ERR_INVALID_TUPLE","%s must be an iterable %s tuple"),f("ERR_INVALID_URL","Invalid URL: %s"),f("ERR_INVALID_URL_SCHEME",(t=>`The URL must be ${h(t,"scheme")}`)),f("ERR_IPC_CHANNEL_CLOSED","Channel closed"),f("ERR_IPC_DISCONNECTED","IPC channel is already disconnected"),f("ERR_IPC_ONE_PIPE","Child process can have only one IPC pipe"),f("ERR_IPC_SYNC_FORK","IPC cannot be used with synchronous forks"),f("ERR_MISSING_ARGS",(function(...t){r(t.length>0,"At least one arg needs to be specified");let e="The ";const n=t.length;switch(t=t.map((t=>`"${t}"`)),n){case 1:e+=`${t[0]} argument`;break;case 2:e+=`${t[0]} and ${t[1]} arguments`;break;default:e+=t.slice(0,n-1).join(", "),e+=`, and ${t[n-1]} arguments`}return`${e} must be specified`})),f("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),f("ERR_NAPI_CONS_FUNCTION","Constructor must be a function"),f("ERR_NAPI_CONS_PROTOTYPE_OBJECT","Constructor.prototype must be an object"),f("ERR_NO_CRYPTO","Node.js is not compiled with OpenSSL crypto support"),f("ERR_NO_LONGER_SUPPORTED","%s is no longer supported"),f("ERR_PARSE_HISTORY_DATA","Could not parse history data in %s"),f("ERR_SOCKET_ALREADY_BOUND","Socket is already bound"),f("ERR_SOCKET_BAD_PORT","Port should be > 0 and < 65536"),f("ERR_SOCKET_BAD_TYPE","Bad socket type specified. Valid types are: udp4, udp6"),f("ERR_SOCKET_CANNOT_SEND","Unable to send data"),f("ERR_SOCKET_CLOSED","Socket is closed"),f("ERR_SOCKET_DGRAM_NOT_RUNNING","Not running"),f("ERR_STDERR_CLOSE","process.stderr cannot be closed"),f("ERR_STDOUT_CLOSE","process.stdout cannot be closed"),f("ERR_STREAM_WRAP","Stream has StringDecoder set or is in objectMode"),f("ERR_TLS_CERT_ALTNAME_INVALID","Hostname/IP does not match certificate's altnames: %s"),f("ERR_TLS_DH_PARAM_SIZE",(t=>`DH parameter size ${t} is less than 2048`)),f("ERR_TLS_HANDSHAKE_TIMEOUT","TLS handshake timeout"),f("ERR_TLS_RENEGOTIATION_FAILED","Failed to renegotiate"),f("ERR_TLS_REQUIRED_SERVER_NAME",'"servername" is required parameter for Server.addContext'),f("ERR_TLS_SESSION_ATTACK","TSL session renegotiation attack detected"),f("ERR_TRANSFORM_ALREADY_TRANSFORMING","Calling transform done when still transforming"),f("ERR_TRANSFORM_WITH_LENGTH_0","Calling transform done when writableState.length != 0"),f("ERR_UNKNOWN_ENCODING","Unknown encoding: %s"),f("ERR_UNKNOWN_SIGNAL","Unknown signal: %s"),f("ERR_UNKNOWN_STDIN_TYPE","Unknown stdin file type"),f("ERR_UNKNOWN_STREAM_TYPE","Unknown stream file type"),f("ERR_V8BREAKITERATOR","Full ICU data not installed. See https://github.com/nodejs/node/wiki/Intl")},7718:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.File=e.Link=e.Node=e.SEP=void 0;const r=n(4596),i=n(1526),o=n(7994),s=n(7187),a=n(5844),{S_IFMT:u,S_IFDIR:c,S_IFREG:l,S_IFLNK:f,O_APPEND:h}=o.constants,p=()=>r.default.getuid?.()??0,d=()=>r.default.getgid?.()??0;e.SEP="/";class _ extends s.EventEmitter{constructor(t,e=438){super(),this.uid=p(),this.gid=d(),this.atime=new Date,this.mtime=new Date,this.ctime=new Date,this.perm=438,this.mode=l,this.nlink=1,this.perm=e,this.mode|=e,this.ino=t}getString(t="utf8"){return this.getBuffer().toString(t)}setString(t){this.buf=(0,i.bufferFrom)(t,"utf8"),this.touch()}getBuffer(){return this.buf||this.setBuffer((0,i.bufferAllocUnsafe)(0)),(0,i.bufferFrom)(this.buf)}setBuffer(t){this.buf=(0,i.bufferFrom)(t),this.touch()}getSize(){return this.buf?this.buf.length:0}setModeProperty(t){this.mode=this.mode&~u|t}setIsFile(){this.setModeProperty(l)}setIsDirectory(){this.setModeProperty(c)}setIsSymlink(){this.setModeProperty(f)}isFile(){return(this.mode&u)===l}isDirectory(){return(this.mode&u)===c}isSymlink(){return(this.mode&u)===f}makeSymlink(t){this.symlink=t,this.setIsSymlink()}write(t,e=0,n=t.length,r=0){if(this.buf||(this.buf=(0,i.bufferAllocUnsafe)(0)),r+n>this.buf.length){const t=(0,i.bufferAllocUnsafe)(r+n);this.buf.copy(t,0,0,this.buf.length),this.buf=t}return t.copy(this.buf,r,e,e+n),this.touch(),n}read(t,e=0,n=t.byteLength,r=0){this.buf||(this.buf=(0,i.bufferAllocUnsafe)(0));let o=n;return o>t.byteLength&&(o=t.byteLength),o+r>this.buf.length&&(o=this.buf.length-r),this.buf.copy(t,e,r,r+o),o}truncate(t=0){if(t)if(this.buf||(this.buf=(0,i.bufferAllocUnsafe)(0)),t<=this.buf.length)this.buf=this.buf.slice(0,t);else{const e=(0,i.bufferAllocUnsafe)(0);this.buf.copy(e),e.fill(0,t)}else this.buf=(0,i.bufferAllocUnsafe)(0);this.touch()}chmod(t){this.perm=t,this.mode=-512&this.mode|t,this.touch()}chown(t,e){this.uid=t,this.gid=e,this.touch()}touch(){this.mtime=new Date,this.emit("change",this)}canRead(t=p(),e=d()){return!!(4&this.perm)||!!(e===this.gid&&32&this.perm)||!!(t===this.uid&&256&this.perm)}canWrite(t=p(),e=d()){return!!(2&this.perm)||!!(e===this.gid&&16&this.perm)||!!(t===this.uid&&128&this.perm)}del(){this.emit("delete",this)}toJSON(){return{ino:this.ino,uid:this.uid,gid:this.gid,atime:this.atime.getTime(),mtime:this.mtime.getTime(),ctime:this.ctime.getTime(),perm:this.perm,mode:this.mode,nlink:this.nlink,symlink:this.symlink,data:this.getString()}}}e.Node=_;class g extends s.EventEmitter{constructor(t,e,n){super(),this.children={},this._steps=[],this.ino=0,this.length=0,this.vol=t,this.parent=e,this.name=n,this.syncSteps()}get steps(){return this._steps}set steps(t){this._steps=t;for(const t of Object.values(this.children))t?.syncSteps()}setNode(t){this.node=t,this.ino=t.ino}getNode(){return this.node}createChild(t,e=this.vol.createNode()){const n=new g(this.vol,this,t);return n.setNode(e),e.isDirectory(),this.setChild(t,n),n}childrenChanged(){this.node.mtime=this.node.ctime=new Date}setChild(t,e=new g(this.vol,this,t)){return this.children[t]=e,this.childrenChanged(),e.parent=this,this.length++,this.emit("child:add",e,this),e}deleteChild(t){delete this.children[t.getName()],this.childrenChanged(),this.length--,this.emit("child:delete",t,this)}getChild(t){if(Object.hasOwnProperty.call(this.children,t))return this.children[t]}getPath(){return this.steps.join(e.SEP)}getName(){return this.steps[this.steps.length-1]}walk(t,e=t.length,n=0){if(n>=t.length)return this;if(n>=e)return this;const r=t[n],i=this.getChild(r);return i?i.walk(t,e,n+1):null}toJSON(){return{steps:this.steps,ino:this.ino,children:Object.keys(this.children)}}syncSteps(){this.steps=this.parent?this.parent.steps.concat([this.name]):[this.name]}}e.Link=g,e.File=class{constructor(t,e,n,r){this.position=0,this.link=t,this.node=e,this.flags=n,this.fd=r}getString(t="utf8"){return this.node.getString()}setString(t){this.node.setString(t)}getBuffer(){return this.node.getBuffer()}setBuffer(t){this.node.setBuffer(t)}getSize(){return this.node.getSize()}truncate(t){this.node.truncate(t)}seekTo(t){this.position=t}stats(){return a.default.build(this.node)}write(t,e=0,n=t.length,r){"number"!=typeof r&&(r=this.position),this.flags&h&&(r=this.getSize());const i=this.node.write(t,e,n,r);return this.position=r+i,i}read(t,e=0,n=t.byteLength,r){"number"!=typeof r&&(r=this.position);const i=this.node.read(t,e,n,r);return this.position=r+i,i}chmod(t){this.node.chmod(t)}chown(t,e){this.node.chown(t,e)}}},4596:(t,e,n)=>{"use strict";var r=n(4155),i=n(5108);function o(){const t=(()=>{if(void 0!==r)return r;try{return n(4155)}catch{return}})()||{};return t.cwd||(t.cwd=()=>"/"),t.nextTick||(t.nextTick=n(6913).default),t.emitWarning||(t.emitWarning=(t,e)=>{i.warn(`${e}${e?": ":""}${t}`)}),t.env||(t.env={}),t}Object.defineProperty(e,"__esModule",{value:!0}),e.createProcess=void 0,e.createProcess=o,e.default=o()},1390:(t,e)=>{"use strict";function n(t,e,n=(t=>t)){return(...r)=>new Promise(((i,o)=>{t[e].bind(t)(...r,((t,e)=>t?o(t):i(n(e))))}))}Object.defineProperty(e,"__esModule",{value:!0}),e.FileHandle=void 0;class r{constructor(t,e){this.vol=t,this.fd=e}appendFile(t,e){return n(this.vol,"appendFile")(this.fd,t,e)}chmod(t){return n(this.vol,"fchmod")(this.fd,t)}chown(t,e){return n(this.vol,"fchown")(this.fd,t,e)}close(){return n(this.vol,"close")(this.fd)}datasync(){return n(this.vol,"fdatasync")(this.fd)}read(t,e,r,i){return n(this.vol,"read",(e=>({bytesRead:e,buffer:t})))(this.fd,t,e,r,i)}readFile(t){return n(this.vol,"readFile")(this.fd,t)}stat(t){return n(this.vol,"fstat")(this.fd,t)}sync(){return n(this.vol,"fsync")(this.fd)}truncate(t){return n(this.vol,"ftruncate")(this.fd,t)}utimes(t,e){return n(this.vol,"futimes")(this.fd,t,e)}write(t,e,r,i){return n(this.vol,"write",(e=>({bytesWritten:e,buffer:t})))(this.fd,t,e,r,i)}writeFile(t,e){return n(this.vol,"writeFile")(this.fd,t,e)}}e.FileHandle=r,e.default=function(t){return"undefined"==typeof Promise?null:{FileHandle:r,access:(e,r)=>n(t,"access")(e,r),appendFile:(e,i,o)=>n(t,"appendFile")(e instanceof r?e.fd:e,i,o),chmod:(e,r)=>n(t,"chmod")(e,r),chown:(e,r,i)=>n(t,"chown")(e,r,i),copyFile:(e,r,i)=>n(t,"copyFile")(e,r,i),lchmod:(e,r)=>n(t,"lchmod")(e,r),lchown:(e,r,i)=>n(t,"lchown")(e,r,i),link:(e,r)=>n(t,"link")(e,r),lstat:(e,r)=>n(t,"lstat")(e,r),mkdir:(e,r)=>n(t,"mkdir")(e,r),mkdtemp:(e,r)=>n(t,"mkdtemp")(e,r),open:(e,i,o)=>n(t,"open",(e=>new r(t,e)))(e,i,o),readdir:(e,r)=>n(t,"readdir")(e,r),readFile:(e,i)=>n(t,"readFile")(e instanceof r?e.fd:e,i),readlink:(e,r)=>n(t,"readlink")(e,r),realpath:(e,r)=>n(t,"realpath")(e,r),rename:(e,r)=>n(t,"rename")(e,r),rmdir:e=>n(t,"rmdir")(e),rm:(e,r)=>n(t,"rm")(e,r),stat:(e,r)=>n(t,"stat")(e,r),symlink:(e,r,i)=>n(t,"symlink")(e,r,i),truncate:(e,r)=>n(t,"truncate")(e,r),unlink:e=>n(t,"unlink")(e),utimes:(e,r,i)=>n(t,"utimes")(e,r,i),writeFile:(e,i,o)=>n(t,"writeFile")(e instanceof r?e.fd:e,i,o)}}},6913:(t,e,n)=>{"use strict";let r;Object.defineProperty(e,"__esModule",{value:!0}),r="function"==typeof setImmediate?setImmediate.bind("undefined"!=typeof globalThis?globalThis:n.g):setTimeout.bind("undefined"!=typeof globalThis?globalThis:n.g),e.default=r},8919:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r){const i=setTimeout.apply("undefined"!=typeof globalThis?globalThis:n.g,arguments);return i&&"object"==typeof i&&"function"==typeof i.unref&&i.unref(),i}},1299:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FSWatcher=e.StatWatcher=e.Volume=e.toUnixTimestamp=e.bufferToEncoding=e.dataToBuffer=e.dataToStr=e.pathToSteps=e.filenameToSteps=e.pathToFilename=e.flagsToNumber=e.FLAGS=void 0;const r=n(6470),i=n(7718),o=n(5844),s=n(2764),a=n(1526),u=n(6913),c=n(4596),l=n(8919),f=n(2830),h=n(7994),p=n(7187),d=n(8988),_=n(2324),g=n(9539),y=n(1390),m=r.resolve,{O_RDONLY:S,O_WRONLY:E,O_RDWR:v,O_CREAT:I,O_EXCL:b,O_TRUNC:w,O_APPEND:A,O_SYNC:T,O_DIRECTORY:O,F_OK:R,COPYFILE_EXCL:N,COPYFILE_FICLONE_FORCE:F}=h.constants,{sep:W,relative:C,join:L,dirname:P}=r.posix?r.posix:r,D="win32"===c.default.platform,x="path must be a string or Buffer",k="fd must be a file descriptor",M="callback must be a function",B="ENOENT",U="EBADF",j="EINVAL",G="EEXIST",H="ENOTDIR",$="EMFILE",Y="EACCES",V="EISDIR",K="ENOTEMPTY",z="ENOSYS",q="ERR_FS_EISDIR";function X(t,e="",n="",r="",i=Error){const o=new i(function(t,e="",n="",r=""){let i="";switch(n&&(i=` '${n}'`),r&&(i+=` -> '${r}'`),t){case B:return`ENOENT: no such file or directory, ${e}${i}`;case U:return`EBADF: bad file descriptor, ${e}${i}`;case j:return`EINVAL: invalid argument, ${e}${i}`;case"EPERM":return`EPERM: operation not permitted, ${e}${i}`;case"EPROTO":return`EPROTO: protocol error, ${e}${i}`;case G:return`EEXIST: file already exists, ${e}${i}`;case H:return`ENOTDIR: not a directory, ${e}${i}`;case V:return`EISDIR: illegal operation on a directory, ${e}${i}`;case Y:return`EACCES: permission denied, ${e}${i}`;case K:return`ENOTEMPTY: directory not empty, ${e}${i}`;case $:return`EMFILE: too many open files, ${e}${i}`;case z:return`ENOSYS: function not implemented, ${e}${i}`;case q:return`[ERR_FS_EISDIR]: Path is a directory: ${e} returned EISDIR (is a directory) ${n}`;default:return`${t}: error occurred, ${e}${i}`}}(t,e,n,r));return o.code=t,o}var Z;function J(t){if("number"==typeof t)return t;if("string"==typeof t){const e=Z[t];if(void 0!==e)return e}throw new _.TypeError("ERR_INVALID_OPT_VALUE","flags",t)}function Q(t,e){let n;if(!e)return t;{const r=typeof e;switch(r){case"string":n=Object.assign({},t,{encoding:e});break;case"object":n=Object.assign({},t,e);break;default:throw TypeError((t=>`Expected options to be either an object or a string, but got ${t} instead`)(r))}}return"buffer"!==n.encoding&&(0,d.assertEncoding)(n.encoding),n}function tt(t){return e=>Q(t,e)}function et(t){if("function"!=typeof t)throw TypeError(M);return t}function nt(t){return(e,n)=>"function"==typeof e?[t(),e]:[t(e),et(n)]}!function(t){t[t.r=S]="r",t[t["r+"]=v]="r+",t[t.rs=S|T]="rs",t[t.sr=t.rs]="sr",t[t["rs+"]=v|T]="rs+",t[t["sr+"]=t["rs+"]]="sr+",t[t.w=E|I|w]="w",t[t.wx=E|I|w|b]="wx",t[t.xw=t.wx]="xw",t[t["w+"]=v|I|w]="w+",t[t["wx+"]=v|I|w|b]="wx+",t[t["xw+"]=t["wx+"]]="xw+",t[t.a=E|A|I]="a",t[t.ax=E|A|I|b]="ax",t[t.xa=t.ax]="xa",t[t["a+"]=v|A|I]="a+",t[t["ax+"]=v|A|I|b]="ax+",t[t["xa+"]=t["ax+"]]="xa+"}(Z=e.FLAGS||(e.FLAGS={})),e.flagsToNumber=J;const rt={encoding:"utf8"},it=tt(rt),ot=nt(it),st=tt({flag:"r"}),at={encoding:"utf8",mode:438,flag:Z[Z.w]},ut=tt(at),ct={encoding:"utf8",mode:438,flag:Z[Z.a]},lt=tt(ct),ft=nt(lt),ht=tt(rt),pt=nt(ht),dt={mode:511,recursive:!1},_t=t=>"number"==typeof t?Object.assign({},dt,{mode:t}):Object.assign({},dt,t),gt={recursive:!1},yt=t=>Object.assign({},gt,t),mt=nt(tt(rt)),St=tt({encoding:"utf8",withFileTypes:!1}),Et=nt(St),vt={bigint:!1},It=(t={})=>Object.assign({},vt,t),bt=(t,e)=>"function"==typeof t?[It(),t]:[It(t),et(e)];function wt(t){if("string"!=typeof t&&!a.Buffer.isBuffer(t)){try{if(!(t instanceof n(8575).URL))throw new TypeError(x)}catch(t){throw new TypeError(x)}t=function(t){if(""!==t.hostname)throw new _.TypeError("ERR_INVALID_FILE_URL_HOST",c.default.platform);const e=t.pathname;for(let t=0;t<e.length;t++)if("%"===e[t]){const n=32|e.codePointAt(t+2);if("2"===e[t+1]&&102===n)throw new _.TypeError("ERR_INVALID_FILE_URL_PATH","must not include encoded / characters")}return decodeURIComponent(e)}(t)}const e=String(t);return Nt(e),e}e.pathToFilename=wt;let At=(t,e=c.default.cwd())=>m(e,t);if(D){const t=At,{unixify:e}=n(4290);At=(n,r)=>e(t(n,r))}function Tt(t,e){const n=At(t,e).substr(1);return n?n.split(W):[]}function Ot(t,e=d.ENCODING_UTF8){return a.Buffer.isBuffer(t)?t:t instanceof Uint8Array?(0,a.bufferFrom)(t):(0,a.bufferFrom)(String(t),e)}function Rt(t,e){return e&&"buffer"!==e?t.toString(e):t}function Nt(t,e){if(-1!==(""+t).indexOf("\0")){const t=new Error("Path must be a string without null bytes");if(t.code=B,"function"!=typeof e)throw t;return c.default.nextTick(e,t),!1}return!0}function Ft(t,e){const n=function(t,e){return"number"==typeof t?t:"string"==typeof t?parseInt(t,8):e?Ft(e):void 0}(t,e);if("number"!=typeof n||isNaN(n))throw new TypeError("mode must be an int");return n}function Wt(t){return t>>>0===t}function Ct(t){if(!Wt(t))throw TypeError(k)}function Lt(t){if("string"==typeof t&&+t==t)return+t;if(t instanceof Date)return t.getTime()/1e3;if(isFinite(t))return t<0?Date.now()/1e3:t;throw new Error("Cannot parse time: "+t)}function Pt(t){if("number"!=typeof t)throw TypeError("uid must be an unsigned int")}function Dt(t){if("number"!=typeof t)throw TypeError("gid must be an unsigned int")}e.filenameToSteps=Tt,e.pathToSteps=function(t){return Tt(wt(t))},e.dataToStr=function(t,e=d.ENCODING_UTF8){return a.Buffer.isBuffer(t)?t.toString(e):t instanceof Uint8Array?(0,a.bufferFrom)(t).toString(e):String(t)},e.dataToBuffer=Ot,e.bufferToEncoding=Rt,e.toUnixTimestamp=Lt;class xt{constructor(t={}){this.ino=0,this.inodes={},this.releasedInos=[],this.fds={},this.releasedFds=[],this.maxFiles=1e4,this.openFiles=0,this.promisesApi=(0,y.default)(this),this.statWatchers={},this.props=Object.assign({Node:i.Node,Link:i.Link,File:i.File},t);const e=this.createLink();e.setNode(this.createNode(!0));const n=this;this.StatWatcher=class extends Mt{constructor(){super(n)}};const r=Ut;this.ReadStream=class extends r{constructor(...t){super(n,...t)}};const o=Gt;this.WriteStream=class extends o{constructor(...t){super(n,...t)}},this.FSWatcher=class extends Ht{constructor(){super(n)}},this.root=e}static fromJSON(t,e){const n=new xt;return n.fromJSON(t,e),n}static fromNestedJSON(t,e){const n=new xt;return n.fromNestedJSON(t,e),n}get promises(){if(null===this.promisesApi)throw new Error("Promise is not supported in this environment.");return this.promisesApi}createLink(t,e,n=!1,r){if(!t)return new this.props.Link(this,null,"");if(!e)throw new Error("createLink: name cannot be empty");return t.createChild(e,this.createNode(n,r))}deleteLink(t){const e=t.parent;return!!e&&(e.deleteChild(t),!0)}newInoNumber(){return this.releasedInos.pop()||(this.ino=(this.ino+1)%4294967295,this.ino)}newFdNumber(){const t=this.releasedFds.pop();return"number"==typeof t?t:xt.fd--}createNode(t=!1,e){const n=new this.props.Node(this.newInoNumber(),e);return t&&n.setIsDirectory(),this.inodes[n.ino]=n,n}getNode(t){return this.inodes[t]}deleteNode(t){t.del(),delete this.inodes[t.ino],this.releasedInos.push(t.ino)}genRndStr(){const t=(Math.random()+1).toString(36).substr(2,6);return 6===t.length?t:this.genRndStr()}getLink(t){return this.root.walk(t)}getLinkOrThrow(t,e){const n=Tt(t),r=this.getLink(n);if(!r)throw X(B,e,t);return r}getResolvedLink(t){let e="string"==typeof t?Tt(t):t,n=this.root,r=0;for(;r<e.length;){const t=e[r];if(n=n.getChild(t),!n)return null;const i=n.getNode();i.isSymlink()?(e=i.symlink.concat(e.slice(r+1)),n=this.root,r=0):r++}return n}getResolvedLinkOrThrow(t,e){const n=this.getResolvedLink(t);if(!n)throw X(B,e,t);return n}resolveSymlinks(t){return this.getResolvedLink(t.steps.slice(1))}getLinkAsDirOrThrow(t,e){const n=this.getLinkOrThrow(t,e);if(!n.getNode().isDirectory())throw X(H,e,t);return n}getLinkParent(t){return this.root.walk(t,t.length-1)}getLinkParentAsDirOrThrow(t,e){const n=t instanceof Array?t:Tt(t),r=this.getLinkParent(n);if(!r)throw X(B,e,W+n.join(W));if(!r.getNode().isDirectory())throw X(H,e,W+n.join(W));return r}getFileByFd(t){return this.fds[String(t)]}getFileByFdOrThrow(t,e){if(!Wt(t))throw TypeError(k);const n=this.getFileByFd(t);if(!n)throw X(U,e);return n}wrapAsync(t,e,n){et(n),(0,u.default)((()=>{let r;try{r=t.apply(this,e)}catch(t){return void n(t)}n(null,r)}))}_toJSON(t=this.root,e={},n){let r=!0,i=t.children;t.getNode().isFile()&&(i={[t.getName()]:t.parent.getChild(t.getName())},t=t.parent);for(const o in i){r=!1;const i=t.getChild(o);if(!i)throw new Error("_toJSON: unexpected undefined");const s=i.getNode();if(s.isFile()){let t=i.getPath();n&&(t=C(n,t)),e[t]=s.getString()}else s.isDirectory()&&this._toJSON(i,e,n)}let o=t.getPath();return n&&(o=C(n,o)),o&&r&&(e[o]=null),e}toJSON(t,e={},n=!1){const r=[];if(t){t instanceof Array||(t=[t]);for(const e of t){const t=wt(e),n=this.getResolvedLink(t);n&&r.push(n)}}else r.push(this.root);if(!r.length)return e;for(const t of r)this._toJSON(t,e,n?t.getPath():"");return e}fromJSON(t,e=c.default.cwd()){for(let n in t){const r=t[n];if(n=At(n,e),"string"==typeof r){const t=P(n);this.mkdirpBase(t,511),this.writeFileSync(n,r)}else this.mkdirpBase(n,511)}}fromNestedJSON(t,e){this.fromJSON(function(t){const e={};return function t(n,r){for(const i in r){const o=r[i],s=L(n,i);"string"==typeof o?e[s]=o:"object"==typeof o&&null!==o&&Object.keys(o).length>0?t(s,o):e[s]=null}}("",t),e}(t),e)}reset(){this.ino=0,this.inodes={},this.releasedInos=[],this.fds={},this.releasedFds=[],this.openFiles=0,this.root=this.createLink(),this.root.setNode(this.createNode(!0))}mountSync(t,e){this.fromJSON(e,t)}openLink(t,e,n=!0){if(this.openFiles>=this.maxFiles)throw X($,"open",t.getPath());let r=t;if(n&&(r=this.resolveSymlinks(t)),!r)throw X(B,"open",t.getPath());const i=r.getNode();if(i.isDirectory()){if((e&(S|v|E))!==S)throw X(V,"open",t.getPath())}else if(e&O)throw X(H,"open",t.getPath());if(!(e&E||i.canRead()))throw X(Y,"open",t.getPath());const o=new this.props.File(t,i,e,this.newFdNumber());return this.fds[o.fd]=o,this.openFiles++,e&w&&o.truncate(),o}openFile(t,e,n,r=!0){const i=Tt(t);let o=r?this.getResolvedLink(i):this.getLink(i);if(o&&e&b)throw X(G,"open",t);if(!o&&e&I){const t=this.getResolvedLink(i.slice(0,i.length-1));if(!t)throw X(B,"open",W+i.join(W));e&I&&"number"==typeof n&&(o=this.createLink(t,i[i.length-1],!1,n))}if(o)return this.openLink(o,e,r);throw X(B,"open",t)}openBase(t,e,n,r=!0){const i=this.openFile(t,e,n,r);if(!i)throw X(B,"open",t);return i.fd}openSync(t,e,n=438){const r=Ft(n),i=wt(t),o=J(e);return this.openBase(i,o,r)}open(t,e,n,r){let i=n,o=r;"function"==typeof n&&(i=438,o=n),i=i||438;const s=Ft(i),a=wt(t),u=J(e);this.wrapAsync(this.openBase,[a,u,s],o)}closeFile(t){this.fds[t.fd]&&(this.openFiles--,delete this.fds[t.fd],this.releasedFds.push(t.fd))}closeSync(t){Ct(t);const e=this.getFileByFdOrThrow(t,"close");this.closeFile(e)}close(t,e){Ct(t),this.wrapAsync(this.closeSync,[t],e)}openFileOrGetById(t,e,n){if("number"==typeof t){const e=this.fds[t];if(!e)throw X(B);return e}return this.openFile(wt(t),e,n)}readBase(t,e,n,r,i){return this.getFileByFdOrThrow(t).read(e,Number(n),Number(r),i)}readSync(t,e,n,r,i){return Ct(t),this.readBase(t,e,n,r,i)}read(t,e,n,r,i,o){if(et(o),0===r)return c.default.nextTick((()=>{o&&o(null,0,e)}));(0,u.default)((()=>{try{const s=this.readBase(t,e,n,r,i);o(null,s,e)}catch(t){o(t)}}))}readFileBase(t,e,n){let r;const i="number"==typeof t&&Wt(t);let o;if(i)o=t;else{const n=Tt(wt(t)),r=this.getResolvedLink(n);if(r&&r.getNode().isDirectory())throw X(V,"open",r.getPath());o=this.openSync(t,e)}try{r=Rt(this.getFileByFdOrThrow(o).getBuffer(),n)}finally{i||this.closeSync(o)}return r}readFileSync(t,e){const n=st(e),r=J(n.flag);return this.readFileBase(t,r,n.encoding)}readFile(t,e,n){const[r,i]=nt(st)(e,n),o=J(r.flag);this.wrapAsync(this.readFileBase,[t,o,r.encoding],i)}writeBase(t,e,n,r,i){return this.getFileByFdOrThrow(t,"write").write(e,n,r,i)}writeSync(t,e,n,r,i){let o,s,a,u;Ct(t);const c="string"!=typeof e;c?(s=0|(n||0),a=r,u=i):(u=n,o=r);const l=Ot(e,o);return c?void 0===a&&(a=l.length):(s=0,a=l.length),this.writeBase(t,l,s,a,u)}write(t,e,n,r,i,o){let s,a,c,l,f;Ct(t);const h=typeof e,p=typeof n,d=typeof r,_=typeof i;"string"!==h?"function"===p?f=n:"function"===d?(s=0|n,f=r):"function"===_?(s=0|n,a=r,f=i):(s=0|n,a=r,c=i,f=o):"function"===p?f=n:"function"===d?(c=n,f=r):"function"===_&&(c=n,l=r,f=i);const g=Ot(e,l);"string"!==h?void 0===a&&(a=g.length):(s=0,a=g.length);const y=et(f);(0,u.default)((()=>{try{const n=this.writeBase(t,g,s,a,c);y(null,n,"string"!==h?g:e)}catch(t){y(t)}}))}writeFileBase(t,e,n,r){const i="number"==typeof t;let o;o=i?t:this.openBase(wt(t),n,r);let s=0,a=e.length,u=n&A?void 0:0;try{for(;a>0;){const t=this.writeSync(o,e,s,a,u);s+=t,a-=t,void 0!==u&&(u+=t)}}finally{i||this.closeSync(o)}}writeFileSync(t,e,n){const r=ut(n),i=J(r.flag),o=Ft(r.mode),s=Ot(e,r.encoding);this.writeFileBase(t,s,i,o)}writeFile(t,e,n,r){let i=n,o=r;"function"==typeof n&&(i=at,o=n);const s=et(o),a=ut(i),u=J(a.flag),c=Ft(a.mode),l=Ot(e,a.encoding);this.wrapAsync(this.writeFileBase,[t,l,u,c],s)}linkBase(t,e){const n=Tt(t),r=this.getLink(n);if(!r)throw X(B,"link",t,e);const i=Tt(e),o=this.getLinkParent(i);if(!o)throw X(B,"link",t,e);const s=i[i.length-1];if(o.getChild(s))throw X(G,"link",t,e);const a=r.getNode();a.nlink++,o.createChild(s,a)}copyFileBase(t,e,n){const r=this.readFileSync(t);if(n&N&&this.existsSync(e))throw X(G,"copyFile",t,e);if(n&F)throw X(z,"copyFile",t,e);this.writeFileBase(e,r,Z.w,438)}copyFileSync(t,e,n){const r=wt(t),i=wt(e);return this.copyFileBase(r,i,0|(n||0))}copyFile(t,e,n,r){const i=wt(t),o=wt(e);let s,a;"function"==typeof n?(s=0,a=n):(s=n,a=r),et(a),this.wrapAsync(this.copyFileBase,[i,o,s],a)}linkSync(t,e){const n=wt(t),r=wt(e);this.linkBase(n,r)}link(t,e,n){const r=wt(t),i=wt(e);this.wrapAsync(this.linkBase,[r,i],n)}unlinkBase(t){const e=Tt(t),n=this.getLink(e);if(!n)throw X(B,"unlink",t);if(n.length)throw Error("Dir not empty...");this.deleteLink(n);const r=n.getNode();r.nlink--,r.nlink<=0&&this.deleteNode(r)}unlinkSync(t){const e=wt(t);this.unlinkBase(e)}unlink(t,e){const n=wt(t);this.wrapAsync(this.unlinkBase,[n],e)}symlinkBase(t,e){const n=Tt(e),r=this.getLinkParent(n);if(!r)throw X(B,"symlink",t,e);const i=n[n.length-1];if(r.getChild(i))throw X(G,"symlink",t,e);const o=r.createChild(i);return o.getNode().makeSymlink(Tt(t)),o}symlinkSync(t,e,n){const r=wt(t),i=wt(e);this.symlinkBase(r,i)}symlink(t,e,n,r){const i=et("function"==typeof n?n:r),o=wt(t),s=wt(e);this.wrapAsync(this.symlinkBase,[o,s],i)}realpathBase(t,e){const n=Tt(t),r=this.getResolvedLink(n);if(!r)throw X(B,"realpath",t);const i=r.getPath();return(0,d.strToEncoding)(i||"/",e)}realpathSync(t,e){return this.realpathBase(wt(t),ht(e).encoding)}realpath(t,e,n){const[r,i]=pt(e,n),o=wt(t);this.wrapAsync(this.realpathBase,[o,r.encoding],i)}lstatBase(t,e=!1,n=!1){const r=this.getLink(Tt(t));if(r)return o.default.build(r.getNode(),e);if(n)throw X(B,"lstat",t)}lstatSync(t,e){const{throwIfNoEntry:n=!0,bigint:r=!1}=It(e);return this.lstatBase(wt(t),r,n)}lstat(t,e,n){const[{throwIfNoEntry:r=!0,bigint:i=!1},o]=bt(e,n);this.wrapAsync(this.lstatBase,[wt(t),i,r],o)}statBase(t,e=!1,n=!0){const r=this.getResolvedLink(Tt(t));if(r)return o.default.build(r.getNode(),e);if(n)throw X(B,"stat",t)}statSync(t,e){const{bigint:n=!0,throwIfNoEntry:r=!0}=It(e);return this.statBase(wt(t),n,r)}stat(t,e,n){const[{bigint:r=!1,throwIfNoEntry:i=!0},o]=bt(e,n);this.wrapAsync(this.statBase,[wt(t),r,i],o)}fstatBase(t,e=!1){const n=this.getFileByFd(t);if(!n)throw X(U,"fstat");return o.default.build(n.node,e)}fstatSync(t,e){return this.fstatBase(t,It(e).bigint)}fstat(t,e,n){const[r,i]=bt(e,n);this.wrapAsync(this.fstatBase,[t,r.bigint],i)}renameBase(t,e){const n=this.getLink(Tt(t));if(!n)throw X(B,"rename",t,e);const r=Tt(e),i=this.getLinkParent(r);if(!i)throw X(B,"rename",t,e);const o=n.parent;o&&o.deleteChild(n);const s=r[r.length-1];n.name=s,n.steps=[...i.steps,s],i.setChild(n.getName(),n)}renameSync(t,e){const n=wt(t),r=wt(e);this.renameBase(n,r)}rename(t,e,n){const r=wt(t),i=wt(e);this.wrapAsync(this.renameBase,[r,i],n)}existsBase(t){return!!this.statBase(t)}existsSync(t){try{return this.existsBase(wt(t))}catch(t){return!1}}exists(t,e){const n=wt(t);if("function"!=typeof e)throw Error(M);(0,u.default)((()=>{try{e(this.existsBase(n))}catch(t){e(!1)}}))}accessBase(t,e){this.getLinkOrThrow(t,"access")}accessSync(t,e=R){const n=wt(t);e|=0,this.accessBase(n,e)}access(t,e,n){let r,i=R;"function"!=typeof e?(i=0|e,r=et(n)):r=e;const o=wt(t);this.wrapAsync(this.accessBase,[o,i],r)}appendFileSync(t,e,n=ct){const r=lt(n);r.flag&&!Wt(t)||(r.flag="a"),this.writeFileSync(t,e,r)}appendFile(t,e,n,r){const[i,o]=ft(n,r);i.flag&&!Wt(t)||(i.flag="a"),this.writeFile(t,e,i,o)}readdirBase(t,e){const n=Tt(t),r=this.getResolvedLink(n);if(!r)throw X(B,"readdir",t);if(!r.getNode().isDirectory())throw X(H,"scandir",t);if(e.withFileTypes){const t=[];for(const n in r.children){const i=r.getChild(n);i&&t.push(s.default.build(i,e.encoding))}return D||"buffer"===e.encoding||t.sort(((t,e)=>t.name<e.name?-1:t.name>e.name?1:0)),t}const i=[];for(const t in r.children)i.push((0,d.strToEncoding)(t,e.encoding));return D||"buffer"===e.encoding||i.sort(),i}readdirSync(t,e){const n=St(e),r=wt(t);return this.readdirBase(r,n)}readdir(t,e,n){const[r,i]=Et(e,n),o=wt(t);this.wrapAsync(this.readdirBase,[o,r],i)}readlinkBase(t,e){const n=this.getLinkOrThrow(t,"readlink").getNode();if(!n.isSymlink())throw X(j,"readlink",t);const r=W+n.symlink.join(W);return(0,d.strToEncoding)(r,e)}readlinkSync(t,e){const n=it(e),r=wt(t);return this.readlinkBase(r,n.encoding)}readlink(t,e,n){const[r,i]=ot(e,n),o=wt(t);this.wrapAsync(this.readlinkBase,[o,r.encoding],i)}fsyncBase(t){this.getFileByFdOrThrow(t,"fsync")}fsyncSync(t){this.fsyncBase(t)}fsync(t,e){this.wrapAsync(this.fsyncBase,[t],e)}fdatasyncBase(t){this.getFileByFdOrThrow(t,"fdatasync")}fdatasyncSync(t){this.fdatasyncBase(t)}fdatasync(t,e){this.wrapAsync(this.fdatasyncBase,[t],e)}ftruncateBase(t,e){this.getFileByFdOrThrow(t,"ftruncate").truncate(e)}ftruncateSync(t,e){this.ftruncateBase(t,e)}ftruncate(t,e,n){const r="number"==typeof e?e:0,i=et("number"==typeof e?n:e);this.wrapAsync(this.ftruncateBase,[t,r],i)}truncateBase(t,e){const n=this.openSync(t,"r+");try{this.ftruncateSync(n,e)}finally{this.closeSync(n)}}truncateSync(t,e){if(Wt(t))return this.ftruncateSync(t,e);this.truncateBase(t,e)}truncate(t,e,n){const r="number"==typeof e?e:0,i=et("number"==typeof e?n:e);if(Wt(t))return this.ftruncate(t,r,i);this.wrapAsync(this.truncateBase,[t,r],i)}futimesBase(t,e,n){const r=this.getFileByFdOrThrow(t,"futimes").node;r.atime=new Date(1e3*e),r.mtime=new Date(1e3*n)}futimesSync(t,e,n){this.futimesBase(t,Lt(e),Lt(n))}futimes(t,e,n,r){this.wrapAsync(this.futimesBase,[t,Lt(e),Lt(n)],r)}utimesBase(t,e,n){const r=this.openSync(t,"r");try{this.futimesBase(r,e,n)}finally{this.closeSync(r)}}utimesSync(t,e,n){this.utimesBase(wt(t),Lt(e),Lt(n))}utimes(t,e,n,r){this.wrapAsync(this.utimesBase,[wt(t),Lt(e),Lt(n)],r)}mkdirBase(t,e){const n=Tt(t);if(!n.length)throw X(G,"mkdir",t);const r=this.getLinkParentAsDirOrThrow(t,"mkdir"),i=n[n.length-1];if(r.getChild(i))throw X(G,"mkdir",t);r.createChild(i,this.createNode(!0,e))}mkdirpBase(t,e){const n=Tt(t);let r=this.root;for(let t=0;t<n.length;t++){const i=n[t];if(!r.getNode().isDirectory())throw X(H,"mkdir",r.getPath());const o=r.getChild(i);if(o){if(!o.getNode().isDirectory())throw X(H,"mkdir",o.getPath());r=o}else r=r.createChild(i,this.createNode(!0,e))}}mkdirSync(t,e){const n=_t(e),r=Ft(n.mode,511),i=wt(t);n.recursive?this.mkdirpBase(i,r):this.mkdirBase(i,r)}mkdir(t,e,n){const r=_t(e),i=et("function"==typeof e?e:n),o=Ft(r.mode,511),s=wt(t);r.recursive?this.wrapAsync(this.mkdirpBase,[s,o],i):this.wrapAsync(this.mkdirBase,[s,o],i)}mkdirpSync(t,e){this.mkdirSync(t,{mode:e,recursive:!0})}mkdirp(t,e,n){const r="function"==typeof e?void 0:e,i=et("function"==typeof e?e:n);this.mkdir(t,{mode:r,recursive:!0},i)}mkdtempBase(t,e,n=5){const r=t+this.genRndStr();try{return this.mkdirBase(r,511),(0,d.strToEncoding)(r,e)}catch(r){if(r.code===G){if(n>1)return this.mkdtempBase(t,e,n-1);throw Error("Could not create temp dir.")}throw r}}mkdtempSync(t,e){const{encoding:n}=it(e);if(!t||"string"!=typeof t)throw new TypeError("filename prefix is required");return Nt(t),this.mkdtempBase(t,n)}mkdtemp(t,e,n){const[{encoding:r},i]=ot(e,n);if(!t||"string"!=typeof t)throw new TypeError("filename prefix is required");Nt(t)&&this.wrapAsync(this.mkdtempBase,[t,r],i)}rmdirBase(t,e){const n=yt(e),r=this.getLinkAsDirOrThrow(t,"rmdir");if(r.length&&!n.recursive)throw X(K,"rmdir",t);this.deleteLink(r)}rmdirSync(t,e){this.rmdirBase(wt(t),e)}rmdir(t,e,n){const r=yt(e),i=et("function"==typeof e?e:n);this.wrapAsync(this.rmdirBase,[wt(t),r],i)}rmBase(t,e={}){const n=this.getResolvedLink(t);if(n){if(n.getNode().isDirectory()&&!e.recursive)throw X(q,"rm",t);this.deleteLink(n)}else if(!e.force)throw X(B,"stat",t)}rmSync(t,e){this.rmBase(wt(t),e)}rm(t,e,n){const[r,i]=mt(e,n);this.wrapAsync(this.rmBase,[wt(t),r],i)}fchmodBase(t,e){this.getFileByFdOrThrow(t,"fchmod").chmod(e)}fchmodSync(t,e){this.fchmodBase(t,Ft(e))}fchmod(t,e,n){this.wrapAsync(this.fchmodBase,[t,Ft(e)],n)}chmodBase(t,e){const n=this.openSync(t,"r");try{this.fchmodBase(n,e)}finally{this.closeSync(n)}}chmodSync(t,e){const n=Ft(e),r=wt(t);this.chmodBase(r,n)}chmod(t,e,n){const r=Ft(e),i=wt(t);this.wrapAsync(this.chmodBase,[i,r],n)}lchmodBase(t,e){const n=this.openBase(t,v,0,!1);try{this.fchmodBase(n,e)}finally{this.closeSync(n)}}lchmodSync(t,e){const n=Ft(e),r=wt(t);this.lchmodBase(r,n)}lchmod(t,e,n){const r=Ft(e),i=wt(t);this.wrapAsync(this.lchmodBase,[i,r],n)}fchownBase(t,e,n){this.getFileByFdOrThrow(t,"fchown").chown(e,n)}fchownSync(t,e,n){Pt(e),Dt(n),this.fchownBase(t,e,n)}fchown(t,e,n,r){Pt(e),Dt(n),this.wrapAsync(this.fchownBase,[t,e,n],r)}chownBase(t,e,n){this.getResolvedLinkOrThrow(t,"chown").getNode().chown(e,n)}chownSync(t,e,n){Pt(e),Dt(n),this.chownBase(wt(t),e,n)}chown(t,e,n,r){Pt(e),Dt(n),this.wrapAsync(this.chownBase,[wt(t),e,n],r)}lchownBase(t,e,n){this.getLinkOrThrow(t,"lchown").getNode().chown(e,n)}lchownSync(t,e,n){Pt(e),Dt(n),this.lchownBase(wt(t),e,n)}lchown(t,e,n,r){Pt(e),Dt(n),this.wrapAsync(this.lchownBase,[wt(t),e,n],r)}watchFile(t,e,n){const r=wt(t);let i=e,o=n;if("function"==typeof i&&(o=e,i=null),"function"!=typeof o)throw Error('"watchFile()" requires a listener function');let s=5007,a=!0;i&&"object"==typeof i&&("number"==typeof i.interval&&(s=i.interval),"boolean"==typeof i.persistent&&(a=i.persistent));let u=this.statWatchers[r];return u||(u=new this.StatWatcher,u.start(r,a,s),this.statWatchers[r]=u),u.addListener("change",o),u}unwatchFile(t,e){const n=wt(t),r=this.statWatchers[n];r&&("function"==typeof e?r.removeListener("change",e):r.removeAllListeners("change"),0===r.listenerCount("change")&&(r.stop(),delete this.statWatchers[n]))}createReadStream(t,e){return new this.ReadStream(t,e)}createWriteStream(t,e){return new this.WriteStream(t,e)}watch(t,e,n){const r=wt(t);let i=e;"function"==typeof e&&(n=e,i=null);let{persistent:o,recursive:s,encoding:a}=it(i);void 0===o&&(o=!0),void 0===s&&(s=!1);const u=new this.FSWatcher;return u.start(r,o,s,a),n&&u.addListener("change",n),u}}function kt(t){t.emit("stop")}e.Volume=xt,xt.fd=2147483647;class Mt extends p.EventEmitter{constructor(t){super(),this.onInterval=()=>{try{const t=this.vol.statSync(this.filename);this.hasChanged(t)&&(this.emit("change",t,this.prev),this.prev=t)}finally{this.loop()}},this.vol=t}loop(){this.timeoutRef=this.setTimeout(this.onInterval,this.interval)}hasChanged(t){return t.mtimeMs>this.prev.mtimeMs||t.nlink!==this.prev.nlink}start(t,e=!0,r=5007){this.filename=wt(t),this.setTimeout=e?setTimeout.bind("undefined"!=typeof globalThis?globalThis:n.g):l.default,this.interval=r,this.prev=this.vol.statSync(this.filename),this.loop()}stop(){clearTimeout(this.timeoutRef),c.default.nextTick(kt,this)}}var Bt;function Ut(t,e,n){if(!(this instanceof Ut))return new Ut(t,e,n);if(this._vol=t,void 0===(n=Object.assign({},Q(n,{}))).highWaterMark&&(n.highWaterMark=65536),f.Readable.call(this,n),this.path=wt(e),this.fd=void 0===n.fd?null:n.fd,this.flags=void 0===n.flags?"r":n.flags,this.mode=void 0===n.mode?438:n.mode,this.start=n.start,this.end=n.end,this.autoClose=void 0===n.autoClose||n.autoClose,this.pos=void 0,this.bytesRead=0,void 0!==this.start){if("number"!=typeof this.start)throw new TypeError('"start" option must be a Number');if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw new TypeError('"end" option must be a Number');if(this.start>this.end)throw new Error('"start" option must be <= "end" option');this.pos=this.start}"number"!=typeof this.fd&&this.open(),this.on("end",(function(){this.autoClose&&this.destroy&&this.destroy()}))}function jt(t){this.close()}function Gt(t,e,n){if(!(this instanceof Gt))return new Gt(t,e,n);if(this._vol=t,n=Object.assign({},Q(n,{})),f.Writable.call(this,n),this.path=wt(e),this.fd=void 0===n.fd?null:n.fd,this.flags=void 0===n.flags?"w":n.flags,this.mode=void 0===n.mode?438:n.mode,this.start=n.start,this.autoClose=void 0===n.autoClose||!!n.autoClose,this.pos=void 0,this.bytesWritten=0,void 0!==this.start){if("number"!=typeof this.start)throw new TypeError('"start" option must be a Number');if(this.start<0)throw new Error('"start" must be >= zero');this.pos=this.start}n.encoding&&this.setDefaultEncoding(n.encoding),"number"!=typeof this.fd&&this.open(),this.once("finish",(function(){this.autoClose&&this.close()}))}e.StatWatcher=Mt,g.inherits(Ut,f.Readable),e.ReadStream=Ut,Ut.prototype.open=function(){var t=this;this._vol.open(this.path,this.flags,this.mode,((e,n)=>{if(e)return t.autoClose&&t.destroy&&t.destroy(),void t.emit("error",e);t.fd=n,t.emit("open",n),t.read()}))},Ut.prototype._read=function(t){if("number"!=typeof this.fd)return this.once("open",(function(){this._read(t)}));if(!this.destroyed){var e;(!Bt||Bt.length-Bt.used<128)&&(e=this._readableState.highWaterMark,(Bt=(0,a.bufferAllocUnsafe)(e)).used=0);var n=Bt,r=Math.min(Bt.length-Bt.used,t),i=Bt.used;if(void 0!==this.pos&&(r=Math.min(this.end-this.pos+1,r)),r<=0)return this.push(null);var o=this;this._vol.read(this.fd,Bt,Bt.used,r,this.pos,(function(t,e){if(t)o.autoClose&&o.destroy&&o.destroy(),o.emit("error",t);else{var r=null;e>0&&(o.bytesRead+=e,r=n.slice(i,i+e)),o.push(r)}})),void 0!==this.pos&&(this.pos+=r),Bt.used+=r}},Ut.prototype._destroy=function(t,e){this.close((n=>{e(t||n)}))},Ut.prototype.close=function(t){if(t&&this.once("close",t),this.closed||"number"!=typeof this.fd)return"number"!=typeof this.fd?void this.once("open",jt):c.default.nextTick((()=>this.emit("close")));"boolean"==typeof this._readableState?.closed?this._readableState.closed=!0:this.closed=!0,this._vol.close(this.fd,(t=>{t?this.emit("error",t):this.emit("close")})),this.fd=null},g.inherits(Gt,f.Writable),e.WriteStream=Gt,Gt.prototype.open=function(){this._vol.open(this.path,this.flags,this.mode,function(t,e){if(t)return this.autoClose&&this.destroy&&this.destroy(),void this.emit("error",t);this.fd=e,this.emit("open",e)}.bind(this))},Gt.prototype._write=function(t,e,n){if(!(t instanceof a.Buffer||t instanceof Uint8Array))return this.emit("error",new Error("Invalid data"));if("number"!=typeof this.fd)return this.once("open",(function(){this._write(t,e,n)}));var r=this;this._vol.write(this.fd,t,0,t.length,this.pos,((t,e)=>{if(t)return r.autoClose&&r.destroy&&r.destroy(),n(t);r.bytesWritten+=e,n()})),void 0!==this.pos&&(this.pos+=t.length)},Gt.prototype._writev=function(t,e){if("number"!=typeof this.fd)return this.once("open",(function(){this._writev(t,e)}));const n=this,r=t.length,i=new Array(r);for(var o=0,s=0;s<r;s++){var u=t[s].chunk;i[s]=u,o+=u.length}const c=a.Buffer.concat(i);this._vol.write(this.fd,c,0,c.length,this.pos,((t,r)=>{if(t)return n.destroy&&n.destroy(),e(t);n.bytesWritten+=r,e()})),void 0!==this.pos&&(this.pos+=o)},Gt.prototype.close=function(t){if(t&&this.once("close",t),this.closed||"number"!=typeof this.fd)return"number"!=typeof this.fd?void this.once("open",jt):c.default.nextTick((()=>this.emit("close")));"boolean"==typeof this._writableState?.closed?this._writableState.closed=!0:this.closed=!0,this._vol.close(this.fd,(t=>{t?this.emit("error",t):this.emit("close")})),this.fd=null},Gt.prototype._destroy=Ut.prototype._destroy,Gt.prototype.destroySoon=Gt.prototype.end;class Ht extends p.EventEmitter{constructor(t){super(),this._filename="",this._filenameEncoded="",this._recursive=!1,this._encoding=d.ENCODING_UTF8,this._onNodeChange=()=>{this._emit("change")},this._onParentChild=t=>{t.getName()===this._getName()&&this._emit("rename")},this._emit=t=>{this.emit("change",t,this._filenameEncoded)},this._persist=()=>{this._timer=setTimeout(this._persist,1e6)},this._vol=t}_getName(){return this._steps[this._steps.length-1]}start(t,e=!0,n=!1,r=d.ENCODING_UTF8){this._filename=wt(t),this._steps=Tt(this._filename),this._filenameEncoded=(0,d.strToEncoding)(this._filename),this._recursive=n,this._encoding=r;try{this._link=this._vol.getLinkOrThrow(this._filename,"FSWatcher")}catch(t){const e=new Error(`watch ${this._filename} ${t.code}`);throw e.code=t.code,e.errno=t.code,e}this._link.getNode().on("change",this._onNodeChange),this._link.on("child:add",this._onNodeChange),this._link.on("child:delete",this._onNodeChange);const i=this._link.parent;i&&(i.setMaxListeners(i.getMaxListeners()+1),i.on("child:delete",this._onParentChild)),e&&this._persist()}close(){clearTimeout(this._timer),this._link.getNode().removeListener("change",this._onNodeChange);const t=this._link.parent;t&&t.removeListener("child:delete",this._onParentChild)}}e.FSWatcher=Ht},4539:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ufs=e.Union=void 0;var r=n(9806);e.Union=r.Union,e.ufs=new r.Union,e.default=e.ufs},9806:function(t,e,n){"use strict";var r=n(8764).Buffer,i=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},s=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__read||function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s};Object.defineProperty(e,"__esModule",{value:!0}),e.Union=void 0;var u=n(2830),c=n(5659),l=c.fsAsyncMethods,f=c.fsSyncMethods,h=new Set(["existsSync","readdir","readdirSync","createReadStream","createWriteStream","watch","watchFile","unwatchFile"]),p=new Set(["ENOTDIR","EEXIST"]),d=function(t){return new Proxy({},{get:function(e,n){var r,i,o,u=[];try{for(var c=s(t),l=c.next();!l.done;l=c.next()){var f=l.value;"function"==typeof(o=f[n])&&u.push([f,o])}}catch(t){r={error:t}}finally{try{l&&!l.done&&(i=c.return)&&i.call(c)}finally{if(r)throw r.error}}return u.length?function(){for(var t,e,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{for(var i=s(u),o=i.next();!o.done;o=i.next()){var c=a(o.value,2),l=c[0],f=c[1];f.apply(l,n)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=i.return)&&e.call(i)}finally{if(t)throw t.error}}}:o}})},_=["access","copyFile","open","opendir","rename","truncate","rmdir","mkdir","readdir","readlink","symlink","lstat","stat","link","unlink","chmod","lchmod","lchown","chown","utimes","realpath","mkdtemp","writeFile","appendFile","readFile"],g=function(){function t(){var t,e,n,a,c,g,y,m,S=this;this.fss=[],this.ReadStream=u.Readable,this.WriteStream=u.Writable,this.promises={},this.unwatchFile=function(){for(var t,e,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{for(var i=s(S.fss),o=i.next();!o.done;o=i.next()){var a=o.value;try{a.unwatchFile.apply(a,n)}catch(t){}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=i.return)&&e.call(i)}finally{if(t)throw t.error}}},this.watch=function(){for(var t,e,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var i=[];try{for(var o=s(S.fss),a=o.next();!a.done;a=o.next()){var u=a.value;try{var c=u.watch.apply(u,n);i.push(c)}catch(t){}}}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}return d(i)},this.watchFile=function(){for(var t,e,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{for(var i=s(S.fss),o=i.next();!o.done;o=i.next()){var a=o.value;try{a.watchFile.apply(a,n)}catch(t){}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=i.return)&&e.call(i)}finally{if(t)throw t.error}}},this.existsSync=function(t){var e,n;try{for(var r=s(S.fss),i=r.next();!i.done;i=r.next()){var o=i.value;try{if(o.existsSync(t))return!0}catch(t){}}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}return!1},this.readdir=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.length-1,r=t[n];"function"!=typeof r&&(r=null,n++);var i=null,o=new Map,a=!1,u=function(e,c){if(void 0===e&&(e=0),c){if(p.has(c.code))return void(r&&r(c));c.prev=i,i=c}if(e>=S.fss.length)r&&(a?r(null,S.sortedArrayFromReaddirResult(o)):r(c||Error("No file systems attached.")));else{t[n]=function(t,n){var i,l;if(t||(a=!0),0===o.size&&t)return u(e+1,t);if(n)try{for(var f=s(n),h=f.next();!h.done;h=f.next()){var p=h.value;o.set(S.pathFromReaddirEntry(p),p)}}catch(t){i={error:t}}finally{try{h&&!h.done&&(l=f.return)&&l.call(f)}finally{if(i)throw i.error}}return e===S.fss.length-1?r(null,S.sortedArrayFromReaddirResult(o)):u(e+1,c)};var l=S.fss.length-e-1,f=S.fss[l],h=f.readdir;h?h.apply(f,t):u(e+1,Error("Method not supported: readdir"))}};u()},this.readdirSync=function(){for(var t,e,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];for(var i=null,o=new Map,a=!1,u=S.fss.length-1;u>=0;u--){var c=S.fss[u];try{if(!c.readdirSync)throw Error('Method not supported: "readdirSync" with args "'.concat(n,'"'));try{for(var l=(t=void 0,s(c.readdirSync.apply(c,n))),f=l.next();!f.done;f=l.next()){var h=f.value;o.set(S.pathFromReaddirEntry(h),h)}}catch(e){t={error:e}}finally{try{f&&!f.done&&(e=l.return)&&e.call(l)}finally{if(t)throw t.error}}a=!0}catch(t){if(p.has(t.code))throw t;if(t.prev=i,i=t,!u&&!a)throw t}}return S.sortedArrayFromReaddirResult(o)},this.readdirPromise=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i(S,void 0,void 0,(function(){var e,n,r,i,a,u,c,l,f,h,p;return o(this,(function(o){switch(o.label){case 0:e=null,n=new Map,r=this.fss.length-1,o.label=1;case 1:if(!(r>=0))return[3,13];i=this.fss[r],o.label=2;case 2:if(o.trys.push([2,11,,12]),!i.promises||!i.promises.readdir)throw Error('Method not supported: "readdirSync" with args "'.concat(t,'"'));o.label=3;case 3:return o.trys.push([3,8,9,10]),h=void 0,[4,i.promises.readdir.apply(i,t)];case 4:a=s.apply(void 0,[o.sent()]),u=a.next(),o.label=5;case 5:if(u.done)return[3,7];c=u.value,n.set(this.pathFromReaddirEntry(c),c),o.label=6;case 6:return u=a.next(),[3,5];case 7:return[3,10];case 8:return l=o.sent(),h={error:l},[3,10];case 9:try{u&&!u.done&&(p=a.return)&&p.call(a)}finally{if(h)throw h.error}return[7];case 10:return[3,12];case 11:if((f=o.sent()).prev=e,e=f,0===n.size&&!r)throw f;return[3,12];case 12:return r--,[3,1];case 13:return[2,this.sortedArrayFromReaddirResult(n)]}}))}))},this.pathFromReaddirEntry=function(t){return t instanceof r||"string"==typeof t?String(t):t.name},this.sortedArrayFromReaddirResult=function(t){var e,n,r=[];try{for(var i=s(Array.from(t.keys()).sort()),o=i.next();!o.done;o=i.next()){var a=o.value,u=t.get(a);void 0!==u&&r.push(u)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}return r},this.createReadStream=function(t){var e,n,r=null;try{for(var i=s(S.fss),o=i.next();!o.done;o=i.next()){var a=o.value;try{if(!a.createReadStream)throw Error('Method not supported: "createReadStream"');if(a.existsSync&&!a.existsSync(t))throw new Error('file "'.concat(t,'" does not exists'));var u=a.createReadStream(t);if(!u)throw new Error("no valid stream");return S.ReadStream=a.ReadStream,u}catch(t){r=t}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}throw r},this.createWriteStream=function(t){var e,n,r=null;try{for(var i=s(S.fss),o=i.next();!o.done;o=i.next()){var a=o.value;try{if(!a.createWriteStream)throw Error('Method not supported: "createWriteStream"');a.statSync(t);var u=a.createWriteStream(t);if(!u)throw new Error("no valid stream");return S.WriteStream=a.WriteStream,u}catch(t){r=t}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}throw r};var E=function(t){h.has(t)||(v[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return S.syncMethod(t,e)})},v=this;try{for(var I=s(f),b=I.next();!b.done;b=I.next())E(P=b.value)}catch(e){t={error:e}}finally{try{b&&!b.done&&(e=I.return)&&e.call(I)}finally{if(t)throw t.error}}var w=function(t){h.has(t)||(A[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return S.asyncMethod(t,e)})},A=this;try{for(var T=s(l),O=T.next();!O.done;O=T.next())w(P=O.value)}catch(t){n={error:t}}finally{try{O&&!O.done&&(a=T.return)&&a.call(T)}finally{if(n)throw n.error}}var R=function(t){if("readdir"===t)return N.promises[t]=N.readdirPromise,"continue";N.promises[t]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return S.promiseMethod(t,e)}},N=this;try{for(var F=s(_),W=F.next();!W.done;W=F.next())R(P=W.value)}catch(t){c={error:t}}finally{try{W&&!W.done&&(g=F.return)&&g.call(F)}finally{if(c)throw c.error}}try{for(var C=s(h.values()),L=C.next();!L.done;L=C.next()){var P;this[P=L.value]=this[P].bind(this)}}catch(t){y={error:t}}finally{try{L&&!L.done&&(m=C.return)&&m.call(C)}finally{if(y)throw y.error}}}return t.prototype.use=function(t){return this.fss.push(t),this},t.prototype.syncMethod=function(t,e){for(var n=null,r=this.fss.length-1;r>=0;r--){var i=this.fss[r];try{if(!i[t])throw Error('Method not supported: "'.concat(t,'" with args "').concat(e,'"'));return i[t].apply(i,e)}catch(t){if(p.has(t.code))throw t;if(t.prev=n,n=t,!r)throw t}}},t.prototype.asyncMethod=function(t,e){var n=this,r=e.length-1,i=e[r];"function"!=typeof i&&(i=null,r++);var o=null,s=function(a,u){if(void 0===a&&(a=0),null!=u&&p.has(null==u?void 0:u.code))i&&i(u);else if(u&&(u.prev=o,o=u),a>=n.fss.length)i&&i(u||Error("No file systems attached."));else{e[r]=function(t){if(t)return s(a+1,t);i&&i.apply(i,arguments)};var c=n.fss.length-a-1,l=n.fss[c],f=l[t];f?f.apply(l,e):s(a+1,Error("Method not supported: "+t))}};s()},t.prototype.promiseMethod=function(t,e){return i(this,void 0,void 0,(function(){var n,r,i,s,a;return o(this,(function(o){switch(o.label){case 0:n=null,r=this.fss.length-1,o.label=1;case 1:if(!(r>=0))return[3,6];i=this.fss[r],s=i.promises,o.label=2;case 2:if(o.trys.push([2,4,,5]),!s||!s[t])throw Error('Promise of method not supported: "'.concat(String(t),'" with args "').concat(e,'"'));return[4,s[t].apply(s,e)];case 3:return[2,o.sent()];case 4:if((a=o.sent()).prev=n,n=a,!r)throw a;return[3,5];case 5:return r--,[3,1];case 6:return[2]}}))}))},t}();e.Union=g},9282:(t,e,n)=>{"use strict";var r=n(4155),i=n(5108);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}var s,a,u=n(2136).codes,c=u.ERR_AMBIGUOUS_ARGUMENT,l=u.ERR_INVALID_ARG_TYPE,f=u.ERR_INVALID_ARG_VALUE,h=u.ERR_INVALID_RETURN_VALUE,p=u.ERR_MISSING_ARGS,d=n(5961),_=n(9539).inspect,g=n(9539).types,y=g.isPromise,m=g.isRegExp,S=Object.assign?Object.assign:n(8091).assign,E=Object.is?Object.is:n(609);function v(){var t=n(9158);s=t.isDeepEqual,a=t.isDeepStrictEqual}new Map;var I=!1,b=t.exports=O,w={};function A(t){if(t.message instanceof Error)throw t.message;throw new d(t)}function T(t,e,n,r){if(!n){var i=!1;if(0===e)i=!0,r="No value argument passed to `assert.ok()`";else if(r instanceof Error)throw r;var o=new d({actual:n,expected:!0,message:r,operator:"==",stackStartFn:t});throw o.generatedMessage=i,o}}function O(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];T.apply(void 0,[O,e.length].concat(e))}b.fail=function t(e,n,o,s,a){var u,c=arguments.length;if(0===c)u="Failed";else if(1===c)o=e,e=void 0;else{if(!1===I){I=!0;var l=r.emitWarning?r.emitWarning:i.warn.bind(i);l("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")}2===c&&(s="!=")}if(o instanceof Error)throw o;var f={actual:e,expected:n,operator:void 0===s?"fail":s,stackStartFn:a||t};void 0!==o&&(f.message=o);var h=new d(f);throw u&&(h.message=u,h.generatedMessage=!0),h},b.AssertionError=d,b.ok=O,b.equal=function t(e,n,r){if(arguments.length<2)throw new p("actual","expected");e!=n&&A({actual:e,expected:n,message:r,operator:"==",stackStartFn:t})},b.notEqual=function t(e,n,r){if(arguments.length<2)throw new p("actual","expected");e==n&&A({actual:e,expected:n,message:r,operator:"!=",stackStartFn:t})},b.deepEqual=function t(e,n,r){if(arguments.length<2)throw new p("actual","expected");void 0===s&&v(),s(e,n)||A({actual:e,expected:n,message:r,operator:"deepEqual",stackStartFn:t})},b.notDeepEqual=function t(e,n,r){if(arguments.length<2)throw new p("actual","expected");void 0===s&&v(),s(e,n)&&A({actual:e,expected:n,message:r,operator:"notDeepEqual",stackStartFn:t})},b.deepStrictEqual=function t(e,n,r){if(arguments.length<2)throw new p("actual","expected");void 0===s&&v(),a(e,n)||A({actual:e,expected:n,message:r,operator:"deepStrictEqual",stackStartFn:t})},b.notDeepStrictEqual=function t(e,n,r){if(arguments.length<2)throw new p("actual","expected");void 0===s&&v(),a(e,n)&&A({actual:e,expected:n,message:r,operator:"notDeepStrictEqual",stackStartFn:t})},b.strictEqual=function t(e,n,r){if(arguments.length<2)throw new p("actual","expected");E(e,n)||A({actual:e,expected:n,message:r,operator:"strictEqual",stackStartFn:t})},b.notStrictEqual=function t(e,n,r){if(arguments.length<2)throw new p("actual","expected");E(e,n)&&A({actual:e,expected:n,message:r,operator:"notStrictEqual",stackStartFn:t})};var R=function t(e,n,r){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),n.forEach((function(t){t in e&&(void 0!==r&&"string"==typeof r[t]&&m(e[t])&&e[t].test(r[t])?i[t]=r[t]:i[t]=e[t])}))};function N(t,e,n,r,i,o){if(!(n in t)||!a(t[n],e[n])){if(!r){var s=new R(t,i),u=new R(e,i,t),c=new d({actual:s,expected:u,operator:"deepStrictEqual",stackStartFn:o});throw c.actual=t,c.expected=e,c.operator=o.name,c}A({actual:t,expected:e,message:r,operator:o.name,stackStartFn:o})}}function F(t,e,n,r){if("function"!=typeof e){if(m(e))return e.test(t);if(2===arguments.length)throw new l("expected",["Function","RegExp"],e);if("object"!==o(t)||null===t){var i=new d({actual:t,expected:e,message:n,operator:"deepStrictEqual",stackStartFn:r});throw i.operator=r.name,i}var a=Object.keys(e);if(e instanceof Error)a.push("name","message");else if(0===a.length)throw new f("error",e,"may not be an empty object");return void 0===s&&v(),a.forEach((function(i){"string"==typeof t[i]&&m(e[i])&&e[i].test(t[i])||N(t,e,i,n,a,r)})),!0}return void 0!==e.prototype&&t instanceof e||!Error.isPrototypeOf(e)&&!0===e.call({},t)}function W(t){if("function"!=typeof t)throw new l("fn","Function",t);try{t()}catch(t){return t}return w}function C(t){return y(t)||null!==t&&"object"===o(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function L(t){return Promise.resolve().then((function(){var e;if("function"==typeof t){if(!C(e=t()))throw new h("instance of Promise","promiseFn",e)}else{if(!C(t))throw new l("promiseFn",["Function","Promise"],t);e=t}return Promise.resolve().then((function(){return e})).then((function(){return w})).catch((function(t){return t}))}))}function P(t,e,n,r){if("string"==typeof n){if(4===arguments.length)throw new l("error",["Object","Error","Function","RegExp"],n);if("object"===o(e)&&null!==e){if(e.message===n)throw new c("error/message",'The error message "'.concat(e.message,'" is identical to the message.'))}else if(e===n)throw new c("error/message",'The error "'.concat(e,'" is identical to the message.'));r=n,n=void 0}else if(null!=n&&"object"!==o(n)&&"function"!=typeof n)throw new l("error",["Object","Error","Function","RegExp"],n);if(e===w){var i="";n&&n.name&&(i+=" (".concat(n.name,")")),i+=r?": ".concat(r):".";var s="rejects"===t.name?"rejection":"exception";A({actual:void 0,expected:n,operator:t.name,message:"Missing expected ".concat(s).concat(i),stackStartFn:t})}if(n&&!F(e,n,r,t))throw e}function D(t,e,n,r){if(e!==w){if("string"==typeof n&&(r=n,n=void 0),!n||F(e,n)){var i=r?": ".concat(r):".",o="doesNotReject"===t.name?"rejection":"exception";A({actual:e,expected:n,operator:t.name,message:"Got unwanted ".concat(o).concat(i,"\n")+'Actual message: "'.concat(e&&e.message,'"'),stackStartFn:t})}throw e}}function x(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];T.apply(void 0,[x,e.length].concat(e))}b.throws=function t(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];P.apply(void 0,[t,W(e)].concat(r))},b.rejects=function t(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return L(e).then((function(e){return P.apply(void 0,[t,e].concat(r))}))},b.doesNotThrow=function t(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];D.apply(void 0,[t,W(e)].concat(r))},b.doesNotReject=function t(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return L(e).then((function(e){return D.apply(void 0,[t,e].concat(r))}))},b.ifError=function t(e){if(null!=e){var n="ifError got unwanted exception: ";"object"===o(e)&&"string"==typeof e.message?0===e.message.length&&e.constructor?n+=e.constructor.name:n+=e.message:n+=_(e);var r=new d({actual:e,expected:null,operator:"ifError",message:n,stackStartFn:t}),i=e.stack;if("string"==typeof i){var s=i.split("\n");s.shift();for(var a=r.stack.split("\n"),u=0;u<s.length;u++){var c=a.indexOf(s[u]);if(-1!==c){a=a.slice(0,c);break}}r.stack="".concat(a.join("\n"),"\n").concat(s.join("\n"))}throw r}},b.strict=S(x,b,{equal:b.strictEqual,deepEqual:b.deepStrictEqual,notEqual:b.notStrictEqual,notDeepEqual:b.notDeepStrictEqual}),b.strict.strict=b.strict},5961:(t,e,n)=>{"use strict";var r=n(4155);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e){return!e||"object"!==p(e)&&"function"!=typeof e?a(t):e}function a(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function u(t){var e="function"==typeof Map?new Map:void 0;return u=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return l(t,arguments,h(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),f(r,t)},u(t)}function c(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function l(t,e,n){return l=c()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var i=new(Function.bind.apply(t,r));return n&&f(i,n.prototype),i},l.apply(null,arguments)}function f(t,e){return f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},f(t,e)}function h(t){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},h(t)}function p(t){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},p(t)}var d=n(9539).inspect,_=n(2136).codes.ERR_INVALID_ARG_TYPE;function g(t,e,n){return(void 0===n||n>t.length)&&(n=t.length),t.substring(n-e.length,n)===e}var y="",m="",S="",E="",v={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"};function I(t){var e=Object.keys(t),n=Object.create(Object.getPrototypeOf(t));return e.forEach((function(e){n[e]=t[e]})),Object.defineProperty(n,"message",{value:t.message}),n}function b(t){return d(t,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}var w=function(t){function e(t){var n;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),"object"!==p(t)||null===t)throw new _("options","Object",t);var i=t.message,o=t.operator,u=t.stackStartFn,c=t.actual,l=t.expected,f=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=i)n=s(this,h(e).call(this,String(i)));else if(r.stderr&&r.stderr.isTTY&&(r.stderr&&r.stderr.getColorDepth&&1!==r.stderr.getColorDepth()?(y="[34m",m="[32m",E="[39m",S="[31m"):(y="",m="",E="",S="")),"object"===p(c)&&null!==c&&"object"===p(l)&&null!==l&&"stack"in c&&c instanceof Error&&"stack"in l&&l instanceof Error&&(c=I(c),l=I(l)),"deepStrictEqual"===o||"strictEqual"===o)n=s(this,h(e).call(this,function(t,e,n){var i="",o="",s=0,a="",u=!1,c=b(t),l=c.split("\n"),f=b(e).split("\n"),h=0,d="";if("strictEqual"===n&&"object"===p(t)&&"object"===p(e)&&null!==t&&null!==e&&(n="strictEqualObject"),1===l.length&&1===f.length&&l[0]!==f[0]){var _=l[0].length+f[0].length;if(_<=10){if(!("object"===p(t)&&null!==t||"object"===p(e)&&null!==e||0===t&&0===e))return"".concat(v[n],"\n\n")+"".concat(l[0]," !== ").concat(f[0],"\n")}else if("strictEqualObject"!==n&&_<(r.stderr&&r.stderr.isTTY?r.stderr.columns:80)){for(;l[0][h]===f[0][h];)h++;h>2&&(d="\n  ".concat(function(t,e){if(e=Math.floor(e),0==t.length||0==e)return"";var n=t.length*e;for(e=Math.floor(Math.log(e)/Math.log(2));e;)t+=t,e--;return t+t.substring(0,n-t.length)}(" ",h),"^"),h=0)}}for(var I=l[l.length-1],w=f[f.length-1];I===w&&(h++<2?a="\n  ".concat(I).concat(a):i=I,l.pop(),f.pop(),0!==l.length&&0!==f.length);)I=l[l.length-1],w=f[f.length-1];var A=Math.max(l.length,f.length);if(0===A){var T=c.split("\n");if(T.length>30)for(T[26]="".concat(y,"...").concat(E);T.length>27;)T.pop();return"".concat(v.notIdentical,"\n\n").concat(T.join("\n"),"\n")}h>3&&(a="\n".concat(y,"...").concat(E).concat(a),u=!0),""!==i&&(a="\n  ".concat(i).concat(a),i="");var O=0,R=v[n]+"\n".concat(m,"+ actual").concat(E," ").concat(S,"- expected").concat(E),N=" ".concat(y,"...").concat(E," Lines skipped");for(h=0;h<A;h++){var F=h-s;if(l.length<h+1)F>1&&h>2&&(F>4?(o+="\n".concat(y,"...").concat(E),u=!0):F>3&&(o+="\n  ".concat(f[h-2]),O++),o+="\n  ".concat(f[h-1]),O++),s=h,i+="\n".concat(S,"-").concat(E," ").concat(f[h]),O++;else if(f.length<h+1)F>1&&h>2&&(F>4?(o+="\n".concat(y,"...").concat(E),u=!0):F>3&&(o+="\n  ".concat(l[h-2]),O++),o+="\n  ".concat(l[h-1]),O++),s=h,o+="\n".concat(m,"+").concat(E," ").concat(l[h]),O++;else{var W=f[h],C=l[h],L=C!==W&&(!g(C,",")||C.slice(0,-1)!==W);L&&g(W,",")&&W.slice(0,-1)===C&&(L=!1,C+=","),L?(F>1&&h>2&&(F>4?(o+="\n".concat(y,"...").concat(E),u=!0):F>3&&(o+="\n  ".concat(l[h-2]),O++),o+="\n  ".concat(l[h-1]),O++),s=h,o+="\n".concat(m,"+").concat(E," ").concat(C),i+="\n".concat(S,"-").concat(E," ").concat(W),O+=2):(o+=i,i="",1!==F&&0!==h||(o+="\n  ".concat(C),O++))}if(O>20&&h<A-2)return"".concat(R).concat(N,"\n").concat(o,"\n").concat(y,"...").concat(E).concat(i,"\n")+"".concat(y,"...").concat(E)}return"".concat(R).concat(u?N:"","\n").concat(o).concat(i).concat(a).concat(d)}(c,l,o)));else if("notDeepStrictEqual"===o||"notStrictEqual"===o){var d=v[o],w=b(c).split("\n");if("notStrictEqual"===o&&"object"===p(c)&&null!==c&&(d=v.notStrictEqualObject),w.length>30)for(w[26]="".concat(y,"...").concat(E);w.length>27;)w.pop();n=1===w.length?s(this,h(e).call(this,"".concat(d," ").concat(w[0]))):s(this,h(e).call(this,"".concat(d,"\n\n").concat(w.join("\n"),"\n")))}else{var A=b(c),T="",O=v[o];"notDeepEqual"===o||"notEqual"===o?(A="".concat(v[o],"\n\n").concat(A)).length>1024&&(A="".concat(A.slice(0,1021),"...")):(T="".concat(b(l)),A.length>512&&(A="".concat(A.slice(0,509),"...")),T.length>512&&(T="".concat(T.slice(0,509),"...")),"deepEqual"===o||"equal"===o?A="".concat(O,"\n\n").concat(A,"\n\nshould equal\n\n"):T=" ".concat(o," ").concat(T)),n=s(this,h(e).call(this,"".concat(A).concat(T)))}return Error.stackTraceLimit=f,n.generatedMessage=!i,Object.defineProperty(a(n),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),n.code="ERR_ASSERTION",n.actual=c,n.expected=l,n.operator=o,Error.captureStackTrace&&Error.captureStackTrace(a(n),u),n.stack,n.name="AssertionError",s(n)}var n,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&f(t,e)}(e,t),n=e,u=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:d.custom,value:function(t,e){return d(this,function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){i(t,e,n[e])}))}return t}({},e,{customInspect:!1,depth:0}))}}],u&&o(n.prototype,u),e}(u(Error));t.exports=w},2136:(t,e,n)=>{"use strict";function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function i(t){return i=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},i(t)}function o(t,e){return o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},o(t,e)}var s,a,u={};function c(t,e,n){n||(n=Error);var s=function(n){function s(n,o,a){var u;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,s),u=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}(this,i(s).call(this,function(t,n,r){return"string"==typeof e?e:e(t,n,r)}(n,o,a))),u.code=t,u}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&o(t,e)}(s,n),s}(n);u[t]=s}function l(t,e){if(Array.isArray(t)){var n=t.length;return t=t.map((function(t){return String(t)})),n>2?"one of ".concat(e," ").concat(t.slice(0,n-1).join(", "),", or ")+t[n-1]:2===n?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}c("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),c("ERR_INVALID_ARG_TYPE",(function(t,e,i){var o,a,u,c,f;if(void 0===s&&(s=n(9282)),s("string"==typeof t,"'name' must be a string"),"string"==typeof e&&(a="not ",e.substr(0,a.length)===a)?(o="must not be",e=e.replace(/^not /,"")):o="must be",function(t,e,n){return(void 0===n||n>t.length)&&(n=t.length),t.substring(n-e.length,n)===e}(t," argument"))u="The ".concat(t," ").concat(o," ").concat(l(e,"type"));else{var h=("number"!=typeof f&&(f=0),f+".".length>(c=t).length||-1===c.indexOf(".",f)?"argument":"property");u='The "'.concat(t,'" ').concat(h," ").concat(o," ").concat(l(e,"type"))}return u+". Received type ".concat(r(i))}),TypeError),c("ERR_INVALID_ARG_VALUE",(function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===a&&(a=n(9539));var i=a.inspect(e);return i.length>128&&(i="".concat(i.slice(0,128),"...")),"The argument '".concat(t,"' ").concat(r,". Received ").concat(i)}),TypeError,RangeError),c("ERR_INVALID_RETURN_VALUE",(function(t,e,n){var i;return i=n&&n.constructor&&n.constructor.name?"instance of ".concat(n.constructor.name):"type ".concat(r(n)),"Expected ".concat(t,' to be returned from the "').concat(e,'"')+" function but got ".concat(i,".")}),TypeError),c("ERR_MISSING_ARGS",(function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];void 0===s&&(s=n(9282)),s(e.length>0,"At least one arg needs to be specified");var i="The ",o=e.length;switch(e=e.map((function(t){return'"'.concat(t,'"')})),o){case 1:i+="".concat(e[0]," argument");break;case 2:i+="".concat(e[0]," and ").concat(e[1]," arguments");break;default:i+=e.slice(0,o-1).join(", "),i+=", and ".concat(e[o-1]," arguments")}return"".concat(i," must be specified")}),TypeError),t.exports.codes=u},9158:(t,e,n)=>{"use strict";function r(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}var o=void 0!==/a/g.flags,s=function(t){var e=[];return t.forEach((function(t){return e.push(t)})),e},a=function(t){var e=[];return t.forEach((function(t,n){return e.push([n,t])})),e},u=Object.is?Object.is:n(609),c=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},l=Number.isNaN?Number.isNaN:n(360);function f(t){return t.call.bind(t)}var h=f(Object.prototype.hasOwnProperty),p=f(Object.prototype.propertyIsEnumerable),d=f(Object.prototype.toString),_=n(9539).types,g=_.isAnyArrayBuffer,y=_.isArrayBufferView,m=_.isDate,S=_.isMap,E=_.isRegExp,v=_.isSet,I=_.isNativeError,b=_.isBoxedPrimitive,w=_.isNumberObject,A=_.isStringObject,T=_.isBooleanObject,O=_.isBigIntObject,R=_.isSymbolObject,N=_.isFloat32Array,F=_.isFloat64Array;function W(t){if(0===t.length||t.length>10)return!0;for(var e=0;e<t.length;e++){var n=t.charCodeAt(e);if(n<48||n>57)return!0}return 10===t.length&&t>=Math.pow(2,32)}function C(t){return Object.keys(t).filter(W).concat(c(t).filter(Object.prototype.propertyIsEnumerable.bind(t)))}function L(t,e){if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0}function P(t,e,n,r){if(t===e)return 0!==t||!n||u(t,e);if(n){if("object"!==i(t))return"number"==typeof t&&l(t)&&l(e);if("object"!==i(e)||null===t||null===e)return!1;if(Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1}else{if(null===t||"object"!==i(t))return(null===e||"object"!==i(e))&&t==e;if(null===e||"object"!==i(e))return!1}var s,a,c,f,h=d(t);if(h!==d(e))return!1;if(Array.isArray(t)){if(t.length!==e.length)return!1;var p=C(t),_=C(e);return p.length===_.length&&x(t,e,n,r,1,p)}if("[object Object]"===h&&(!S(t)&&S(e)||!v(t)&&v(e)))return!1;if(m(t)){if(!m(e)||Date.prototype.getTime.call(t)!==Date.prototype.getTime.call(e))return!1}else if(E(t)){if(!E(e)||(c=t,f=e,!(o?c.source===f.source&&c.flags===f.flags:RegExp.prototype.toString.call(c)===RegExp.prototype.toString.call(f))))return!1}else if(I(t)||t instanceof Error){if(t.message!==e.message||t.name!==e.name)return!1}else{if(y(t)){if(n||!N(t)&&!F(t)){if(!function(t,e){return t.byteLength===e.byteLength&&0===L(new Uint8Array(t.buffer,t.byteOffset,t.byteLength),new Uint8Array(e.buffer,e.byteOffset,e.byteLength))}(t,e))return!1}else if(!function(t,e){if(t.byteLength!==e.byteLength)return!1;for(var n=0;n<t.byteLength;n++)if(t[n]!==e[n])return!1;return!0}(t,e))return!1;var W=C(t),P=C(e);return W.length===P.length&&x(t,e,n,r,0,W)}if(v(t))return!(!v(e)||t.size!==e.size)&&x(t,e,n,r,2);if(S(t))return!(!S(e)||t.size!==e.size)&&x(t,e,n,r,3);if(g(t)){if(a=e,(s=t).byteLength!==a.byteLength||0!==L(new Uint8Array(s),new Uint8Array(a)))return!1}else if(b(t)&&!function(t,e){return w(t)?w(e)&&u(Number.prototype.valueOf.call(t),Number.prototype.valueOf.call(e)):A(t)?A(e)&&String.prototype.valueOf.call(t)===String.prototype.valueOf.call(e):T(t)?T(e)&&Boolean.prototype.valueOf.call(t)===Boolean.prototype.valueOf.call(e):O(t)?O(e)&&BigInt.prototype.valueOf.call(t)===BigInt.prototype.valueOf.call(e):R(e)&&Symbol.prototype.valueOf.call(t)===Symbol.prototype.valueOf.call(e)}(t,e))return!1}return x(t,e,n,r,0)}function D(t,e){return e.filter((function(e){return p(t,e)}))}function x(t,e,n,r,i,o){if(5===arguments.length){o=Object.keys(t);var s=Object.keys(e);if(o.length!==s.length)return!1}for(var a=0;a<o.length;a++)if(!h(e,o[a]))return!1;if(n&&5===arguments.length){var u=c(t);if(0!==u.length){var l=0;for(a=0;a<u.length;a++){var f=u[a];if(p(t,f)){if(!p(e,f))return!1;o.push(f),l++}else if(p(e,f))return!1}var d=c(e);if(u.length!==d.length&&D(e,d).length!==l)return!1}else{var _=c(e);if(0!==_.length&&0!==D(e,_).length)return!1}}if(0===o.length&&(0===i||1===i&&0===t.length||0===t.size))return!0;if(void 0===r)r={val1:new Map,val2:new Map,position:0};else{var g=r.val1.get(t);if(void 0!==g){var y=r.val2.get(e);if(void 0!==y)return g===y}r.position++}r.val1.set(t,r.position),r.val2.set(e,r.position);var m=G(t,e,n,o,r,i);return r.val1.delete(t),r.val2.delete(e),m}function k(t,e,n,r){for(var i=s(t),o=0;o<i.length;o++){var a=i[o];if(P(e,a,n,r))return t.delete(a),!0}return!1}function M(t){switch(i(t)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":t=+t;case"number":if(l(t))return!1}return!0}function B(t,e,n){var r=M(n);return null!=r?r:e.has(r)&&!t.has(r)}function U(t,e,n,r,i){var o=M(n);if(null!=o)return o;var s=e.get(o);return!(void 0===s&&!e.has(o)||!P(r,s,!1,i))&&!t.has(o)&&P(r,s,!1,i)}function j(t,e,n,r,i,o){for(var a=s(t),u=0;u<a.length;u++){var c=a[u];if(P(n,c,i,o)&&P(r,e.get(c),i,o))return t.delete(c),!0}return!1}function G(t,e,n,o,u,c){var l=0;if(2===c){if(!function(t,e,n,r){for(var o=null,a=s(t),u=0;u<a.length;u++){var c=a[u];if("object"===i(c)&&null!==c)null===o&&(o=new Set),o.add(c);else if(!e.has(c)){if(n)return!1;if(!B(t,e,c))return!1;null===o&&(o=new Set),o.add(c)}}if(null!==o){for(var l=s(e),f=0;f<l.length;f++){var h=l[f];if("object"===i(h)&&null!==h){if(!k(o,h,n,r))return!1}else if(!n&&!t.has(h)&&!k(o,h,n,r))return!1}return 0===o.size}return!0}(t,e,n,u))return!1}else if(3===c){if(!function(t,e,n,o){for(var s=null,u=a(t),c=0;c<u.length;c++){var l=r(u[c],2),f=l[0],h=l[1];if("object"===i(f)&&null!==f)null===s&&(s=new Set),s.add(f);else{var p=e.get(f);if(void 0===p&&!e.has(f)||!P(h,p,n,o)){if(n)return!1;if(!U(t,e,f,h,o))return!1;null===s&&(s=new Set),s.add(f)}}}if(null!==s){for(var d=a(e),_=0;_<d.length;_++){var g=r(d[_],2),y=(f=g[0],g[1]);if("object"===i(f)&&null!==f){if(!j(s,t,f,y,n,o))return!1}else if(!(n||t.has(f)&&P(t.get(f),y,!1,o)||j(s,t,f,y,!1,o)))return!1}return 0===s.size}return!0}(t,e,n,u))return!1}else if(1===c)for(;l<t.length;l++){if(!h(t,l)){if(h(e,l))return!1;for(var f=Object.keys(t);l<f.length;l++){var p=f[l];if(!h(e,p)||!P(t[p],e[p],n,u))return!1}return f.length===Object.keys(e).length}if(!h(e,l)||!P(t[l],e[l],n,u))return!1}for(l=0;l<o.length;l++){var d=o[l];if(!P(t[d],e[d],n,u))return!1}return!0}t.exports={isDeepEqual:function(t,e){return P(t,e,!1)},isDeepStrictEqual:function(t,e){return P(t,e,!0)}}},7918:(t,e,n)=>{"use strict";var r=n(4155);function i(t){this.name="ErrorList",this.message=t,this.stack=(new Error).stack,this.errors=[],Object.defineProperty(this,"length",{get:function(){return this.errors.length}})}async function o(t){return new Promise((e=>setTimeout(e,t)))}async function s(t,...e){return new Promise(((n,r)=>{t(...e,((t,e)=>{if(t)return r(t);n(e)}))}))}function a(t){return async(...e)=>s(t,...e)}function u(t,e){throw t}function c(t,e){}async function l(t,e=1/0,n=0){return new Promise(((r,o)=>{const s=Math.min(t.length,e),a=Math.min(t.length-s,n),u=[],c=new i("too many failures");function l(t){c.length>a||(u.push(t),u.length===s&&r(u))}function f(t){c.length>a||u.length>=s||(c.add(t),c.length>a&&o(c))}t.forEach((t=>t.then(l).catch(f)))}))}async function f(t,e=0){return new Promise(((n,r)=>{const o=[],s=new i("too many failures"),a=()=>u+s.length===t.length;let u=0;t.forEach(((t,i)=>{t.then((function(t){s.length>e||(o[i]=t,u++,a()&&n(o))})).catch((function(t){s.length>e||(o[i]=void 0,s.add(t),s.length>e?r(s):a()&&n(o))}))}))}))}Object.defineProperty(e,"__esModule",{value:!0}),i.prototype=Object.create(Error.prototype),i.prototype.constructor=i,i.prototype.add=function(t){this.errors.push(t)},i.prototype.get=function(t){return this.errors[t]},i.prototype[Symbol.iterator]=function*(){let t=0;for(;t<this.errors.length;)yield this.errors[t],t++},e.delay=o,e.time=async function(t){const e=Math.max(t.getTime()-Date.now(),0);return await o(e)},e.limit=async function(t,e){return new Promise(((n,r)=>{const i="number"==typeof e?o(e):e;let s=!1;function a(){return!!s||(s=!0,!1)}t.then((t=>{a()||n(t)})).catch((t=>{a()||r(t)})),i.then((t=>{a()||r(new Error("limit exceeded"))})).catch((t=>{a()||r(t)}))}))},e.event=async function(t,e){return new Promise(((n,r)=>{t.once(e,((...t)=>{n([...t])}))}))},e.callback=s,e.single=async function(t,e=0){return(await l(t,1,e))[0]},e.set=l,e.list=f,e.object=async function(t,e=0){const n=Object.keys(t).filter((e=>"function"==typeof t[e].then)),r=n.map((e=>t[e])),i=await f(r,e),o=Object.assign({},t);return i.forEach(((t,e)=>{const r=n[e];o[r]=t})),o},e.map=async function(t,e,n){return new Promise(((r,i)=>{const o=[];let s=0,a=0;function u(){if(a===t.length&&0===s)return r(o);for(;s<e&&a<t.length;)n(t[a]).then(c(a)).catch(l),a++,s++}function c(t){return e=>{s--,o[t]=e,u()}}function l(t){s--,a=1/0,i(t)}u()}))},e.failure=async function(t){return Promise.resolve().then((()=>t)).then((()=>{})).catch((t=>t))},e.success=async function(t){return Promise.resolve().then((()=>t)).catch((()=>{}))},e.result=async function(t){return Promise.resolve().then((()=>t)).catch((t=>t))},e.awaited=a,e.awaitable=a,e.throw=function(){r.removeListener("unhandledRejection",u),r.removeListener("unhandledRejection",c),r.on("unhandledRejection",u)},e.swallow=function(){r.removeListener("unhandledRejection",u),r.removeListener("unhandledRejection",c),r.on("unhandledRejection",c)},e.ErrorList=i},9742:(t,e)=>{"use strict";e.byteLength=function(t){var e=u(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,o=u(t),s=o[0],a=o[1],c=new i(function(t,e,n){return 3*(e+n)/4-n}(0,s,a)),l=0,f=a>0?s-4:s;for(n=0;n<f;n+=4)e=r[t.charCodeAt(n)]<<18|r[t.charCodeAt(n+1)]<<12|r[t.charCodeAt(n+2)]<<6|r[t.charCodeAt(n+3)],c[l++]=e>>16&255,c[l++]=e>>8&255,c[l++]=255&e;return 2===a&&(e=r[t.charCodeAt(n)]<<2|r[t.charCodeAt(n+1)]>>4,c[l++]=255&e),1===a&&(e=r[t.charCodeAt(n)]<<10|r[t.charCodeAt(n+1)]<<4|r[t.charCodeAt(n+2)]>>2,c[l++]=e>>8&255,c[l++]=255&e),c},e.fromByteArray=function(t){for(var e,r=t.length,i=r%3,o=[],s=16383,a=0,u=r-i;a<u;a+=s)o.push(c(t,a,a+s>u?u:a+s));return 1===i?(e=t[r-1],o.push(n[e>>2]+n[e<<4&63]+"==")):2===i&&(e=(t[r-2]<<8)+t[r-1],o.push(n[e>>10]+n[e>>4&63]+n[e<<2&63]+"=")),o.join("")};for(var n=[],r=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=o.length;s<a;++s)n[s]=o[s],r[o.charCodeAt(s)]=s;function u(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t,e,r){for(var i,o,s=[],a=e;a<r;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return s.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},8764:(t,e,n)=>{"use strict";var r=n(5108);const i=n(9742),o=n(645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=c,e.SlowBuffer=function(t){return+t!=t&&(t=0),c.alloc(+t)},e.INSPECT_MAX_BYTES=50;const a=2147483647;function u(t){if(t>a)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,c.prototype),e}function c(t,e,n){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return h(t)}return l(t,e,n)}function l(t,e,n){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!c.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const n=0|g(t,e);let r=u(n);const i=r.write(t,e);return i!==n&&(r=r.slice(0,i)),r}(t,e);if(ArrayBuffer.isView(t))return function(t){if(X(t,Uint8Array)){const e=new Uint8Array(t);return d(e.buffer,e.byteOffset,e.byteLength)}return p(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(X(t,ArrayBuffer)||t&&X(t.buffer,ArrayBuffer))return d(t,e,n);if("undefined"!=typeof SharedArrayBuffer&&(X(t,SharedArrayBuffer)||t&&X(t.buffer,SharedArrayBuffer)))return d(t,e,n);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=t.valueOf&&t.valueOf();if(null!=r&&r!==t)return c.from(r,e,n);const i=function(t){if(c.isBuffer(t)){const e=0|_(t.length),n=u(e);return 0===n.length||t.copy(n,0,0,e),n}return void 0!==t.length?"number"!=typeof t.length||Z(t.length)?u(0):p(t):"Buffer"===t.type&&Array.isArray(t.data)?p(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return c.from(t[Symbol.toPrimitive]("string"),e,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function h(t){return f(t),u(t<0?0:0|_(t))}function p(t){const e=t.length<0?0:0|_(t.length),n=u(e);for(let r=0;r<e;r+=1)n[r]=255&t[r];return n}function d(t,e,n){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===e&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,e):new Uint8Array(t,e,n),Object.setPrototypeOf(r,c.prototype),r}function _(t){if(t>=a)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a.toString(16)+" bytes");return 0|t}function g(t,e){if(c.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||X(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const n=t.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let i=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return K(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(t).length;default:if(i)return r?-1:K(t).length;e=(""+e).toLowerCase(),i=!0}}function y(t,e,n){let r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return W(this,e,n);case"utf8":case"utf-8":return O(this,e,n);case"ascii":return N(this,e,n);case"latin1":case"binary":return F(this,e,n);case"base64":return T(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function S(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Z(n=+n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=c.from(e,r)),c.isBuffer(e))return 0===e.length?-1:E(t,e,n,r,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):E(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function E(t,e,n,r,i){let o,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){let r=-1;for(o=n;o<a;o++)if(c(t,o)===c(e,-1===r?0:o-r)){if(-1===r&&(r=o),o-r+1===u)return r*s}else-1!==r&&(o-=o-r),r=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){let n=!0;for(let r=0;r<u;r++)if(c(t,o+r)!==c(e,r)){n=!1;break}if(n)return o}return-1}function v(t,e,n,r){n=Number(n)||0;const i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;const o=e.length;let s;for(r>o/2&&(r=o/2),s=0;s<r;++s){const r=parseInt(e.substr(2*s,2),16);if(Z(r))return s;t[n+s]=r}return s}function I(t,e,n,r){return q(K(e,t.length-n),t,n,r)}function b(t,e,n,r){return q(function(t){const e=[];for(let n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function w(t,e,n,r){return q(z(e),t,n,r)}function A(t,e,n,r){return q(function(t,e){let n,r,i;const o=[];for(let s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function T(t,e,n){return 0===e&&n===t.length?i.fromByteArray(t):i.fromByteArray(t.slice(e,n))}function O(t,e,n){n=Math.min(t.length,n);const r=[];let i=e;for(;i<n;){const e=t[i];let o=null,s=e>239?4:e>223?3:e>191?2:1;if(i+s<=n){let n,r,a,u;switch(s){case 1:e<128&&(o=e);break;case 2:n=t[i+1],128==(192&n)&&(u=(31&e)<<6|63&n,u>127&&(o=u));break;case 3:n=t[i+1],r=t[i+2],128==(192&n)&&128==(192&r)&&(u=(15&e)<<12|(63&n)<<6|63&r,u>2047&&(u<55296||u>57343)&&(o=u));break;case 4:n=t[i+1],r=t[i+2],a=t[i+3],128==(192&n)&&128==(192&r)&&128==(192&a)&&(u=(15&e)<<18|(63&n)<<12|(63&r)<<6|63&a,u>65535&&u<1114112&&(o=u))}}null===o?(o=65533,s=1):o>65535&&(o-=65536,r.push(o>>>10&1023|55296),o=56320|1023&o),r.push(o),i+=s}return function(t){const e=t.length;if(e<=R)return String.fromCharCode.apply(String,t);let n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=R));return n}(r)}e.kMaxLength=a,c.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),c.TYPED_ARRAY_SUPPORT||void 0===r||"function"!=typeof r.error||r.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(t,e,n){return l(t,e,n)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(t,e,n){return function(t,e,n){return f(t),t<=0?u(t):void 0!==e?"string"==typeof n?u(t).fill(e,n):u(t).fill(e):u(t)}(t,e,n)},c.allocUnsafe=function(t){return h(t)},c.allocUnsafeSlow=function(t){return h(t)},c.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==c.prototype},c.compare=function(t,e){if(X(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),X(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let n=t.length,r=e.length;for(let i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);let n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;const r=c.allocUnsafe(e);let i=0;for(n=0;n<t.length;++n){let e=t[n];if(X(e,Uint8Array))i+e.length>r.length?(c.isBuffer(e)||(e=c.from(e)),e.copy(r,i)):Uint8Array.prototype.set.call(r,e,i);else{if(!c.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(r,i)}i+=e.length}return r},c.byteLength=g,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)m(this,e,e+1);return this},c.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},c.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},c.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?O(this,0,t):y.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){let t="";const n=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(t+=" ... "),"<Buffer "+t+">"},s&&(c.prototype[s]=c.prototype.inspect),c.prototype.compare=function(t,e,n,r,i){if(X(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;let o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0);const a=Math.min(o,s),u=this.slice(r,i),l=t.slice(e,n);for(let t=0;t<a;++t)if(u[t]!==l[t]){o=u[t],s=l[t];break}return o<s?-1:s<o?1:0},c.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},c.prototype.indexOf=function(t,e,n){return S(this,t,e,n,!0)},c.prototype.lastIndexOf=function(t,e,n){return S(this,t,e,n,!1)},c.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let o=!1;for(;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return I(this,t,e,n);case"ascii":case"latin1":case"binary":return b(this,t,e,n);case"base64":return w(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const R=4096;function N(t,e,n){let r="";n=Math.min(t.length,n);for(let i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function F(t,e,n){let r="";n=Math.min(t.length,n);for(let i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function W(t,e,n){const r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);let i="";for(let r=e;r<n;++r)i+=J[t[r]];return i}function C(t,e,n){const r=t.slice(e,n);let i="";for(let t=0;t<r.length-1;t+=2)i+=String.fromCharCode(r[t]+256*r[t+1]);return i}function L(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function P(t,e,n,r,i,o){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function D(t,e,n,r,i){H(e,r,i,t,n,7);let o=Number(e&BigInt(4294967295));t[n++]=o,o>>=8,t[n++]=o,o>>=8,t[n++]=o,o>>=8,t[n++]=o;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[n++]=s,s>>=8,t[n++]=s,s>>=8,t[n++]=s,s>>=8,t[n++]=s,n}function x(t,e,n,r,i){H(e,r,i,t,n,7);let o=Number(e&BigInt(4294967295));t[n+7]=o,o>>=8,t[n+6]=o,o>>=8,t[n+5]=o,o>>=8,t[n+4]=o;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[n+3]=s,s>>=8,t[n+2]=s,s>>=8,t[n+1]=s,s>>=8,t[n]=s,n+8}function k(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function M(t,e,n,r,i){return e=+e,n>>>=0,i||k(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function B(t,e,n,r,i){return e=+e,n>>>=0,i||k(t,0,n,8),o.write(t,e,n,r,52,8),n+8}c.prototype.slice=function(t,e){const n=this.length;(t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(e=void 0===e?n:~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),e<t&&(e=t);const r=this.subarray(t,e);return Object.setPrototypeOf(r,c.prototype),r},c.prototype.readUintLE=c.prototype.readUIntLE=function(t,e,n){t>>>=0,e>>>=0,n||L(t,e,this.length);let r=this[t],i=1,o=0;for(;++o<e&&(i*=256);)r+=this[t+o]*i;return r},c.prototype.readUintBE=c.prototype.readUIntBE=function(t,e,n){t>>>=0,e>>>=0,n||L(t,e,this.length);let r=this[t+--e],i=1;for(;e>0&&(i*=256);)r+=this[t+--e]*i;return r},c.prototype.readUint8=c.prototype.readUInt8=function(t,e){return t>>>=0,e||L(t,1,this.length),this[t]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(t,e){return t>>>=0,e||L(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(t,e){return t>>>=0,e||L(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(t,e){return t>>>=0,e||L(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(t,e){return t>>>=0,e||L(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readBigUInt64LE=Q((function(t){$(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||Y(t,this.length-8);const r=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,i=this[++t]+256*this[++t]+65536*this[++t]+n*2**24;return BigInt(r)+(BigInt(i)<<BigInt(32))})),c.prototype.readBigUInt64BE=Q((function(t){$(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||Y(t,this.length-8);const r=e*2**24+65536*this[++t]+256*this[++t]+this[++t],i=this[++t]*2**24+65536*this[++t]+256*this[++t]+n;return(BigInt(r)<<BigInt(32))+BigInt(i)})),c.prototype.readIntLE=function(t,e,n){t>>>=0,e>>>=0,n||L(t,e,this.length);let r=this[t],i=1,o=0;for(;++o<e&&(i*=256);)r+=this[t+o]*i;return i*=128,r>=i&&(r-=Math.pow(2,8*e)),r},c.prototype.readIntBE=function(t,e,n){t>>>=0,e>>>=0,n||L(t,e,this.length);let r=e,i=1,o=this[t+--r];for(;r>0&&(i*=256);)o+=this[t+--r]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*e)),o},c.prototype.readInt8=function(t,e){return t>>>=0,e||L(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){t>>>=0,e||L(t,2,this.length);const n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(t,e){t>>>=0,e||L(t,2,this.length);const n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(t,e){return t>>>=0,e||L(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return t>>>=0,e||L(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readBigInt64LE=Q((function(t){$(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||Y(t,this.length-8);const r=this[t+4]+256*this[t+5]+65536*this[t+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),c.prototype.readBigInt64BE=Q((function(t){$(t>>>=0,"offset");const e=this[t],n=this[t+7];void 0!==e&&void 0!==n||Y(t,this.length-8);const r=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(r)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+n)})),c.prototype.readFloatLE=function(t,e){return t>>>=0,e||L(t,4,this.length),o.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return t>>>=0,e||L(t,4,this.length),o.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return t>>>=0,e||L(t,8,this.length),o.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return t>>>=0,e||L(t,8,this.length),o.read(this,t,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(t,e,n,r){t=+t,e>>>=0,n>>>=0,r||P(this,t,e,n,Math.pow(2,8*n)-1,0);let i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(t,e,n,r){t=+t,e>>>=0,n>>>=0,r||P(this,t,e,n,Math.pow(2,8*n)-1,0);let i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},c.prototype.writeUint8=c.prototype.writeUInt8=function(t,e,n){return t=+t,e>>>=0,n||P(this,t,e,1,255,0),this[e]=255&t,e+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(t,e,n){return t=+t,e>>>=0,n||P(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(t,e,n){return t=+t,e>>>=0,n||P(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(t,e,n){return t=+t,e>>>=0,n||P(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(t,e,n){return t=+t,e>>>=0,n||P(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeBigUInt64LE=Q((function(t,e=0){return D(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=Q((function(t,e=0){return x(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*n-1);P(this,t,e,n,r-1,-r)}let i=0,o=1,s=0;for(this[e]=255&t;++i<n&&(o*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/o>>0)-s&255;return e+n},c.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e>>>=0,!r){const r=Math.pow(2,8*n-1);P(this,t,e,n,r-1,-r)}let i=n-1,o=1,s=0;for(this[e+i]=255&t;--i>=0&&(o*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/o>>0)-s&255;return e+n},c.prototype.writeInt8=function(t,e,n){return t=+t,e>>>=0,n||P(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,n){return t=+t,e>>>=0,n||P(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeInt16BE=function(t,e,n){return t=+t,e>>>=0,n||P(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeInt32LE=function(t,e,n){return t=+t,e>>>=0,n||P(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},c.prototype.writeInt32BE=function(t,e,n){return t=+t,e>>>=0,n||P(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeBigInt64LE=Q((function(t,e=0){return D(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=Q((function(t,e=0){return x(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(t,e,n){return M(this,t,e,!0,n)},c.prototype.writeFloatBE=function(t,e,n){return M(this,t,e,!1,n)},c.prototype.writeDoubleLE=function(t,e,n){return B(this,t,e,!0,n)},c.prototype.writeDoubleBE=function(t,e,n){return B(this,t,e,!1,n)},c.prototype.copy=function(t,e,n,r){if(!c.isBuffer(t))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);const i=r-n;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,n,r):Uint8Array.prototype.set.call(t,this.subarray(n,r),e),i},c.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!c.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===t.length){const e=t.charCodeAt(0);("utf8"===r&&e<128||"latin1"===r)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;let i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{const o=c.isBuffer(t)?t:c.from(t,r),s=o.length;if(0===s)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(i=0;i<n-e;++i)this[i+e]=o[i%s]}return this};const U={};function j(t,e,n){U[t]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function G(t){let e="",n=t.length;const r="-"===t[0]?1:0;for(;n>=r+4;n-=3)e=`_${t.slice(n-3,n)}${e}`;return`${t.slice(0,n)}${e}`}function H(t,e,n,r,i,o){if(t>n||t<e){const r="bigint"==typeof e?"n":"";let i;throw i=o>3?0===e||e===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(o+1)}${r}`:`>= -(2${r} ** ${8*(o+1)-1}${r}) and < 2 ** ${8*(o+1)-1}${r}`:`>= ${e}${r} and <= ${n}${r}`,new U.ERR_OUT_OF_RANGE("value",i,t)}!function(t,e,n){$(e,"offset"),void 0!==t[e]&&void 0!==t[e+n]||Y(e,t.length-(n+1))}(r,i,o)}function $(t,e){if("number"!=typeof t)throw new U.ERR_INVALID_ARG_TYPE(e,"number",t)}function Y(t,e,n){if(Math.floor(t)!==t)throw $(t,n),new U.ERR_OUT_OF_RANGE(n||"offset","an integer",t);if(e<0)throw new U.ERR_BUFFER_OUT_OF_BOUNDS;throw new U.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${e}`,t)}j("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),j("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),j("ERR_OUT_OF_RANGE",(function(t,e,n){let r=`The value of "${t}" is out of range.`,i=n;return Number.isInteger(n)&&Math.abs(n)>2**32?i=G(String(n)):"bigint"==typeof n&&(i=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(i=G(i)),i+="n"),r+=` It must be ${e}. Received ${i}`,r}),RangeError);const V=/[^+/0-9A-Za-z-_]/g;function K(t,e){let n;e=e||1/0;const r=t.length;let i=null;const o=[];for(let s=0;s<r;++s){if(n=t.charCodeAt(s),n>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function z(t){return i.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(V,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function q(t,e,n,r){let i;for(i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}function X(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function Z(t){return t!=t}const J=function(){const t="0123456789abcdef",e=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let i=0;i<16;++i)e[r+i]=t[n]+t[i]}return e}();function Q(t){return"undefined"==typeof BigInt?tt:t}function tt(){throw new Error("BigInt not supported")}},1924:(t,e,n)=>{"use strict";var r=n(210),i=n(5559),o=i(r("String.prototype.indexOf"));t.exports=function(t,e){var n=r(t,!!e);return"function"==typeof n&&o(t,".prototype.")>-1?i(n):n}},5559:(t,e,n)=>{"use strict";var r=n(8612),i=n(210),o=i("%Function.prototype.apply%"),s=i("%Function.prototype.call%"),a=i("%Reflect.apply%",!0)||r.call(s,o),u=i("%Object.getOwnPropertyDescriptor%",!0),c=i("%Object.defineProperty%",!0),l=i("%Math.max%");if(c)try{c({},"a",{value:1})}catch(t){c=null}t.exports=function(t){var e=a(r,s,arguments);if(u&&c){var n=u(e,"length");n.configurable&&c(e,"length",{value:1+l(0,t.length-(arguments.length-1))})}return e};var f=function(){return a(r,o,arguments)};c?c(t.exports,"apply",{value:f}):t.exports.apply=f},5108:(t,e,n)=>{var r=n(9539),i=n(9282);function o(){return(new Date).getTime()}var s,a=Array.prototype.slice,u={};s=void 0!==n.g&&n.g.console?n.g.console:"undefined"!=typeof window&&window.console?window.console:{};for(var c=[[function(){},"log"],[function(){s.log.apply(s,arguments)},"info"],[function(){s.log.apply(s,arguments)},"warn"],[function(){s.warn.apply(s,arguments)},"error"],[function(t){u[t]=o()},"time"],[function(t){var e=u[t];if(!e)throw new Error("No such label: "+t);delete u[t];var n=o()-e;s.log(t+": "+n+"ms")},"timeEnd"],[function(){var t=new Error;t.name="Trace",t.message=r.format.apply(null,arguments),s.error(t.stack)},"trace"],[function(t){s.log(r.inspect(t)+"\n")},"dir"],[function(t){if(!t){var e=a.call(arguments,1);i.ok(!1,r.format.apply(null,e))}},"assert"]],l=0;l<c.length;l++){var f=c[l],h=f[0],p=f[1];s[p]||(s[p]=h)}t.exports=s},520:t=>{"use strict";function e(t,e){for(var n=t.toString();n.length<e;)n="0"+n;return n}function n(t){return e(t,2)}function r(r,i){"string"!=typeof r&&(i=r,r=t.exports.ISO8601_FORMAT),i||(i=t.exports.now());var o,s,a,u,c=n(i.getDate()),l=n(i.getMonth()+1),f=n(i.getFullYear()),h=n(f.substring(2,4)),p=r.indexOf("yyyy")>-1?f:h,d=n(i.getHours()),_=n(i.getMinutes()),g=n(i.getSeconds()),y=e(i.getMilliseconds(),3),m=(o=i.getTimezoneOffset(),s=Math.abs(o),a=String(Math.floor(s/60)),u=String(s%60),a=("0"+a).slice(-2),u=("0"+u).slice(-2),0===o?"Z":(o<0?"+":"-")+a+":"+u);return r.replace(/dd/g,c).replace(/MM/g,l).replace(/y{1,4}/g,p).replace(/hh/g,d).replace(/mm/g,_).replace(/ss/g,g).replace(/SSS/g,y).replace(/O/g,m)}function i(t,e,n,r){t["set"+(r?"":"UTC")+e](n)}t.exports=r,t.exports.asString=r,t.exports.parse=function(e,n,r){if(!e)throw new Error("pattern must be supplied");return function(e,n,r){var o=e.indexOf("O")<0,s=!1,a=[{pattern:/y{1,4}/,regexp:"\\d{1,4}",fn:function(t,e){i(t,"FullYear",e,o)}},{pattern:/MM/,regexp:"\\d{1,2}",fn:function(t,e){i(t,"Month",e-1,o),t.getMonth()!==e-1&&(s=!0)}},{pattern:/dd/,regexp:"\\d{1,2}",fn:function(t,e){s&&i(t,"Month",t.getMonth()-1,o),i(t,"Date",e,o)}},{pattern:/hh/,regexp:"\\d{1,2}",fn:function(t,e){i(t,"Hours",e,o)}},{pattern:/mm/,regexp:"\\d\\d",fn:function(t,e){i(t,"Minutes",e,o)}},{pattern:/ss/,regexp:"\\d\\d",fn:function(t,e){i(t,"Seconds",e,o)}},{pattern:/SSS/,regexp:"\\d\\d\\d",fn:function(t,e){i(t,"Milliseconds",e,o)}},{pattern:/O/,regexp:"[+-]\\d{1,2}:?\\d{2}?|Z",fn:function(t,e){e="Z"===e?0:e.replace(":","");var n=Math.abs(e),r=(e>0?-1:1)*(n%100+60*Math.floor(n/100));t.setUTCMinutes(t.getUTCMinutes()+r)}}],u=a.reduce((function(t,e){return e.pattern.test(t.regexp)?(e.index=t.regexp.match(e.pattern).index,t.regexp=t.regexp.replace(e.pattern,"("+e.regexp+")")):e.index=-1,t}),{regexp:e,index:[]}),c=a.filter((function(t){return t.index>-1}));c.sort((function(t,e){return t.index-e.index}));var l=new RegExp(u.regexp).exec(n);if(l){var f=r||t.exports.now();return c.forEach((function(t,e){t.fn(f,l[e+1])})),f}throw new Error("String '"+n+"' could not be parsed as '"+e+"'")}(e,n,r)},t.exports.now=function(){return new Date},t.exports.ISO8601_FORMAT="yyyy-MM-ddThh:mm:ss.SSS",t.exports.ISO8601_WITH_TZ_OFFSET_FORMAT="yyyy-MM-ddThh:mm:ss.SSSO",t.exports.DATETIME_FORMAT="dd MM yyyy hh:mm:ss.SSS",t.exports.ABSOLUTETIME_FORMAT="hh:mm:ss.SSS"},1227:(t,e,n)=>{var r=n(5108),i=n(4155);e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))})),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&void 0!==i&&"env"in i&&(t=i.env.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,r.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=r.debug||r.log||(()=>{}),t.exports=n(2447)(e);const{formatters:o}=t.exports;o.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},2447:(t,e,n)=>{var r=n(5108);t.exports=function(t){function e(t){let n,r,o,s=null;function a(...t){if(!a.enabled)return;const r=a,i=Number(new Date),o=i-(n||i);r.diff=o,r.prev=n,r.curr=i,n=i,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((n,i)=>{if("%%"===n)return"%";s++;const o=e.formatters[i];if("function"==typeof o){const e=t[s];n=o.call(r,e),t.splice(s,1),s--}return n})),e.formatArgs.call(r,t),(r.log||e.log).apply(r,t)}return a.namespace=t,a.useColors=e.useColors(),a.color=e.selectColor(t),a.extend=i,a.destroy=e.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(r!==e.namespaces&&(r=e.namespaces,o=e.enabled(t)),o),set:t=>{s=t}}),"function"==typeof e.init&&e.init(a),a}function i(t,n){const r=e(this.namespace+(void 0===n?":":n)+t);return r.log=this.log,r}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){const t=[...e.names.map(o),...e.skips.map(o).map((t=>"-"+t))].join(",");return e.enable(""),t},e.enable=function(t){let n;e.save(t),e.namespaces=t,e.names=[],e.skips=[];const r=("string"==typeof t?t:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.slice(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(7824),e.destroy=function(){r.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((n=>{e[n]=t[n]})),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let n=0;for(let e=0;e<t.length;e++)n=(n<<5)-n+t.charCodeAt(e),n|=0;return e.colors[Math.abs(n)%e.colors.length]},e.enable(e.load()),e}},4289:(t,e,n)=>{"use strict";var r=n(2215),i="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),o=Object.prototype.toString,s=Array.prototype.concat,a=Object.defineProperty,u=n(1044)(),c=a&&u,l=function(t,e,n,r){var i;(!(e in t)||"function"==typeof(i=r)&&"[object Function]"===o.call(i)&&r())&&(c?a(t,e,{configurable:!0,enumerable:!1,value:n,writable:!0}):t[e]=n)},f=function(t,e){var n=arguments.length>2?arguments[2]:{},o=r(e);i&&(o=s.call(o,Object.getOwnPropertySymbols(e)));for(var a=0;a<o.length;a+=1)l(t,o[a],e[o[a]],n[o[a]])};f.supportsDescriptors=!!c,t.exports=f},1717:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=n(5786),s=i(n(1227)),a=i(n(9270)),u=(0,s.default)("dylink:dlopen"),c=1048576;e.default=class{constructor(t,e,n,r,i,o,s,a,u){this.dlerrorPtr=0,this.pathToLibrary={},this.handleToLibrary={},this.mainGetFunction=t,this.memory=e,this.globalOffsetTable=n,this.functionTable=r,this.readFileSync=i,this.importObject=o,this.importWebAssemblySync=s,this.getMainInstanceExports=a,this.getMainInstance=u}add_dlmethods(t){for(const e of["dlopen","dladdr","dlclose","dlerror","dlsym"])t[e]=this[e].bind(this)}getState(){const t=new Set;for(const e in this.handleToLibrary)t.add(e);return t}setState(t){for(const e in this.handleToLibrary)t.has(e)||this.dlclose(parseInt(e))}malloc(t,e){if(null==this._malloc){const t=this.mainGetFunction("malloc");if(null==t)throw Error("malloc from libc must be available in the  main instance");this._malloc=t}const n=this._malloc(t);if(0==n){const t=`out of memory -- malloc failed allocating ${e}`;throw u(t),r.warn(t),Error(t)}return n}free(t){if(null==this._free){const t=this.mainGetFunction("free");if(null==t)throw Error("free from libc must be available in the  main instance");this.free=t}this.free(t)}dlopenEnvHandler(t){return(e,n)=>{if(n in e)return Reflect.get(e,n);u("dlopenEnvHandler",n);const r=this.mainGetFunction(n,t);if(null!=r)return r;u("dlopenEnvHandler got null")}}symbolViaPointer(t){const e=this.getMainInstanceExports();if(null==e)return;u("symbolViaPointer",t);let n=e[`__WASM_EXPORT__${t}`];if(null==n)return null;const r=n();return u("symbolViaPointer",t,"--\x3e",r),r}dlopen(t,e){if(null==this.memory)throw Error("bug");const n=t?(0,o.recvString)(t,this.memory):"";if(u("dlopen: path='%s'",n),null!=this.pathToLibrary[n])return this.pathToLibrary[n].handle;if(!n)return this.createLibrary({path:n,instance:this.getMainInstance()});const i=new Uint8Array(this.readFileSync(n)),s=(0,a.default)(i);u("metadata",s);let l=Math.pow(2,s.memoryAlign??0);if(l=Math.max(l,16),null==s.memorySize)throw Error("memorySize must be defined in the shared library");const f=this.malloc(s.memorySize+l,"space for "+n),h=this.malloc(c,"stack for "+n);u("allocating %s bytes for shared library -- at ",s.memorySize+l,f);const p=s.memorySize?(0,o.alignMemory)(f,l):0,d=s.tableSize?this.functionTable.getNextTablePos():0,_={memory:this.memory,__indirect_function_table:this.functionTable.table,__memory_base:p,__table_base:d,__stack_pointer:new WebAssembly.Global({value:"i32",mutable:!0},h+c)};u("env =",_);const g={...this.importObject,env:new Proxy(_,{get:this.dlopenEnvHandler(n)}),"GOT.mem":this.globalOffsetTable.mem,"GOT.func":this.globalOffsetTable.func};s.tableSize&&this.functionTable.prepareForImport(s.tableSize);let y=0;u.enabled&&(y=(new Date).valueOf(),u("importing ",n));const m=this.importWebAssemblySync(n,g);u.enabled&&u("imported ",n,", time =",(new Date).valueOf()-y,"ms");const S={};for(const t in m.exports){if(null!=this.globalOffsetTable.funcMap[t])continue;const e=m.exports[t];null==S[t]&&"function"==typeof e&&(S[t]=this.functionTable.set(e))}for(const t in this.globalOffsetTable.funcMap){const e=m.exports[t]??this.getMainInstanceExports()[t];if(u("table[%s] = %s",this.globalOffsetTable.funcMap[t]?.index,t,e),null==e)throw Error(`dlopen -- UNRESOLVED FUNCTION: ${t}`);this.globalOffsetTable.funcMap[t].set(e),S[t]=this.globalOffsetTable.funcMap[t].index,delete this.globalOffsetTable.funcMap[t]}const{memMap:E}=this.globalOffsetTable;for(const t in E){const e=E[t];delete E[t];const i=m.exports[t]?.value;if(null==i){const i=this.symbolViaPointer(t);if(null==i)throw r.error(`dlopen: FATAL ERROR - Symbol '${t}' is not available in the cowasm kernel or any loaded library via __WASM_EXPORT__${t} but is required by '${n}'.`),Error(`dlopen -- UNRESOLVED SYMBOL: ${t}`);e.value=i}else e.value=i+p}return null!=m.exports.__wasm_call_ctors&&(u("calling __wasm_call_ctors for dynamic library"),m.exports.__wasm_call_ctors()),null!=m.exports.__wasm_apply_data_relocs&&(u("calling __wasm_apply_data_relocs for dynamic library"),m.exports.__wasm_apply_data_relocs()),this.createLibrary({path:n,instance:m,symToPtr:S,stack_alloc:h})}dlsym(t,e){const n=(0,o.recvString)(e,this.memory);return this._dlsym(t,n)}_dlsym(t,e){u("_dlsym: handle=%s, symName='%s'",t,e);const n=this.handleToLibrary[t];if(null==n)throw Error(`dlsym: invalid handle ${t}`);if(!n.path){const r=n.instance.exports[`__WASM_EXPORT__${e}`]?.();if(null!=r)return r;for(const n in this.handleToLibrary){const r=parseInt(n);if(t!=r)try{return this._dlsym(r,e)}catch(t){}}return this.set_dlerror(`dlsym: handle=${t} - unknown symbol '${e}'`),0}const r=n;let i=r.symToPtr[e];return u("sym= ",e,", ptr = ",i),null!=i?i:(i=r.instance.exports[`__WASM_EXPORT__${e}`]?.(),null!=i?i:(this.set_dlerror(`dlsym: handle=${t} - unknown symbol '${e}'`),0))}dladdr(){return u("dladdr: NOT IMPLEMENTED"),this.set_dlerror("dladdr is not yet implemented"),0}dlclose(t){u("dlclose",t);const e=this.handleToLibrary[t];if(null==e)return this.set_dlerror(`dlclose: invalid handle ${t}`),1;if(!e.path)return 0;const n=e;if(null!=n){for(const t in n.symToPtr){const e=n.symToPtr[t];this.functionTable.delete(e)}this.free(n.stack_alloc),delete this.handleToLibrary[t],delete this.pathToLibrary[n.path]}return 0}set_dlerror(t){this.dlerrorPtr||(this.dlerrorPtr=this.malloc(1024,"dlerror pointer")),(0,o.sendString)(t.slice(0,1023),this.dlerrorPtr,this.memory)}dlerror(){return this.dlerrorPtr}getFunction(t){for(const e in this.handleToLibrary){const{path:n,symToPtr:r,instance:i}=this.handleToLibrary[e],o=r?.[t]??i.exports[`__WASM_EXPORT__${t}`]?.();if(null!=o)return u("getFunction",t,n,"handle=",e),this.functionTable.get(o)}}createLibrary({path:t,instance:e,symToPtr:n,stack_alloc:r}){const i=Math.max(0,...Object.keys(this.handleToLibrary).map((t=>parseInt(t))))+1,o={path:t,handle:i,instance:e,symToPtr:n,stack_alloc:r};return this.pathToLibrary[t]=o,this.handleToLibrary[i]=o,i}}},3297:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(1227)),o=n(5786),s=(0,i.default)("dylink:function-table");e.default=class{constructor(t){this.availableTableIndexes=new Set,this.nextTablePos=0,s("constructor"),this.table=t}updateAfterImport(){this.nextTablePos=Math.max(0,...(0,o.nonzeroPositions)(this.table))+1}prepareForImport(t){this.nextTablePos+=t,this.table.length<=this.nextTablePos+50&&this.table.grow(this.nextTablePos+50-this.table.length)}getNextTablePos(){return this.nextTablePos}getNextAvailableIndex(){for(const t of this.availableTableIndexes)return this.availableTableIndexes.delete(t),s("getNextAvailableIndex: from availableTableIndexes",t),t;const t=this.nextTablePos;return s("getNextAvailableIndex: from nextTablePos",t),this.nextTablePos+=1,this.table.length<=this.nextTablePos+50&&this.table.grow(this.nextTablePos+50-this.table.length),t}setLater(){const t=this.getNextAvailableIndex();return{index:t,set:e=>{this.set(e,t)}}}set(t,e){const n=e??this.getNextAvailableIndex();if(null!=this.table.get(n))throw Error("BUG: trying to set a table index that is already set");return this.table.set(n,t),n}get(t){return this.table.get(t)}delete(t){this.table.set(t,null),this.availableTableIndexes.add(t)}}},5931:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=(0,r(n(1227)).default)("dylink:global-offset-table");e.default=class{constructor(t,e){this.GOT={},this.memMap={},this.funcMap={},this.mem=new Proxy(this.GOT,{get:this.GOTMemHandler.bind(this)}),this.func=new Proxy(this.GOT,{get:this.GOTFuncHandler.bind(this)}),this.getMainInstanceExports=t,this.functionTable=e}getState(){const t=new Set;for(const e in this.GOT)t.add(e);return t}setState(t){for(const e in this.GOT)t.has(e)||(delete this.GOT[e],delete this.memMap[e],delete this.funcMap[e])}GOTMemHandler(t,e){if(e in this.GOT)return Reflect.get(this.GOT,e);let n=this.GOT[e];if(!n){const t=new WebAssembly.Global({value:"i32",mutable:!0},0);this.memMap[e]=t,n=this.GOT[e]=t}return n}GOTFuncHandler(t,e){if(e in this.GOT)return Reflect.get(this.GOT,e);let n=this.GOT[e];if(!n){let t;const r=this.getMainInstanceExports()[`__WASM_EXPORT__${e}`];null==r?(this.funcMap[e]=this.functionTable.setLater(),t=this.funcMap[e].index):t=r(),i("GOTFuncHandler ",e,"--\x3e",t);const o=new WebAssembly.Global({value:"i32",mutable:!0},t);n=this.GOT[e]=o}return n}}},7043:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=i(n(204)),s=i(n(1227)),a=i(n(3297)),u=i(n(1717)),c=i(n(5931)),l=(0,s.default)("dylink"),f=(0,s.default)("dylink:import");e.default=async function({path:t,importObject:e,importWebAssembly:n,importWebAssemblySync:i,readFileSync:s,stub:h,allowMainExports:p}){let d=null;null==e&&(e={});let{env:_}=e;null==_&&(_=e.env={});let{memory:g}=_;null==g&&(g=_.memory=new WebAssembly.Memory({initial:10}));let{__indirect_function_table:y}=_;null==y&&(y=_.__indirect_function_table=new WebAssembly.Table({initial:1500,element:"anyfunc"}));const m=new a.default(y);function S(t){if(null==d)return;const e=d.exports[`__WASM_EXPORT__${t}`];if(null==e)return;const n=e();return l("functionViaPointer",t,n),m.get(n)}function E(){if(null==d?.exports)throw Error("bug");return d.exports}const v=new c.default(E,m),I=new u.default((function(t,n=""){l("getFunction",t);let i=e?.env?.[t];if(null!=i)return l("getFunction ",t,"from env"),i;if(i=S(t),null!=i)return l("getFunction ",t,"from function pointer"),i;if(i=I.getFunction(t),null!=i)return l("getFunction ",t,"from other library"),i;if(p&&(i=d?.exports[t],null!=i))return l("getFunction ",t,"from mainInstance exports (potentially dangerous!)"),i;if(n?.includes("numpy")&&t.startsWith("_Z"))return()=>{r.log("WARNING: calling dangerous stub for ",t)};if(n)throw Error(`${t} -- undefined when importing ${n}`);return b.env[t]}),g,v,m,s,e,i,E,(function(){if(null==d)throw Error("bug");return d}));I.add_dlmethods(_);const b=h?{...e,env:(0,o.default)(e.env,S,h)}:e;let w=0;return f.enabled&&(w=(new Date).valueOf(),f("importing ",t)),d=null!=n?await n(t,b):i(t,b),f.enabled&&f("imported ",t,", time =",(new Date).valueOf()-w,"ms"),null!=d.exports.__wasm_call_ctors&&d.exports.__wasm_call_ctors(),m.updateAfterImport(),d.env=_,d.getDlopenState=()=>({dlopen:I.getState(),got:v.getState()}),d.setDlopenState=t=>{const{dlopen:e,got:n}=t;I.setState(e),v.setState(n)},d}},8069:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.path=e.MBtoPages=void 0;const i=r(n(7043));e.default=i.default;var o=n(5786);Object.defineProperty(e,"MBtoPages",{enumerable:!0,get:function(){return o.MBtoPages}}),e.path="/"},9270:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){let e=0,r=0;function i(){let n=0,r=1;for(;;){const i=t[e++];if(n+=(127&i)*r,r*=128,!(128&i))break}return n}function o(){const r=i();return e+=r,function(t,e,r){const i=e+r;let o=e;for(;t[o]&&o<i;)o++;const s=t.slice(e,o);return n.decode(s)}(t,e-r,r)}function s(t,e){if(t)throw new Error(e)}let a="dylink.0";s(!(1836278016==new Uint32Array(new Uint8Array(t.subarray(0,24)).buffer)[0]),"need to see wasm magic number"),s(0!==t[8],"need the dylink section to be first"),e=9;const u=i();r=e+u,a=o();const c={neededDynlibs:[],tlsExports:new Set,weakImports:new Set};if(null==c.neededDynlibs)throw Error("bug: typescript");if(null==c.tlsExports)throw Error("bug: typescript");if(null==c.weakImports)throw Error("bug: typescript");if("dylink"==a){c.memorySize=i(),c.memoryAlign=i(),c.tableSize=i(),c.tableAlign=i();let t=i();for(let e=0;e<t;++e){const t=o();c.neededDynlibs.push(t)}}else{s("dylink.0"!==a,"invalid format -- name must be dylink.0 or dylink");const n=1,u=2,l=3,f=4,h=256,p=3,d=1;for(;e<r;){const r=t[e++],s=i();if(r===n)c.memorySize=i(),c.memoryAlign=i(),c.tableSize=i(),c.tableAlign=i();else if(r===u){const t=i();for(let e=0;e<t;++e){const t=o();c.neededDynlibs.push(t)}}else if(r===l){let t=i();for(;t--;){const t=o();i()&h&&c.tlsExports.add(t)}}else if(r===f){let t=i();for(;t--;){o();const t=o();(i()&p)==d&&c.weakImports.add(t)}}else e+=s}}return c};const n=new TextDecoder},204:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=i(n(1227)),s=(0,o.default)("stub"),a=(0,o.default)("stub:use"),u=(0,o.default)("stub:first");e.default=function(t,e,n){return new Proxy(t,{get(t,i){if(i in t)return Reflect.get(t,i);const o=e(i);return null!=o?(s("using function via pointer for ",i),o):("warn"==n&&r.warn(`\n* WARNING: creating UNSAFE stub for ${String(i)}.  Please fix ASAP!`),a.enabled||u.enabled?(...t)=>(function(t,e){if(a("WARNING: using stub",t,e),u.enabled){if(c.has(t))return;c.add(t)}u("WARNING: first use of stub",t,e)}(i,t),0):()=>0)}})};const c=new Set([])},5786:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=e.alignMemory=e.strlen=e.sendString=e.recvString=e.nonzeroPositions=void 0,e.nonzeroPositions=function(t){const e=[];for(let n=0;n<t.length;n++)null!=t.get(n)&&e.push(n);return e};const n=new TextDecoder,r=new TextEncoder;function i(t,e){const n=new Uint8Array(e.buffer);let r=t;for(;n[r];)r+=1;return r-t}e.recvString=function(t,e){const r=i(t,e),o=e.buffer.slice(t,t+r);return n.decode(o)},e.sendString=function(t,e,n){const i=r.encode(t),o=i.length+1,s=new Int8Array(n.buffer,e,o);s.set(i),s[o-1]=0},e.strlen=i,e.alignMemory=function(t,e){return Math.ceil(t/e)*e},e.MBtoPages=function(t){return 16*t}},8091:t=>{"use strict";function e(t,e){if(null==t)throw new TypeError("Cannot convert first argument to object");for(var n=Object(t),r=1;r<arguments.length;r++){var i=arguments[r];if(null!=i)for(var o=Object.keys(Object(i)),s=0,a=o.length;s<a;s++){var u=o[s],c=Object.getOwnPropertyDescriptor(i,u);void 0!==c&&c.enumerable&&(n[u]=i[u])}}return n}t.exports={assign:e,polyfill:function(){Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:e})}}},7187:(t,e,n)=>{"use strict";var r,i=n(5108),o="object"==typeof Reflect?Reflect:null,s=o&&"function"==typeof o.apply?o.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var a=Number.isNaN||function(t){return t!=t};function u(){u.init.call(this)}t.exports=u,t.exports.once=function(t,e){return new Promise((function(n,r){function i(n){t.removeListener(e,o),r(n)}function o(){"function"==typeof t.removeListener&&t.removeListener("error",i),n([].slice.call(arguments))}m(t,e,o,{once:!0}),"error"!==e&&function(t,e,n){"function"==typeof t.on&&m(t,"error",e,{once:!0})}(t,i)}))},u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var c=10;function l(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function f(t){return void 0===t._maxListeners?u.defaultMaxListeners:t._maxListeners}function h(t,e,n,r){var o,s,a,u;if(l(n),void 0===(s=t._events)?(s=t._events=Object.create(null),t._eventsCount=0):(void 0!==s.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),s=t._events),a=s[e]),void 0===a)a=s[e]=n,++t._eventsCount;else if("function"==typeof a?a=s[e]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(o=f(t))>0&&a.length>o&&!a.warned){a.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=t,c.type=e,c.count=a.length,u=c,i&&i.warn&&i.warn(u)}return t}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},i=p.bind(r);return i.listener=n,r.wrapFn=i,i}function _(t,e,n){var r=t._events;if(void 0===r)return[];var i=r[e];return void 0===i?[]:"function"==typeof i?n?[i.listener||i]:[i]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(i):y(i,i.length)}function g(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function y(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}function m(t,e,n,r){if("function"==typeof t.on)r.once?t.once(e,n):t.on(e,n);else{if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function i(o){r.once&&t.removeEventListener(e,i),n(o)}))}}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");c=t}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||a(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},u.prototype.getMaxListeners=function(){return f(this)},u.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var u=i[t];if(void 0===u)return!1;if("function"==typeof u)s(u,this,e);else{var c=u.length,l=y(u,c);for(n=0;n<c;++n)s(l[n],this,e)}return!0},u.prototype.addListener=function(t,e){return h(this,t,e,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(t,e){return h(this,t,e,!0)},u.prototype.once=function(t,e){return l(e),this.on(t,d(this,t,e)),this},u.prototype.prependOnceListener=function(t,e){return l(e),this.prependListener(t,d(this,t,e)),this},u.prototype.removeListener=function(t,e){var n,r,i,o,s;if(l(e),void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){s=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,i),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,s||e)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)"removeListener"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},u.prototype.listeners=function(t){return _(this,t,!0)},u.prototype.rawListeners=function(t){return _(this,t,!1)},u.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):g.call(t,e)},u.prototype.listenerCount=g,u.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},4029:(t,e,n)=>{"use strict";var r=n(5320),i=Object.prototype.toString,o=Object.prototype.hasOwnProperty,s=function(t,e,n){for(var r=0,i=t.length;r<i;r++)o.call(t,r)&&(null==n?e(t[r],r,t):e.call(n,t[r],r,t))},a=function(t,e,n){for(var r=0,i=t.length;r<i;r++)null==n?e(t.charAt(r),r,t):e.call(n,t.charAt(r),r,t)},u=function(t,e,n){for(var r in t)o.call(t,r)&&(null==n?e(t[r],r,t):e.call(n,t[r],r,t))};t.exports=function(t,e,n){if(!r(e))throw new TypeError("iterator must be a function");var o;arguments.length>=3&&(o=n),"[object Array]"===i.call(t)?s(t,e,o):"string"==typeof t?a(t,e,o):u(t,e,o)}},4290:(t,e,n)=>{"use strict";var r=n(4155);Object.defineProperty(e,"__esModule",{value:!0}),e.unixify=a,e.correctPath=function(t){return a(t.replace(/^\\\\\?\\.:\\/,"\\"))};var i="win32"===r.platform;function o(t,e){var n=t[e];return e>0&&("/"===n||i&&"\\"===n)}function s(t,e){if("string"!=typeof t)throw new TypeError("expected a string");return t=t.replace(/[\\\/]+/g,"/"),!1!==e&&(t=function(t){var e=t.length-1;if(e<2)return t;for(;o(t,e);)e--;return t.substr(0,e+1)}(t)),t}function a(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return i?(t=s(t,e)).replace(/^([a-zA-Z]+:|\.\/)/,""):t}},5659:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fsAsyncMethods=e.fsSyncMethods=e.fsProps=void 0,e.fsProps=["constants","F_OK","R_OK","W_OK","X_OK","Stats"],e.fsSyncMethods=["renameSync","ftruncateSync","truncateSync","chownSync","fchownSync","lchownSync","chmodSync","fchmodSync","lchmodSync","statSync","lstatSync","fstatSync","linkSync","symlinkSync","readlinkSync","realpathSync","unlinkSync","rmdirSync","mkdirSync","mkdirpSync","readdirSync","closeSync","openSync","utimesSync","futimesSync","fsyncSync","writeSync","readSync","readFileSync","writeFileSync","appendFileSync","existsSync","accessSync","fdatasyncSync","mkdtempSync","copyFileSync","createReadStream","createWriteStream"],e.fsAsyncMethods=["rename","ftruncate","truncate","chown","fchown","lchown","chmod","fchmod","lchmod","stat","lstat","fstat","link","symlink","readlink","realpath","unlink","rmdir","mkdir","mkdirp","readdir","close","open","utimes","futimes","fsync","write","read","readFile","writeFile","appendFile","exists","access","fdatasync","mkdtemp","copyFile","watchFile","unwatchFile","watch"]},7648:t=>{"use strict";var e="Function.prototype.bind called on incompatible ",n=Array.prototype.slice,r=Object.prototype.toString,i="[object Function]";t.exports=function(t){var o=this;if("function"!=typeof o||r.call(o)!==i)throw new TypeError(e+o);for(var s,a=n.call(arguments,1),u=function(){if(this instanceof s){var e=o.apply(this,a.concat(n.call(arguments)));return Object(e)===e?e:this}return o.apply(t,a.concat(n.call(arguments)))},c=Math.max(0,o.length-a.length),l=[],f=0;f<c;f++)l.push("$"+f);if(s=Function("binder","return function ("+l.join(",")+"){ return binder.apply(this,arguments); }")(u),o.prototype){var h=function(){};h.prototype=o.prototype,s.prototype=new h,h.prototype=null}return s}},8612:(t,e,n)=>{"use strict";var r=n(7648);t.exports=Function.prototype.bind||r},210:(t,e,n)=>{"use strict";var r,i=SyntaxError,o=Function,s=TypeError,a=function(t){try{return o('"use strict"; return ('+t+").constructor;")()}catch(t){}},u=Object.getOwnPropertyDescriptor;if(u)try{u({},"")}catch(t){u=null}var c=function(){throw new s},l=u?function(){try{return c}catch(t){try{return u(arguments,"callee").get}catch(t){return c}}}():c,f=n(1405)(),h=Object.getPrototypeOf||function(t){return t.__proto__},p={},d="undefined"==typeof Uint8Array?r:h(Uint8Array),_={"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":f?h([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":p,"%AsyncGenerator%":p,"%AsyncGeneratorFunction%":p,"%AsyncIteratorPrototype%":p,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":o,"%GeneratorFunction%":p,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":f?h(h([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&f?h((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&f?h((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":f?h(""[Symbol.iterator]()):r,"%Symbol%":f?Symbol:r,"%SyntaxError%":i,"%ThrowTypeError%":l,"%TypedArray%":d,"%TypeError%":s,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet},g=function t(e){var n;if("%AsyncFunction%"===e)n=a("async function () {}");else if("%GeneratorFunction%"===e)n=a("function* () {}");else if("%AsyncGeneratorFunction%"===e)n=a("async function* () {}");else if("%AsyncGenerator%"===e){var r=t("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===e){var i=t("%AsyncGenerator%");i&&(n=h(i.prototype))}return _[e]=n,n},y={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},m=n(8612),S=n(7642),E=m.call(Function.call,Array.prototype.concat),v=m.call(Function.apply,Array.prototype.splice),I=m.call(Function.call,String.prototype.replace),b=m.call(Function.call,String.prototype.slice),w=m.call(Function.call,RegExp.prototype.exec),A=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,T=/\\(\\)?/g,O=function(t){var e=b(t,0,1),n=b(t,-1);if("%"===e&&"%"!==n)throw new i("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==e)throw new i("invalid intrinsic syntax, expected opening `%`");var r=[];return I(t,A,(function(t,e,n,i){r[r.length]=n?I(i,T,"$1"):e||t})),r},R=function(t,e){var n,r=t;if(S(y,r)&&(r="%"+(n=y[r])[0]+"%"),S(_,r)){var o=_[r];if(o===p&&(o=g(r)),void 0===o&&!e)throw new s("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:o}}throw new i("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new s("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new s('"allowMissing" argument must be a boolean');if(null===w(/^%?[^%]*%?$/,t))throw new i("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=O(t),r=n.length>0?n[0]:"",o=R("%"+r+"%",e),a=o.name,c=o.value,l=!1,f=o.alias;f&&(r=f[0],v(n,E([0,1],f)));for(var h=1,p=!0;h<n.length;h+=1){var d=n[h],g=b(d,0,1),y=b(d,-1);if(('"'===g||"'"===g||"`"===g||'"'===y||"'"===y||"`"===y)&&g!==y)throw new i("property names with quotes must have matching quotes");if("constructor"!==d&&p||(l=!0),S(_,a="%"+(r+="."+d)+"%"))c=_[a];else if(null!=c){if(!(d in c)){if(!e)throw new s("base intrinsic for "+t+" exists, but the property is not available.");return}if(u&&h+1>=n.length){var m=u(c,d);c=(p=!!m)&&"get"in m&&!("originalValue"in m.get)?m.get:c[d]}else p=S(c,d),c=c[d];p&&!l&&(_[a]=c)}}return c}},7296:(t,e,n)=>{"use strict";var r=n(210)("%Object.getOwnPropertyDescriptor%",!0);if(r)try{r([],"length")}catch(t){r=null}t.exports=r},1044:(t,e,n)=>{"use strict";var r=n(210)("%Object.defineProperty%",!0),i=function(){if(r)try{return r({},"a",{value:1}),!0}catch(t){return!1}return!1};i.hasArrayLengthDefineBug=function(){if(!i())return null;try{return 1!==r([],"length",{value:1}).length}catch(t){return!0}},t.exports=i},1405:(t,e,n)=>{"use strict";var r="undefined"!=typeof Symbol&&Symbol,i=n(5419);t.exports=function(){return"function"==typeof r&&"function"==typeof Symbol&&"symbol"==typeof r("foo")&&"symbol"==typeof Symbol("bar")&&i()}},5419:t=>{"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),n=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var r=Object.getOwnPropertySymbols(t);if(1!==r.length||r[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,e);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},6410:(t,e,n)=>{"use strict";var r=n(5419);t.exports=function(){return r()&&!!Symbol.toStringTag}},7642:(t,e,n)=>{"use strict";var r=n(8612);t.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},645:(t,e)=>{e.read=function(t,e,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,c=u>>1,l=-7,f=n?i-1:0,h=n?-1:1,p=t[e+f];for(f+=h,o=p&(1<<-l)-1,p>>=-l,l+=a;l>0;o=256*o+t[e+f],f+=h,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=r;l>0;s=256*s+t[e+f],f+=h,l-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),o-=c}return(p?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,a,u,c=8*o-i-1,l=(1<<c)-1,f=l>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,d=r?1:-1,_=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?h/u:h*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=l?(a=0,s=l):s+f>=1?(a=(e*u-1)*Math.pow(2,i),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[n+p]=255&a,p+=d,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[n+p]=255&s,p+=d,s/=256,c-=8);t[n+p-d]|=128*_}},5717:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}}},2584:(t,e,n)=>{"use strict";var r=n(6410)(),i=n(1924)("Object.prototype.toString"),o=function(t){return!(r&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===i(t)},s=function(t){return!!o(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==i(t)&&"[object Function]"===i(t.callee)},a=function(){return o(arguments)}();o.isLegacyArguments=s,t.exports=a?o:s},5320:t=>{"use strict";var e,n,r=Function.prototype.toString,i="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof i&&"function"==typeof Object.defineProperty)try{e=Object.defineProperty({},"length",{get:function(){throw n}}),n={},i((function(){throw 42}),null,e)}catch(t){t!==n&&(i=null)}else i=null;var o=/^\s*class\b/,s=function(t){try{var e=r.call(t);return o.test(e)}catch(t){return!1}},a=function(t){try{return!s(t)&&(r.call(t),!0)}catch(t){return!1}},u=Object.prototype.toString,c="function"==typeof Symbol&&!!Symbol.toStringTag,l=!(0 in[,]),f=function(){return!1};if("object"==typeof document){var h=document.all;u.call(h)===u.call(document.all)&&(f=function(t){if((l||!t)&&(void 0===t||"object"==typeof t))try{var e=u.call(t);return("[object HTMLAllCollection]"===e||"[object HTML document.all class]"===e||"[object HTMLCollection]"===e||"[object Object]"===e)&&null==t("")}catch(t){}return!1})}t.exports=i?function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;try{i(t,null,e)}catch(t){if(t!==n)return!1}return!s(t)&&a(t)}:function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(c)return a(t);if(s(t))return!1;var e=u.call(t);return!("[object Function]"!==e&&"[object GeneratorFunction]"!==e&&!/^\[object HTML/.test(e))&&a(t)}},8662:(t,e,n)=>{"use strict";var r,i=Object.prototype.toString,o=Function.prototype.toString,s=/^\s*(?:function)?\*/,a=n(6410)(),u=Object.getPrototypeOf;t.exports=function(t){if("function"!=typeof t)return!1;if(s.test(o.call(t)))return!0;if(!a)return"[object GeneratorFunction]"===i.call(t);if(!u)return!1;if(void 0===r){var e=function(){if(!a)return!1;try{return Function("return function*() {}")()}catch(t){}}();r=!!e&&u(e)}return u(t)===r}},8611:t=>{"use strict";t.exports=function(t){return t!=t}},360:(t,e,n)=>{"use strict";var r=n(5559),i=n(4289),o=n(8611),s=n(9415),a=n(3194),u=r(s(),Number);i(u,{getPolyfill:s,implementation:o,shim:a}),t.exports=u},9415:(t,e,n)=>{"use strict";var r=n(8611);t.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:r}},3194:(t,e,n)=>{"use strict";var r=n(4289),i=n(9415);t.exports=function(){var t=i();return r(Number,{isNaN:t},{isNaN:function(){return Number.isNaN!==t}}),t}},5692:(t,e,n)=>{"use strict";var r=n(4029),i=n(3083),o=n(1924),s=o("Object.prototype.toString"),a=n(6410)(),u=n(7296),c="undefined"==typeof globalThis?n.g:globalThis,l=i(),f=o("Array.prototype.indexOf",!0)||function(t,e){for(var n=0;n<t.length;n+=1)if(t[n]===e)return n;return-1},h=o("String.prototype.slice"),p={},d=Object.getPrototypeOf;a&&u&&d&&r(l,(function(t){var e=new c[t];if(Symbol.toStringTag in e){var n=d(e),r=u(n,Symbol.toStringTag);if(!r){var i=d(n);r=u(i,Symbol.toStringTag)}p[t]=r.get}})),t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!a||!(Symbol.toStringTag in t)){var e=h(s(t),8,-1);return f(l,e)>-1}return!!u&&function(t){var e=!1;return r(p,(function(n,r){if(!e)try{e=n.call(t)===r}catch(t){}})),e}(t)}},6486:function(t,e,n){var r;t=n.nmd(t),function(){var i,o="Expected a function",s="__lodash_hash_undefined__",a="__lodash_placeholder__",u=32,c=128,l=1/0,f=9007199254740991,h=NaN,p=4294967295,d=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",u],["partialRight",64],["rearg",256]],_="[object Arguments]",g="[object Array]",y="[object Boolean]",m="[object Date]",S="[object Error]",E="[object Function]",v="[object GeneratorFunction]",I="[object Map]",b="[object Number]",w="[object Object]",A="[object Promise]",T="[object RegExp]",O="[object Set]",R="[object String]",N="[object Symbol]",F="[object WeakMap]",W="[object ArrayBuffer]",C="[object DataView]",L="[object Float32Array]",P="[object Float64Array]",D="[object Int8Array]",x="[object Int16Array]",k="[object Int32Array]",M="[object Uint8Array]",B="[object Uint8ClampedArray]",U="[object Uint16Array]",j="[object Uint32Array]",G=/\b__p \+= '';/g,H=/\b(__p \+=) '' \+/g,$=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Y=/&(?:amp|lt|gt|quot|#39);/g,V=/[&<>"']/g,K=RegExp(Y.source),z=RegExp(V.source),q=/<%-([\s\S]+?)%>/g,X=/<%([\s\S]+?)%>/g,Z=/<%=([\s\S]+?)%>/g,J=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Q=/^\w*$/,tt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,et=/[\\^$.*+?()[\]{}|]/g,nt=RegExp(et.source),rt=/^\s+/,it=/\s/,ot=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,st=/\{\n\/\* \[wrapped with (.+)\] \*/,at=/,? & /,ut=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ct=/[()=,{}\[\]\/\s]/,lt=/\\(\\)?/g,ft=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,ht=/\w*$/,pt=/^[-+]0x[0-9a-f]+$/i,dt=/^0b[01]+$/i,_t=/^\[object .+?Constructor\]$/,gt=/^0o[0-7]+$/i,yt=/^(?:0|[1-9]\d*)$/,mt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,St=/($^)/,Et=/['\n\r\u2028\u2029\\]/g,vt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",It="a-z\\xdf-\\xf6\\xf8-\\xff",bt="A-Z\\xc0-\\xd6\\xd8-\\xde",wt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",At="["+wt+"]",Tt="["+vt+"]",Ot="\\d+",Rt="["+It+"]",Nt="[^\\ud800-\\udfff"+wt+Ot+"\\u2700-\\u27bf"+It+bt+"]",Ft="\\ud83c[\\udffb-\\udfff]",Wt="[^\\ud800-\\udfff]",Ct="(?:\\ud83c[\\udde6-\\uddff]){2}",Lt="[\\ud800-\\udbff][\\udc00-\\udfff]",Pt="["+bt+"]",Dt="(?:"+Rt+"|"+Nt+")",xt="(?:"+Pt+"|"+Nt+")",kt="(?:['’](?:d|ll|m|re|s|t|ve))?",Mt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Bt="(?:"+Tt+"|"+Ft+")?",Ut="[\\ufe0e\\ufe0f]?",jt=Ut+Bt+"(?:\\u200d(?:"+[Wt,Ct,Lt].join("|")+")"+Ut+Bt+")*",Gt="(?:"+["[\\u2700-\\u27bf]",Ct,Lt].join("|")+")"+jt,Ht="(?:"+[Wt+Tt+"?",Tt,Ct,Lt,"[\\ud800-\\udfff]"].join("|")+")",$t=RegExp("['’]","g"),Yt=RegExp(Tt,"g"),Vt=RegExp(Ft+"(?="+Ft+")|"+Ht+jt,"g"),Kt=RegExp([Pt+"?"+Rt+"+"+kt+"(?="+[At,Pt,"$"].join("|")+")",xt+"+"+Mt+"(?="+[At,Pt+Dt,"$"].join("|")+")",Pt+"?"+Dt+"+"+kt,Pt+"+"+Mt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Ot,Gt].join("|"),"g"),zt=RegExp("[\\u200d\\ud800-\\udfff"+vt+"\\ufe0e\\ufe0f]"),qt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Xt=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Zt=-1,Jt={};Jt[L]=Jt[P]=Jt[D]=Jt[x]=Jt[k]=Jt[M]=Jt[B]=Jt[U]=Jt[j]=!0,Jt[_]=Jt[g]=Jt[W]=Jt[y]=Jt[C]=Jt[m]=Jt[S]=Jt[E]=Jt[I]=Jt[b]=Jt[w]=Jt[T]=Jt[O]=Jt[R]=Jt[F]=!1;var Qt={};Qt[_]=Qt[g]=Qt[W]=Qt[C]=Qt[y]=Qt[m]=Qt[L]=Qt[P]=Qt[D]=Qt[x]=Qt[k]=Qt[I]=Qt[b]=Qt[w]=Qt[T]=Qt[O]=Qt[R]=Qt[N]=Qt[M]=Qt[B]=Qt[U]=Qt[j]=!0,Qt[S]=Qt[E]=Qt[F]=!1;var te={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ee=parseFloat,ne=parseInt,re="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,ie="object"==typeof self&&self&&self.Object===Object&&self,oe=re||ie||Function("return this")(),se=e&&!e.nodeType&&e,ae=se&&t&&!t.nodeType&&t,ue=ae&&ae.exports===se,ce=ue&&re.process,le=function(){try{return ae&&ae.require&&ae.require("util").types||ce&&ce.binding&&ce.binding("util")}catch(t){}}(),fe=le&&le.isArrayBuffer,he=le&&le.isDate,pe=le&&le.isMap,de=le&&le.isRegExp,_e=le&&le.isSet,ge=le&&le.isTypedArray;function ye(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function me(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var s=t[i];e(r,s,n(s),t)}return r}function Se(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Ee(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function ve(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Ie(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var s=t[n];e(s,n,t)&&(o[i++]=s)}return o}function be(t,e){return!(null==t||!t.length)&&Le(t,e,0)>-1}function we(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Ae(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function Te(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function Oe(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function Re(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function Ne(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var Fe=ke("length");function We(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function Ce(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function Le(t,e,n){return e==e?function(t,e,n){for(var r=n-1,i=t.length;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):Ce(t,De,n)}function Pe(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function De(t){return t!=t}function xe(t,e){var n=null==t?0:t.length;return n?Ue(t,e)/n:h}function ke(t){return function(e){return null==e?i:e[t]}}function Me(t){return function(e){return null==t?i:t[e]}}function Be(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function Ue(t,e){for(var n,r=-1,o=t.length;++r<o;){var s=e(t[r]);s!==i&&(n=n===i?s:n+s)}return n}function je(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function Ge(t){return t?t.slice(0,an(t)+1).replace(rt,""):t}function He(t){return function(e){return t(e)}}function $e(t,e){return Ae(e,(function(e){return t[e]}))}function Ye(t,e){return t.has(e)}function Ve(t,e){for(var n=-1,r=t.length;++n<r&&Le(e,t[n],0)>-1;);return n}function Ke(t,e){for(var n=t.length;n--&&Le(e,t[n],0)>-1;);return n}function ze(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var qe=Me({À:"A",Á:"A",Â:"A",Ã:"A",Ä:"A",Å:"A",à:"a",á:"a",â:"a",ã:"a",ä:"a",å:"a",Ç:"C",ç:"c",Ð:"D",ð:"d",È:"E",É:"E",Ê:"E",Ë:"E",è:"e",é:"e",ê:"e",ë:"e",Ì:"I",Í:"I",Î:"I",Ï:"I",ì:"i",í:"i",î:"i",ï:"i",Ñ:"N",ñ:"n",Ò:"O",Ó:"O",Ô:"O",Õ:"O",Ö:"O",Ø:"O",ò:"o",ó:"o",ô:"o",õ:"o",ö:"o",ø:"o",Ù:"U",Ú:"U",Û:"U",Ü:"U",ù:"u",ú:"u",û:"u",ü:"u",Ý:"Y",ý:"y",ÿ:"y",Æ:"Ae",æ:"ae",Þ:"Th",þ:"th",ß:"ss",Ā:"A",Ă:"A",Ą:"A",ā:"a",ă:"a",ą:"a",Ć:"C",Ĉ:"C",Ċ:"C",Č:"C",ć:"c",ĉ:"c",ċ:"c",č:"c",Ď:"D",Đ:"D",ď:"d",đ:"d",Ē:"E",Ĕ:"E",Ė:"E",Ę:"E",Ě:"E",ē:"e",ĕ:"e",ė:"e",ę:"e",ě:"e",Ĝ:"G",Ğ:"G",Ġ:"G",Ģ:"G",ĝ:"g",ğ:"g",ġ:"g",ģ:"g",Ĥ:"H",Ħ:"H",ĥ:"h",ħ:"h",Ĩ:"I",Ī:"I",Ĭ:"I",Į:"I",İ:"I",ĩ:"i",ī:"i",ĭ:"i",į:"i",ı:"i",Ĵ:"J",ĵ:"j",Ķ:"K",ķ:"k",ĸ:"k",Ĺ:"L",Ļ:"L",Ľ:"L",Ŀ:"L",Ł:"L",ĺ:"l",ļ:"l",ľ:"l",ŀ:"l",ł:"l",Ń:"N",Ņ:"N",Ň:"N",Ŋ:"N",ń:"n",ņ:"n",ň:"n",ŋ:"n",Ō:"O",Ŏ:"O",Ő:"O",ō:"o",ŏ:"o",ő:"o",Ŕ:"R",Ŗ:"R",Ř:"R",ŕ:"r",ŗ:"r",ř:"r",Ś:"S",Ŝ:"S",Ş:"S",Š:"S",ś:"s",ŝ:"s",ş:"s",š:"s",Ţ:"T",Ť:"T",Ŧ:"T",ţ:"t",ť:"t",ŧ:"t",Ũ:"U",Ū:"U",Ŭ:"U",Ů:"U",Ű:"U",Ų:"U",ũ:"u",ū:"u",ŭ:"u",ů:"u",ű:"u",ų:"u",Ŵ:"W",ŵ:"w",Ŷ:"Y",ŷ:"y",Ÿ:"Y",Ź:"Z",Ż:"Z",Ž:"Z",ź:"z",ż:"z",ž:"z",Ĳ:"IJ",ĳ:"ij",Œ:"Oe",œ:"oe",ŉ:"'n",ſ:"s"}),Xe=Me({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Ze(t){return"\\"+te[t]}function Je(t){return zt.test(t)}function Qe(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function tn(t,e){return function(n){return t(e(n))}}function en(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n];s!==e&&s!==a||(t[n]=a,o[i++]=n)}return o}function nn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function rn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function on(t){return Je(t)?function(t){for(var e=Vt.lastIndex=0;Vt.test(t);)++e;return e}(t):Fe(t)}function sn(t){return Je(t)?function(t){return t.match(Vt)||[]}(t):function(t){return t.split("")}(t)}function an(t){for(var e=t.length;e--&&it.test(t.charAt(e)););return e}var un=Me({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"}),cn=function t(e){var n,r=(e=null==e?oe:cn.defaults(oe.Object(),e,cn.pick(oe,Xt))).Array,it=e.Date,vt=e.Error,It=e.Function,bt=e.Math,wt=e.Object,At=e.RegExp,Tt=e.String,Ot=e.TypeError,Rt=r.prototype,Nt=It.prototype,Ft=wt.prototype,Wt=e["__core-js_shared__"],Ct=Nt.toString,Lt=Ft.hasOwnProperty,Pt=0,Dt=(n=/[^.]+$/.exec(Wt&&Wt.keys&&Wt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",xt=Ft.toString,kt=Ct.call(wt),Mt=oe._,Bt=At("^"+Ct.call(Lt).replace(et,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ut=ue?e.Buffer:i,jt=e.Symbol,Gt=e.Uint8Array,Ht=Ut?Ut.allocUnsafe:i,Vt=tn(wt.getPrototypeOf,wt),zt=wt.create,te=Ft.propertyIsEnumerable,re=Rt.splice,ie=jt?jt.isConcatSpreadable:i,se=jt?jt.iterator:i,ae=jt?jt.toStringTag:i,ce=function(){try{var t=co(wt,"defineProperty");return t({},"",{}),t}catch(t){}}(),le=e.clearTimeout!==oe.clearTimeout&&e.clearTimeout,Fe=it&&it.now!==oe.Date.now&&it.now,Me=e.setTimeout!==oe.setTimeout&&e.setTimeout,ln=bt.ceil,fn=bt.floor,hn=wt.getOwnPropertySymbols,pn=Ut?Ut.isBuffer:i,dn=e.isFinite,_n=Rt.join,gn=tn(wt.keys,wt),yn=bt.max,mn=bt.min,Sn=it.now,En=e.parseInt,vn=bt.random,In=Rt.reverse,bn=co(e,"DataView"),wn=co(e,"Map"),An=co(e,"Promise"),Tn=co(e,"Set"),On=co(e,"WeakMap"),Rn=co(wt,"create"),Nn=On&&new On,Fn={},Wn=Bo(bn),Cn=Bo(wn),Ln=Bo(An),Pn=Bo(Tn),Dn=Bo(On),xn=jt?jt.prototype:i,kn=xn?xn.valueOf:i,Mn=xn?xn.toString:i;function Bn(t){if(na(t)&&!Ys(t)&&!(t instanceof Hn)){if(t instanceof Gn)return t;if(Lt.call(t,"__wrapped__"))return Uo(t)}return new Gn(t)}var Un=function(){function t(){}return function(e){if(!ea(e))return{};if(zt)return zt(e);t.prototype=e;var n=new t;return t.prototype=i,n}}();function jn(){}function Gn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=i}function Hn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=p,this.__views__=[]}function $n(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Yn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Vn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Kn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Vn;++e<n;)this.add(t[e])}function zn(t){var e=this.__data__=new Yn(t);this.size=e.size}function qn(t,e){var n=Ys(t),r=!n&&$s(t),i=!n&&!r&&qs(t),o=!n&&!r&&!i&&la(t),s=n||r||i||o,a=s?je(t.length,Tt):[],u=a.length;for(var c in t)!e&&!Lt.call(t,c)||s&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||yo(c,u))||a.push(c);return a}function Xn(t){var e=t.length;return e?t[Vr(0,e-1)]:i}function Zn(t,e){return Po(Oi(t),sr(e,0,t.length))}function Jn(t){return Po(Oi(t))}function Qn(t,e,n){(n!==i&&!js(t[e],n)||n===i&&!(e in t))&&ir(t,e,n)}function tr(t,e,n){var r=t[e];Lt.call(t,e)&&js(r,n)&&(n!==i||e in t)||ir(t,e,n)}function er(t,e){for(var n=t.length;n--;)if(js(t[n][0],e))return n;return-1}function nr(t,e,n,r){return fr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function rr(t,e){return t&&Ri(e,Ca(e),t)}function ir(t,e,n){"__proto__"==e&&ce?ce(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function or(t,e){for(var n=-1,o=e.length,s=r(o),a=null==t;++n<o;)s[n]=a?i:Oa(t,e[n]);return s}function sr(t,e,n){return t==t&&(n!==i&&(t=t<=n?t:n),e!==i&&(t=t>=e?t:e)),t}function ar(t,e,n,r,o,s){var a,u=1&e,c=2&e,l=4&e;if(n&&(a=o?n(t,r,o,s):n(t)),a!==i)return a;if(!ea(t))return t;var f=Ys(t);if(f){if(a=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&Lt.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!u)return Oi(t,a)}else{var h=ho(t),p=h==E||h==v;if(qs(t))return vi(t,u);if(h==w||h==_||p&&!o){if(a=c||p?{}:_o(t),!u)return c?function(t,e){return Ri(t,fo(t),e)}(t,function(t,e){return t&&Ri(e,La(e),t)}(a,t)):function(t,e){return Ri(t,lo(t),e)}(t,rr(a,t))}else{if(!Qt[h])return o?t:{};a=function(t,e,n){var r,i=t.constructor;switch(e){case W:return Ii(t);case y:case m:return new i(+t);case C:return function(t,e){var n=e?Ii(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case L:case P:case D:case x:case k:case M:case B:case U:case j:return bi(t,n);case I:return new i;case b:case R:return new i(t);case T:return function(t){var e=new t.constructor(t.source,ht.exec(t));return e.lastIndex=t.lastIndex,e}(t);case O:return new i;case N:return r=t,kn?wt(kn.call(r)):{}}}(t,h,u)}}s||(s=new zn);var d=s.get(t);if(d)return d;s.set(t,a),aa(t)?t.forEach((function(r){a.add(ar(r,e,n,r,t,s))})):ra(t)&&t.forEach((function(r,i){a.set(i,ar(r,e,n,i,t,s))}));var g=f?i:(l?c?no:eo:c?La:Ca)(t);return Se(g||t,(function(r,i){g&&(r=t[i=r]),tr(a,i,ar(r,e,n,i,t,s))})),a}function ur(t,e,n){var r=n.length;if(null==t)return!r;for(t=wt(t);r--;){var o=n[r],s=e[o],a=t[o];if(a===i&&!(o in t)||!s(a))return!1}return!0}function cr(t,e,n){if("function"!=typeof t)throw new Ot(o);return Fo((function(){t.apply(i,n)}),e)}function lr(t,e,n,r){var i=-1,o=be,s=!0,a=t.length,u=[],c=e.length;if(!a)return u;n&&(e=Ae(e,He(n))),r?(o=we,s=!1):e.length>=200&&(o=Ye,s=!1,e=new Kn(e));t:for(;++i<a;){var l=t[i],f=null==n?l:n(l);if(l=r||0!==l?l:0,s&&f==f){for(var h=c;h--;)if(e[h]===f)continue t;u.push(l)}else o(e,f,r)||u.push(l)}return u}Bn.templateSettings={escape:q,evaluate:X,interpolate:Z,variable:"",imports:{_:Bn}},Bn.prototype=jn.prototype,Bn.prototype.constructor=Bn,Gn.prototype=Un(jn.prototype),Gn.prototype.constructor=Gn,Hn.prototype=Un(jn.prototype),Hn.prototype.constructor=Hn,$n.prototype.clear=function(){this.__data__=Rn?Rn(null):{},this.size=0},$n.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},$n.prototype.get=function(t){var e=this.__data__;if(Rn){var n=e[t];return n===s?i:n}return Lt.call(e,t)?e[t]:i},$n.prototype.has=function(t){var e=this.__data__;return Rn?e[t]!==i:Lt.call(e,t)},$n.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Rn&&e===i?s:e,this},Yn.prototype.clear=function(){this.__data__=[],this.size=0},Yn.prototype.delete=function(t){var e=this.__data__,n=er(e,t);return!(n<0||(n==e.length-1?e.pop():re.call(e,n,1),--this.size,0))},Yn.prototype.get=function(t){var e=this.__data__,n=er(e,t);return n<0?i:e[n][1]},Yn.prototype.has=function(t){return er(this.__data__,t)>-1},Yn.prototype.set=function(t,e){var n=this.__data__,r=er(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},Vn.prototype.clear=function(){this.size=0,this.__data__={hash:new $n,map:new(wn||Yn),string:new $n}},Vn.prototype.delete=function(t){var e=ao(this,t).delete(t);return this.size-=e?1:0,e},Vn.prototype.get=function(t){return ao(this,t).get(t)},Vn.prototype.has=function(t){return ao(this,t).has(t)},Vn.prototype.set=function(t,e){var n=ao(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Kn.prototype.add=Kn.prototype.push=function(t){return this.__data__.set(t,s),this},Kn.prototype.has=function(t){return this.__data__.has(t)},zn.prototype.clear=function(){this.__data__=new Yn,this.size=0},zn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},zn.prototype.get=function(t){return this.__data__.get(t)},zn.prototype.has=function(t){return this.__data__.has(t)},zn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Yn){var r=n.__data__;if(!wn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Vn(r)}return n.set(t,e),this.size=n.size,this};var fr=Wi(Sr),hr=Wi(Er,!0);function pr(t,e){var n=!0;return fr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function dr(t,e,n){for(var r=-1,o=t.length;++r<o;){var s=t[r],a=e(s);if(null!=a&&(u===i?a==a&&!ca(a):n(a,u)))var u=a,c=s}return c}function _r(t,e){var n=[];return fr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function gr(t,e,n,r,i){var o=-1,s=t.length;for(n||(n=go),i||(i=[]);++o<s;){var a=t[o];e>0&&n(a)?e>1?gr(a,e-1,n,r,i):Te(i,a):r||(i[i.length]=a)}return i}var yr=Ci(),mr=Ci(!0);function Sr(t,e){return t&&yr(t,e,Ca)}function Er(t,e){return t&&mr(t,e,Ca)}function vr(t,e){return Ie(e,(function(e){return Js(t[e])}))}function Ir(t,e){for(var n=0,r=(e=yi(e,t)).length;null!=t&&n<r;)t=t[Mo(e[n++])];return n&&n==r?t:i}function br(t,e,n){var r=e(t);return Ys(t)?r:Te(r,n(t))}function wr(t){return null==t?t===i?"[object Undefined]":"[object Null]":ae&&ae in wt(t)?function(t){var e=Lt.call(t,ae),n=t[ae];try{t[ae]=i;var r=!0}catch(t){}var o=xt.call(t);return r&&(e?t[ae]=n:delete t[ae]),o}(t):function(t){return xt.call(t)}(t)}function Ar(t,e){return t>e}function Tr(t,e){return null!=t&&Lt.call(t,e)}function Or(t,e){return null!=t&&e in wt(t)}function Rr(t,e,n){for(var o=n?we:be,s=t[0].length,a=t.length,u=a,c=r(a),l=1/0,f=[];u--;){var h=t[u];u&&e&&(h=Ae(h,He(e))),l=mn(h.length,l),c[u]=!n&&(e||s>=120&&h.length>=120)?new Kn(u&&h):i}h=t[0];var p=-1,d=c[0];t:for(;++p<s&&f.length<l;){var _=h[p],g=e?e(_):_;if(_=n||0!==_?_:0,!(d?Ye(d,g):o(f,g,n))){for(u=a;--u;){var y=c[u];if(!(y?Ye(y,g):o(t[u],g,n)))continue t}d&&d.push(g),f.push(_)}}return f}function Nr(t,e,n){var r=null==(t=To(t,e=yi(e,t)))?t:t[Mo(Zo(e))];return null==r?i:ye(r,t,n)}function Fr(t){return na(t)&&wr(t)==_}function Wr(t,e,n,r,o){return t===e||(null==t||null==e||!na(t)&&!na(e)?t!=t&&e!=e:function(t,e,n,r,o,s){var a=Ys(t),u=Ys(e),c=a?g:ho(t),l=u?g:ho(e),f=(c=c==_?w:c)==w,h=(l=l==_?w:l)==w,p=c==l;if(p&&qs(t)){if(!qs(e))return!1;a=!0,f=!1}if(p&&!f)return s||(s=new zn),a||la(t)?Qi(t,e,n,r,o,s):function(t,e,n,r,i,o,s){switch(n){case C:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case W:return!(t.byteLength!=e.byteLength||!o(new Gt(t),new Gt(e)));case y:case m:case b:return js(+t,+e);case S:return t.name==e.name&&t.message==e.message;case T:case R:return t==e+"";case I:var a=Qe;case O:var u=1&r;if(a||(a=nn),t.size!=e.size&&!u)return!1;var c=s.get(t);if(c)return c==e;r|=2,s.set(t,e);var l=Qi(a(t),a(e),r,i,o,s);return s.delete(t),l;case N:if(kn)return kn.call(t)==kn.call(e)}return!1}(t,e,c,n,r,o,s);if(!(1&n)){var d=f&&Lt.call(t,"__wrapped__"),E=h&&Lt.call(e,"__wrapped__");if(d||E){var v=d?t.value():t,A=E?e.value():e;return s||(s=new zn),o(v,A,n,r,s)}}return!!p&&(s||(s=new zn),function(t,e,n,r,o,s){var a=1&n,u=eo(t),c=u.length;if(c!=eo(e).length&&!a)return!1;for(var l=c;l--;){var f=u[l];if(!(a?f in e:Lt.call(e,f)))return!1}var h=s.get(t),p=s.get(e);if(h&&p)return h==e&&p==t;var d=!0;s.set(t,e),s.set(e,t);for(var _=a;++l<c;){var g=t[f=u[l]],y=e[f];if(r)var m=a?r(y,g,f,e,t,s):r(g,y,f,t,e,s);if(!(m===i?g===y||o(g,y,n,r,s):m)){d=!1;break}_||(_="constructor"==f)}if(d&&!_){var S=t.constructor,E=e.constructor;S==E||!("constructor"in t)||!("constructor"in e)||"function"==typeof S&&S instanceof S&&"function"==typeof E&&E instanceof E||(d=!1)}return s.delete(t),s.delete(e),d}(t,e,n,r,o,s))}(t,e,n,r,Wr,o))}function Cr(t,e,n,r){var o=n.length,s=o,a=!r;if(null==t)return!s;for(t=wt(t);o--;){var u=n[o];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++o<s;){var c=(u=n[o])[0],l=t[c],f=u[1];if(a&&u[2]){if(l===i&&!(c in t))return!1}else{var h=new zn;if(r)var p=r(l,f,c,t,e,h);if(!(p===i?Wr(f,l,3,r,h):p))return!1}}return!0}function Lr(t){return!(!ea(t)||(e=t,Dt&&Dt in e))&&(Js(t)?Bt:_t).test(Bo(t));var e}function Pr(t){return"function"==typeof t?t:null==t?iu:"object"==typeof t?Ys(t)?Br(t[0],t[1]):Mr(t):pu(t)}function Dr(t){if(!Io(t))return gn(t);var e=[];for(var n in wt(t))Lt.call(t,n)&&"constructor"!=n&&e.push(n);return e}function xr(t,e){return t<e}function kr(t,e){var n=-1,i=Ks(t)?r(t.length):[];return fr(t,(function(t,r,o){i[++n]=e(t,r,o)})),i}function Mr(t){var e=uo(t);return 1==e.length&&e[0][2]?wo(e[0][0],e[0][1]):function(n){return n===t||Cr(n,t,e)}}function Br(t,e){return So(t)&&bo(e)?wo(Mo(t),e):function(n){var r=Oa(n,t);return r===i&&r===e?Ra(n,t):Wr(e,r,3)}}function Ur(t,e,n,r,o){t!==e&&yr(e,(function(s,a){if(o||(o=new zn),ea(s))!function(t,e,n,r,o,s,a){var u=Ro(t,n),c=Ro(e,n),l=a.get(c);if(l)Qn(t,n,l);else{var f=s?s(u,c,n+"",t,e,a):i,h=f===i;if(h){var p=Ys(c),d=!p&&qs(c),_=!p&&!d&&la(c);f=c,p||d||_?Ys(u)?f=u:zs(u)?f=Oi(u):d?(h=!1,f=vi(c,!0)):_?(h=!1,f=bi(c,!0)):f=[]:oa(c)||$s(c)?(f=u,$s(u)?f=ma(u):ea(u)&&!Js(u)||(f=_o(c))):h=!1}h&&(a.set(c,f),o(f,c,r,s,a),a.delete(c)),Qn(t,n,f)}}(t,e,a,n,Ur,r,o);else{var u=r?r(Ro(t,a),s,a+"",t,e,o):i;u===i&&(u=s),Qn(t,a,u)}}),La)}function jr(t,e){var n=t.length;if(n)return yo(e+=e<0?n:0,n)?t[e]:i}function Gr(t,e,n){e=e.length?Ae(e,(function(t){return Ys(t)?function(e){return Ir(e,1===t.length?t[0]:t)}:t})):[iu];var r=-1;e=Ae(e,He(so()));var i=kr(t,(function(t,n,i){var o=Ae(e,(function(e){return e(t)}));return{criteria:o,index:++r,value:t}}));return function(t,e){var r=t.length;for(t.sort((function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,s=i.length,a=n.length;++r<s;){var u=wi(i[r],o[r]);if(u)return r>=a?u:u*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)}));r--;)t[r]=t[r].value;return t}(i)}function Hr(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var s=e[r],a=Ir(t,s);n(a,s)&&Zr(o,yi(s,t),a)}return o}function $r(t,e,n,r){var i=r?Pe:Le,o=-1,s=e.length,a=t;for(t===e&&(e=Oi(e)),n&&(a=Ae(t,He(n)));++o<s;)for(var u=0,c=e[o],l=n?n(c):c;(u=i(a,l,u,r))>-1;)a!==t&&re.call(a,u,1),re.call(t,u,1);return t}function Yr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;yo(i)?re.call(t,i,1):ci(t,i)}}return t}function Vr(t,e){return t+fn(vn()*(e-t+1))}function Kr(t,e){var n="";if(!t||e<1||e>f)return n;do{e%2&&(n+=t),(e=fn(e/2))&&(t+=t)}while(e);return n}function zr(t,e){return Wo(Ao(t,e,iu),t+"")}function qr(t){return Xn(ja(t))}function Xr(t,e){var n=ja(t);return Po(n,sr(e,0,n.length))}function Zr(t,e,n,r){if(!ea(t))return t;for(var o=-1,s=(e=yi(e,t)).length,a=s-1,u=t;null!=u&&++o<s;){var c=Mo(e[o]),l=n;if("__proto__"===c||"constructor"===c||"prototype"===c)return t;if(o!=a){var f=u[c];(l=r?r(f,c,u):i)===i&&(l=ea(f)?f:yo(e[o+1])?[]:{})}tr(u,c,l),u=u[c]}return t}var Jr=Nn?function(t,e){return Nn.set(t,e),t}:iu,Qr=ce?function(t,e){return ce(t,"toString",{configurable:!0,enumerable:!1,value:eu(e),writable:!0})}:iu;function ti(t){return Po(ja(t))}function ei(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var s=r(o);++i<o;)s[i]=t[i+e];return s}function ni(t,e){var n;return fr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function ri(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;r<i;){var o=r+i>>>1,s=t[o];null!==s&&!ca(s)&&(n?s<=e:s<e)?r=o+1:i=o}return i}return ii(t,e,iu,n)}function ii(t,e,n,r){var o=0,s=null==t?0:t.length;if(0===s)return 0;for(var a=(e=n(e))!=e,u=null===e,c=ca(e),l=e===i;o<s;){var f=fn((o+s)/2),h=n(t[f]),p=h!==i,d=null===h,_=h==h,g=ca(h);if(a)var y=r||_;else y=l?_&&(r||p):u?_&&p&&(r||!d):c?_&&p&&!d&&(r||!g):!d&&!g&&(r?h<=e:h<e);y?o=f+1:s=f}return mn(s,4294967294)}function oi(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n],a=e?e(s):s;if(!n||!js(a,u)){var u=a;o[i++]=0===s?0:s}}return o}function si(t){return"number"==typeof t?t:ca(t)?h:+t}function ai(t){if("string"==typeof t)return t;if(Ys(t))return Ae(t,ai)+"";if(ca(t))return Mn?Mn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function ui(t,e,n){var r=-1,i=be,o=t.length,s=!0,a=[],u=a;if(n)s=!1,i=we;else if(o>=200){var c=e?null:Ki(t);if(c)return nn(c);s=!1,i=Ye,u=new Kn}else u=e?[]:a;t:for(;++r<o;){var l=t[r],f=e?e(l):l;if(l=n||0!==l?l:0,s&&f==f){for(var h=u.length;h--;)if(u[h]===f)continue t;e&&u.push(f),a.push(l)}else i(u,f,n)||(u!==a&&u.push(f),a.push(l))}return a}function ci(t,e){return null==(t=To(t,e=yi(e,t)))||delete t[Mo(Zo(e))]}function li(t,e,n,r){return Zr(t,e,n(Ir(t,e)),r)}function fi(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?ei(t,r?0:o,r?o+1:i):ei(t,r?o+1:0,r?i:o)}function hi(t,e){var n=t;return n instanceof Hn&&(n=n.value()),Oe(e,(function(t,e){return e.func.apply(e.thisArg,Te([t],e.args))}),n)}function pi(t,e,n){var i=t.length;if(i<2)return i?ui(t[0]):[];for(var o=-1,s=r(i);++o<i;)for(var a=t[o],u=-1;++u<i;)u!=o&&(s[o]=lr(s[o]||a,t[u],e,n));return ui(gr(s,1),e,n)}function di(t,e,n){for(var r=-1,o=t.length,s=e.length,a={};++r<o;){var u=r<s?e[r]:i;n(a,t[r],u)}return a}function _i(t){return zs(t)?t:[]}function gi(t){return"function"==typeof t?t:iu}function yi(t,e){return Ys(t)?t:So(t,e)?[t]:ko(Sa(t))}var mi=zr;function Si(t,e,n){var r=t.length;return n=n===i?r:n,!e&&n>=r?t:ei(t,e,n)}var Ei=le||function(t){return oe.clearTimeout(t)};function vi(t,e){if(e)return t.slice();var n=t.length,r=Ht?Ht(n):new t.constructor(n);return t.copy(r),r}function Ii(t){var e=new t.constructor(t.byteLength);return new Gt(e).set(new Gt(t)),e}function bi(t,e){var n=e?Ii(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function wi(t,e){if(t!==e){var n=t!==i,r=null===t,o=t==t,s=ca(t),a=e!==i,u=null===e,c=e==e,l=ca(e);if(!u&&!l&&!s&&t>e||s&&a&&c&&!u&&!l||r&&a&&c||!n&&c||!o)return 1;if(!r&&!s&&!l&&t<e||l&&n&&o&&!r&&!s||u&&n&&o||!a&&o||!c)return-1}return 0}function Ai(t,e,n,i){for(var o=-1,s=t.length,a=n.length,u=-1,c=e.length,l=yn(s-a,0),f=r(c+l),h=!i;++u<c;)f[u]=e[u];for(;++o<a;)(h||o<s)&&(f[n[o]]=t[o]);for(;l--;)f[u++]=t[o++];return f}function Ti(t,e,n,i){for(var o=-1,s=t.length,a=-1,u=n.length,c=-1,l=e.length,f=yn(s-u,0),h=r(f+l),p=!i;++o<f;)h[o]=t[o];for(var d=o;++c<l;)h[d+c]=e[c];for(;++a<u;)(p||o<s)&&(h[d+n[a]]=t[o++]);return h}function Oi(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function Ri(t,e,n,r){var o=!n;n||(n={});for(var s=-1,a=e.length;++s<a;){var u=e[s],c=r?r(n[u],t[u],u,n,t):i;c===i&&(c=t[u]),o?ir(n,u,c):tr(n,u,c)}return n}function Ni(t,e){return function(n,r){var i=Ys(n)?me:nr,o=e?e():{};return i(n,t,so(r,2),o)}}function Fi(t){return zr((function(e,n){var r=-1,o=n.length,s=o>1?n[o-1]:i,a=o>2?n[2]:i;for(s=t.length>3&&"function"==typeof s?(o--,s):i,a&&mo(n[0],n[1],a)&&(s=o<3?i:s,o=1),e=wt(e);++r<o;){var u=n[r];u&&t(e,u,r,s)}return e}))}function Wi(t,e){return function(n,r){if(null==n)return n;if(!Ks(n))return t(n,r);for(var i=n.length,o=e?i:-1,s=wt(n);(e?o--:++o<i)&&!1!==r(s[o],o,s););return n}}function Ci(t){return function(e,n,r){for(var i=-1,o=wt(e),s=r(e),a=s.length;a--;){var u=s[t?a:++i];if(!1===n(o[u],u,o))break}return e}}function Li(t){return function(e){var n=Je(e=Sa(e))?sn(e):i,r=n?n[0]:e.charAt(0),o=n?Si(n,1).join(""):e.slice(1);return r[t]()+o}}function Pi(t){return function(e){return Oe(Ja($a(e).replace($t,"")),t,"")}}function Di(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Un(t.prototype),r=t.apply(n,e);return ea(r)?r:n}}function xi(t){return function(e,n,r){var o=wt(e);if(!Ks(e)){var s=so(n,3);e=Ca(e),n=function(t){return s(o[t],t,o)}}var a=t(e,n,r);return a>-1?o[s?e[a]:a]:i}}function ki(t){return to((function(e){var n=e.length,r=n,s=Gn.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new Ot(o);if(s&&!u&&"wrapper"==io(a))var u=new Gn([],!0)}for(r=u?r:n;++r<n;){var c=io(a=e[r]),l="wrapper"==c?ro(a):i;u=l&&Eo(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?u[io(l[0])].apply(u,l[3]):1==a.length&&Eo(a)?u[c]():u.thru(a)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&Ys(r))return u.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}}))}function Mi(t,e,n,o,s,a,u,l,f,h){var p=e&c,d=1&e,_=2&e,g=24&e,y=512&e,m=_?i:Di(t);return function i(){for(var c=arguments.length,S=r(c),E=c;E--;)S[E]=arguments[E];if(g)var v=oo(i),I=ze(S,v);if(o&&(S=Ai(S,o,s,g)),a&&(S=Ti(S,a,u,g)),c-=I,g&&c<h){var b=en(S,v);return Yi(t,e,Mi,i.placeholder,n,S,b,l,f,h-c)}var w=d?n:this,A=_?w[t]:t;return c=S.length,l?S=Oo(S,l):y&&c>1&&S.reverse(),p&&f<c&&(S.length=f),this&&this!==oe&&this instanceof i&&(A=m||Di(A)),A.apply(w,S)}}function Bi(t,e){return function(n,r){return function(t,e,n,r){return Sr(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function Ui(t,e){return function(n,r){var o;if(n===i&&r===i)return e;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=ai(n),r=ai(r)):(n=si(n),r=si(r)),o=t(n,r)}return o}}function ji(t){return to((function(e){return e=Ae(e,He(so())),zr((function(n){var r=this;return t(e,(function(t){return ye(t,r,n)}))}))}))}function Gi(t,e){var n=(e=e===i?" ":ai(e)).length;if(n<2)return n?Kr(e,t):e;var r=Kr(e,ln(t/on(e)));return Je(e)?Si(sn(r),0,t).join(""):r.slice(0,t)}function Hi(t){return function(e,n,o){return o&&"number"!=typeof o&&mo(e,n,o)&&(n=o=i),e=da(e),n===i?(n=e,e=0):n=da(n),function(t,e,n,i){for(var o=-1,s=yn(ln((e-t)/(n||1)),0),a=r(s);s--;)a[i?s:++o]=t,t+=n;return a}(e,n,o=o===i?e<n?1:-1:da(o),t)}}function $i(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=ya(e),n=ya(n)),t(e,n)}}function Yi(t,e,n,r,o,s,a,c,l,f){var h=8&e;e|=h?u:64,4&(e&=~(h?64:u))||(e&=-4);var p=[t,e,o,h?s:i,h?a:i,h?i:s,h?i:a,c,l,f],d=n.apply(i,p);return Eo(t)&&No(d,p),d.placeholder=r,Co(d,t,e)}function Vi(t){var e=bt[t];return function(t,n){if(t=ya(t),(n=null==n?0:mn(_a(n),292))&&dn(t)){var r=(Sa(t)+"e").split("e");return+((r=(Sa(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Ki=Tn&&1/nn(new Tn([,-0]))[1]==l?function(t){return new Tn(t)}:cu;function zi(t){return function(e){var n=ho(e);return n==I?Qe(e):n==O?rn(e):function(t,e){return Ae(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function qi(t,e,n,s,l,f,h,p){var d=2&e;if(!d&&"function"!=typeof t)throw new Ot(o);var _=s?s.length:0;if(_||(e&=-97,s=l=i),h=h===i?h:yn(_a(h),0),p=p===i?p:_a(p),_-=l?l.length:0,64&e){var g=s,y=l;s=l=i}var m=d?i:ro(t),S=[t,e,n,s,l,g,y,f,h,p];if(m&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<131,s=r==c&&8==n||r==c&&256==n&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!o&&!s)return t;1&r&&(t[2]=e[2],i|=1&n?0:4);var u=e[3];if(u){var l=t[3];t[3]=l?Ai(l,u,e[4]):u,t[4]=l?en(t[3],a):e[4]}(u=e[5])&&(l=t[5],t[5]=l?Ti(l,u,e[6]):u,t[6]=l?en(t[5],a):e[6]),(u=e[7])&&(t[7]=u),r&c&&(t[8]=null==t[8]?e[8]:mn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(S,m),t=S[0],e=S[1],n=S[2],s=S[3],l=S[4],!(p=S[9]=S[9]===i?d?0:t.length:yn(S[9]-_,0))&&24&e&&(e&=-25),e&&1!=e)E=8==e||16==e?function(t,e,n){var o=Di(t);return function s(){for(var a=arguments.length,u=r(a),c=a,l=oo(s);c--;)u[c]=arguments[c];var f=a<3&&u[0]!==l&&u[a-1]!==l?[]:en(u,l);return(a-=f.length)<n?Yi(t,e,Mi,s.placeholder,i,u,f,i,i,n-a):ye(this&&this!==oe&&this instanceof s?o:t,this,u)}}(t,e,p):e!=u&&33!=e||l.length?Mi.apply(i,S):function(t,e,n,i){var o=1&e,s=Di(t);return function e(){for(var a=-1,u=arguments.length,c=-1,l=i.length,f=r(l+u),h=this&&this!==oe&&this instanceof e?s:t;++c<l;)f[c]=i[c];for(;u--;)f[c++]=arguments[++a];return ye(h,o?n:this,f)}}(t,e,n,s);else var E=function(t,e,n){var r=1&e,i=Di(t);return function e(){return(this&&this!==oe&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,n);return Co((m?Jr:No)(E,S),t,e)}function Xi(t,e,n,r){return t===i||js(t,Ft[n])&&!Lt.call(r,n)?e:t}function Zi(t,e,n,r,o,s){return ea(t)&&ea(e)&&(s.set(e,t),Ur(t,e,i,Zi,s),s.delete(e)),t}function Ji(t){return oa(t)?i:t}function Qi(t,e,n,r,o,s){var a=1&n,u=t.length,c=e.length;if(u!=c&&!(a&&c>u))return!1;var l=s.get(t),f=s.get(e);if(l&&f)return l==e&&f==t;var h=-1,p=!0,d=2&n?new Kn:i;for(s.set(t,e),s.set(e,t);++h<u;){var _=t[h],g=e[h];if(r)var y=a?r(g,_,h,e,t,s):r(_,g,h,t,e,s);if(y!==i){if(y)continue;p=!1;break}if(d){if(!Ne(e,(function(t,e){if(!Ye(d,e)&&(_===t||o(_,t,n,r,s)))return d.push(e)}))){p=!1;break}}else if(_!==g&&!o(_,g,n,r,s)){p=!1;break}}return s.delete(t),s.delete(e),p}function to(t){return Wo(Ao(t,i,Vo),t+"")}function eo(t){return br(t,Ca,lo)}function no(t){return br(t,La,fo)}var ro=Nn?function(t){return Nn.get(t)}:cu;function io(t){for(var e=t.name+"",n=Fn[e],r=Lt.call(Fn,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function oo(t){return(Lt.call(Bn,"placeholder")?Bn:t).placeholder}function so(){var t=Bn.iteratee||ou;return t=t===ou?Pr:t,arguments.length?t(arguments[0],arguments[1]):t}function ao(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function uo(t){for(var e=Ca(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,bo(i)]}return e}function co(t,e){var n=function(t,e){return null==t?i:t[e]}(t,e);return Lr(n)?n:i}var lo=hn?function(t){return null==t?[]:(t=wt(t),Ie(hn(t),(function(e){return te.call(t,e)})))}:gu,fo=hn?function(t){for(var e=[];t;)Te(e,lo(t)),t=Vt(t);return e}:gu,ho=wr;function po(t,e,n){for(var r=-1,i=(e=yi(e,t)).length,o=!1;++r<i;){var s=Mo(e[r]);if(!(o=null!=t&&n(t,s)))break;t=t[s]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&ta(i)&&yo(s,i)&&(Ys(t)||$s(t))}function _o(t){return"function"!=typeof t.constructor||Io(t)?{}:Un(Vt(t))}function go(t){return Ys(t)||$s(t)||!!(ie&&t&&t[ie])}function yo(t,e){var n=typeof t;return!!(e=null==e?f:e)&&("number"==n||"symbol"!=n&&yt.test(t))&&t>-1&&t%1==0&&t<e}function mo(t,e,n){if(!ea(n))return!1;var r=typeof e;return!!("number"==r?Ks(n)&&yo(e,n.length):"string"==r&&e in n)&&js(n[e],t)}function So(t,e){if(Ys(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!ca(t))||Q.test(t)||!J.test(t)||null!=e&&t in wt(e)}function Eo(t){var e=io(t),n=Bn[e];if("function"!=typeof n||!(e in Hn.prototype))return!1;if(t===n)return!0;var r=ro(n);return!!r&&t===r[0]}(bn&&ho(new bn(new ArrayBuffer(1)))!=C||wn&&ho(new wn)!=I||An&&ho(An.resolve())!=A||Tn&&ho(new Tn)!=O||On&&ho(new On)!=F)&&(ho=function(t){var e=wr(t),n=e==w?t.constructor:i,r=n?Bo(n):"";if(r)switch(r){case Wn:return C;case Cn:return I;case Ln:return A;case Pn:return O;case Dn:return F}return e});var vo=Wt?Js:yu;function Io(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Ft)}function bo(t){return t==t&&!ea(t)}function wo(t,e){return function(n){return null!=n&&n[t]===e&&(e!==i||t in wt(n))}}function Ao(t,e,n){return e=yn(e===i?t.length-1:e,0),function(){for(var i=arguments,o=-1,s=yn(i.length-e,0),a=r(s);++o<s;)a[o]=i[e+o];o=-1;for(var u=r(e+1);++o<e;)u[o]=i[o];return u[e]=n(a),ye(t,this,u)}}function To(t,e){return e.length<2?t:Ir(t,ei(e,0,-1))}function Oo(t,e){for(var n=t.length,r=mn(e.length,n),o=Oi(t);r--;){var s=e[r];t[r]=yo(s,n)?o[s]:i}return t}function Ro(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var No=Lo(Jr),Fo=Me||function(t,e){return oe.setTimeout(t,e)},Wo=Lo(Qr);function Co(t,e,n){var r=e+"";return Wo(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(ot,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Se(d,(function(n){var r="_."+n[0];e&n[1]&&!be(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(st);return e?e[1].split(at):[]}(r),n)))}function Lo(t){var e=0,n=0;return function(){var r=Sn(),o=16-(r-n);if(n=r,o>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(i,arguments)}}function Po(t,e){var n=-1,r=t.length,o=r-1;for(e=e===i?r:e;++n<e;){var s=Vr(n,o),a=t[s];t[s]=t[n],t[n]=a}return t.length=e,t}var Do,xo,ko=(Do=Ds((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(tt,(function(t,n,r,i){e.push(r?i.replace(lt,"$1"):n||t)})),e}),(function(t){return 500===xo.size&&xo.clear(),t})),xo=Do.cache,Do);function Mo(t){if("string"==typeof t||ca(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Bo(t){if(null!=t){try{return Ct.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Uo(t){if(t instanceof Hn)return t.clone();var e=new Gn(t.__wrapped__,t.__chain__);return e.__actions__=Oi(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var jo=zr((function(t,e){return zs(t)?lr(t,gr(e,1,zs,!0)):[]})),Go=zr((function(t,e){var n=Zo(e);return zs(n)&&(n=i),zs(t)?lr(t,gr(e,1,zs,!0),so(n,2)):[]})),Ho=zr((function(t,e){var n=Zo(e);return zs(n)&&(n=i),zs(t)?lr(t,gr(e,1,zs,!0),i,n):[]}));function $o(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:_a(n);return i<0&&(i=yn(r+i,0)),Ce(t,so(e,3),i)}function Yo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return n!==i&&(o=_a(n),o=n<0?yn(r+o,0):mn(o,r-1)),Ce(t,so(e,3),o,!0)}function Vo(t){return null!=t&&t.length?gr(t,1):[]}function Ko(t){return t&&t.length?t[0]:i}var zo=zr((function(t){var e=Ae(t,_i);return e.length&&e[0]===t[0]?Rr(e):[]})),qo=zr((function(t){var e=Zo(t),n=Ae(t,_i);return e===Zo(n)?e=i:n.pop(),n.length&&n[0]===t[0]?Rr(n,so(e,2)):[]})),Xo=zr((function(t){var e=Zo(t),n=Ae(t,_i);return(e="function"==typeof e?e:i)&&n.pop(),n.length&&n[0]===t[0]?Rr(n,i,e):[]}));function Zo(t){var e=null==t?0:t.length;return e?t[e-1]:i}var Jo=zr(Qo);function Qo(t,e){return t&&t.length&&e&&e.length?$r(t,e):t}var ts=to((function(t,e){var n=null==t?0:t.length,r=or(t,e);return Yr(t,Ae(e,(function(t){return yo(t,n)?+t:t})).sort(wi)),r}));function es(t){return null==t?t:In.call(t)}var ns=zr((function(t){return ui(gr(t,1,zs,!0))})),rs=zr((function(t){var e=Zo(t);return zs(e)&&(e=i),ui(gr(t,1,zs,!0),so(e,2))})),is=zr((function(t){var e=Zo(t);return e="function"==typeof e?e:i,ui(gr(t,1,zs,!0),i,e)}));function os(t){if(!t||!t.length)return[];var e=0;return t=Ie(t,(function(t){if(zs(t))return e=yn(t.length,e),!0})),je(e,(function(e){return Ae(t,ke(e))}))}function ss(t,e){if(!t||!t.length)return[];var n=os(t);return null==e?n:Ae(n,(function(t){return ye(e,i,t)}))}var as=zr((function(t,e){return zs(t)?lr(t,e):[]})),us=zr((function(t){return pi(Ie(t,zs))})),cs=zr((function(t){var e=Zo(t);return zs(e)&&(e=i),pi(Ie(t,zs),so(e,2))})),ls=zr((function(t){var e=Zo(t);return e="function"==typeof e?e:i,pi(Ie(t,zs),i,e)})),fs=zr(os),hs=zr((function(t){var e=t.length,n=e>1?t[e-1]:i;return n="function"==typeof n?(t.pop(),n):i,ss(t,n)}));function ps(t){var e=Bn(t);return e.__chain__=!0,e}function ds(t,e){return e(t)}var _s=to((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,o=function(e){return or(e,t)};return!(e>1||this.__actions__.length)&&r instanceof Hn&&yo(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:ds,args:[o],thisArg:i}),new Gn(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(i),t}))):this.thru(o)})),gs=Ni((function(t,e,n){Lt.call(t,n)?++t[n]:ir(t,n,1)})),ys=xi($o),ms=xi(Yo);function Ss(t,e){return(Ys(t)?Se:fr)(t,so(e,3))}function Es(t,e){return(Ys(t)?Ee:hr)(t,so(e,3))}var vs=Ni((function(t,e,n){Lt.call(t,n)?t[n].push(e):ir(t,n,[e])})),Is=zr((function(t,e,n){var i=-1,o="function"==typeof e,s=Ks(t)?r(t.length):[];return fr(t,(function(t){s[++i]=o?ye(e,t,n):Nr(t,e,n)})),s})),bs=Ni((function(t,e,n){ir(t,n,e)}));function ws(t,e){return(Ys(t)?Ae:kr)(t,so(e,3))}var As=Ni((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]})),Ts=zr((function(t,e){if(null==t)return[];var n=e.length;return n>1&&mo(t,e[0],e[1])?e=[]:n>2&&mo(e[0],e[1],e[2])&&(e=[e[0]]),Gr(t,gr(e,1),[])})),Os=Fe||function(){return oe.Date.now()};function Rs(t,e,n){return e=n?i:e,e=t&&null==e?t.length:e,qi(t,c,i,i,i,i,e)}function Ns(t,e){var n;if("function"!=typeof e)throw new Ot(o);return t=_a(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=i),n}}var Fs=zr((function(t,e,n){var r=1;if(n.length){var i=en(n,oo(Fs));r|=u}return qi(t,r,e,n,i)})),Ws=zr((function(t,e,n){var r=3;if(n.length){var i=en(n,oo(Ws));r|=u}return qi(e,r,t,n,i)}));function Cs(t,e,n){var r,s,a,u,c,l,f=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new Ot(o);function _(e){var n=r,o=s;return r=s=i,f=e,u=t.apply(o,n)}function g(t){return f=t,c=Fo(m,e),h?_(t):u}function y(t){var n=t-l;return l===i||n>=e||n<0||p&&t-f>=a}function m(){var t=Os();if(y(t))return S(t);c=Fo(m,function(t){var n=e-(t-l);return p?mn(n,a-(t-f)):n}(t))}function S(t){return c=i,d&&r?_(t):(r=s=i,u)}function E(){var t=Os(),n=y(t);if(r=arguments,s=this,l=t,n){if(c===i)return g(l);if(p)return Ei(c),c=Fo(m,e),_(l)}return c===i&&(c=Fo(m,e)),u}return e=ya(e)||0,ea(n)&&(h=!!n.leading,a=(p="maxWait"in n)?yn(ya(n.maxWait)||0,e):a,d="trailing"in n?!!n.trailing:d),E.cancel=function(){c!==i&&Ei(c),f=0,r=l=s=c=i},E.flush=function(){return c===i?u:S(Os())},E}var Ls=zr((function(t,e){return cr(t,1,e)})),Ps=zr((function(t,e,n){return cr(t,ya(e)||0,n)}));function Ds(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Ot(o);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(Ds.Cache||Vn),n}function xs(t){if("function"!=typeof t)throw new Ot(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Ds.Cache=Vn;var ks=mi((function(t,e){var n=(e=1==e.length&&Ys(e[0])?Ae(e[0],He(so())):Ae(gr(e,1),He(so()))).length;return zr((function(r){for(var i=-1,o=mn(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return ye(t,this,r)}))})),Ms=zr((function(t,e){var n=en(e,oo(Ms));return qi(t,u,i,e,n)})),Bs=zr((function(t,e){var n=en(e,oo(Bs));return qi(t,64,i,e,n)})),Us=to((function(t,e){return qi(t,256,i,i,i,e)}));function js(t,e){return t===e||t!=t&&e!=e}var Gs=$i(Ar),Hs=$i((function(t,e){return t>=e})),$s=Fr(function(){return arguments}())?Fr:function(t){return na(t)&&Lt.call(t,"callee")&&!te.call(t,"callee")},Ys=r.isArray,Vs=fe?He(fe):function(t){return na(t)&&wr(t)==W};function Ks(t){return null!=t&&ta(t.length)&&!Js(t)}function zs(t){return na(t)&&Ks(t)}var qs=pn||yu,Xs=he?He(he):function(t){return na(t)&&wr(t)==m};function Zs(t){if(!na(t))return!1;var e=wr(t);return e==S||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!oa(t)}function Js(t){if(!ea(t))return!1;var e=wr(t);return e==E||e==v||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Qs(t){return"number"==typeof t&&t==_a(t)}function ta(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=f}function ea(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function na(t){return null!=t&&"object"==typeof t}var ra=pe?He(pe):function(t){return na(t)&&ho(t)==I};function ia(t){return"number"==typeof t||na(t)&&wr(t)==b}function oa(t){if(!na(t)||wr(t)!=w)return!1;var e=Vt(t);if(null===e)return!0;var n=Lt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Ct.call(n)==kt}var sa=de?He(de):function(t){return na(t)&&wr(t)==T},aa=_e?He(_e):function(t){return na(t)&&ho(t)==O};function ua(t){return"string"==typeof t||!Ys(t)&&na(t)&&wr(t)==R}function ca(t){return"symbol"==typeof t||na(t)&&wr(t)==N}var la=ge?He(ge):function(t){return na(t)&&ta(t.length)&&!!Jt[wr(t)]},fa=$i(xr),ha=$i((function(t,e){return t<=e}));function pa(t){if(!t)return[];if(Ks(t))return ua(t)?sn(t):Oi(t);if(se&&t[se])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[se]());var e=ho(t);return(e==I?Qe:e==O?nn:ja)(t)}function da(t){return t?(t=ya(t))===l||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function _a(t){var e=da(t),n=e%1;return e==e?n?e-n:e:0}function ga(t){return t?sr(_a(t),0,p):0}function ya(t){if("number"==typeof t)return t;if(ca(t))return h;if(ea(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=ea(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Ge(t);var n=dt.test(t);return n||gt.test(t)?ne(t.slice(2),n?2:8):pt.test(t)?h:+t}function ma(t){return Ri(t,La(t))}function Sa(t){return null==t?"":ai(t)}var Ea=Fi((function(t,e){if(Io(e)||Ks(e))Ri(e,Ca(e),t);else for(var n in e)Lt.call(e,n)&&tr(t,n,e[n])})),va=Fi((function(t,e){Ri(e,La(e),t)})),Ia=Fi((function(t,e,n,r){Ri(e,La(e),t,r)})),ba=Fi((function(t,e,n,r){Ri(e,Ca(e),t,r)})),wa=to(or),Aa=zr((function(t,e){t=wt(t);var n=-1,r=e.length,o=r>2?e[2]:i;for(o&&mo(e[0],e[1],o)&&(r=1);++n<r;)for(var s=e[n],a=La(s),u=-1,c=a.length;++u<c;){var l=a[u],f=t[l];(f===i||js(f,Ft[l])&&!Lt.call(t,l))&&(t[l]=s[l])}return t})),Ta=zr((function(t){return t.push(i,Zi),ye(Da,i,t)}));function Oa(t,e,n){var r=null==t?i:Ir(t,e);return r===i?n:r}function Ra(t,e){return null!=t&&po(t,e,Or)}var Na=Bi((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=xt.call(e)),t[e]=n}),eu(iu)),Fa=Bi((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=xt.call(e)),Lt.call(t,e)?t[e].push(n):t[e]=[n]}),so),Wa=zr(Nr);function Ca(t){return Ks(t)?qn(t):Dr(t)}function La(t){return Ks(t)?qn(t,!0):function(t){if(!ea(t))return function(t){var e=[];if(null!=t)for(var n in wt(t))e.push(n);return e}(t);var e=Io(t),n=[];for(var r in t)("constructor"!=r||!e&&Lt.call(t,r))&&n.push(r);return n}(t)}var Pa=Fi((function(t,e,n){Ur(t,e,n)})),Da=Fi((function(t,e,n,r){Ur(t,e,n,r)})),xa=to((function(t,e){var n={};if(null==t)return n;var r=!1;e=Ae(e,(function(e){return e=yi(e,t),r||(r=e.length>1),e})),Ri(t,no(t),n),r&&(n=ar(n,7,Ji));for(var i=e.length;i--;)ci(n,e[i]);return n})),ka=to((function(t,e){return null==t?{}:function(t,e){return Hr(t,e,(function(e,n){return Ra(t,n)}))}(t,e)}));function Ma(t,e){if(null==t)return{};var n=Ae(no(t),(function(t){return[t]}));return e=so(e),Hr(t,n,(function(t,n){return e(t,n[0])}))}var Ba=zi(Ca),Ua=zi(La);function ja(t){return null==t?[]:$e(t,Ca(t))}var Ga=Pi((function(t,e,n){return e=e.toLowerCase(),t+(n?Ha(e):e)}));function Ha(t){return Za(Sa(t).toLowerCase())}function $a(t){return(t=Sa(t))&&t.replace(mt,qe).replace(Yt,"")}var Ya=Pi((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Va=Pi((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Ka=Li("toLowerCase"),za=Pi((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()})),qa=Pi((function(t,e,n){return t+(n?" ":"")+Za(e)})),Xa=Pi((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Za=Li("toUpperCase");function Ja(t,e,n){return t=Sa(t),(e=n?i:e)===i?function(t){return qt.test(t)}(t)?function(t){return t.match(Kt)||[]}(t):function(t){return t.match(ut)||[]}(t):t.match(e)||[]}var Qa=zr((function(t,e){try{return ye(t,i,e)}catch(t){return Zs(t)?t:new vt(t)}})),tu=to((function(t,e){return Se(e,(function(e){e=Mo(e),ir(t,e,Fs(t[e],t))})),t}));function eu(t){return function(){return t}}var nu=ki(),ru=ki(!0);function iu(t){return t}function ou(t){return Pr("function"==typeof t?t:ar(t,1))}var su=zr((function(t,e){return function(n){return Nr(n,t,e)}})),au=zr((function(t,e){return function(n){return Nr(t,n,e)}}));function uu(t,e,n){var r=Ca(e),i=vr(e,r);null!=n||ea(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=vr(e,Ca(e)));var o=!(ea(n)&&"chain"in n&&!n.chain),s=Js(t);return Se(i,(function(n){var r=e[n];t[n]=r,s&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=Oi(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,Te([this.value()],arguments))})})),t}function cu(){}var lu=ji(Ae),fu=ji(ve),hu=ji(Ne);function pu(t){return So(t)?ke(Mo(t)):function(t){return function(e){return Ir(e,t)}}(t)}var du=Hi(),_u=Hi(!0);function gu(){return[]}function yu(){return!1}var mu,Su=Ui((function(t,e){return t+e}),0),Eu=Vi("ceil"),vu=Ui((function(t,e){return t/e}),1),Iu=Vi("floor"),bu=Ui((function(t,e){return t*e}),1),wu=Vi("round"),Au=Ui((function(t,e){return t-e}),0);return Bn.after=function(t,e){if("function"!=typeof e)throw new Ot(o);return t=_a(t),function(){if(--t<1)return e.apply(this,arguments)}},Bn.ary=Rs,Bn.assign=Ea,Bn.assignIn=va,Bn.assignInWith=Ia,Bn.assignWith=ba,Bn.at=wa,Bn.before=Ns,Bn.bind=Fs,Bn.bindAll=tu,Bn.bindKey=Ws,Bn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Ys(t)?t:[t]},Bn.chain=ps,Bn.chunk=function(t,e,n){e=(n?mo(t,e,n):e===i)?1:yn(_a(e),0);var o=null==t?0:t.length;if(!o||e<1)return[];for(var s=0,a=0,u=r(ln(o/e));s<o;)u[a++]=ei(t,s,s+=e);return u},Bn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},Bn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return Te(Ys(n)?Oi(n):[n],gr(e,1))},Bn.cond=function(t){var e=null==t?0:t.length,n=so();return t=e?Ae(t,(function(t){if("function"!=typeof t[1])throw new Ot(o);return[n(t[0]),t[1]]})):[],zr((function(n){for(var r=-1;++r<e;){var i=t[r];if(ye(i[0],this,n))return ye(i[1],this,n)}}))},Bn.conforms=function(t){return function(t){var e=Ca(t);return function(n){return ur(n,t,e)}}(ar(t,1))},Bn.constant=eu,Bn.countBy=gs,Bn.create=function(t,e){var n=Un(t);return null==e?n:rr(n,e)},Bn.curry=function t(e,n,r){var o=qi(e,8,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},Bn.curryRight=function t(e,n,r){var o=qi(e,16,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},Bn.debounce=Cs,Bn.defaults=Aa,Bn.defaultsDeep=Ta,Bn.defer=Ls,Bn.delay=Ps,Bn.difference=jo,Bn.differenceBy=Go,Bn.differenceWith=Ho,Bn.drop=function(t,e,n){var r=null==t?0:t.length;return r?ei(t,(e=n||e===i?1:_a(e))<0?0:e,r):[]},Bn.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?ei(t,0,(e=r-(e=n||e===i?1:_a(e)))<0?0:e):[]},Bn.dropRightWhile=function(t,e){return t&&t.length?fi(t,so(e,3),!0,!0):[]},Bn.dropWhile=function(t,e){return t&&t.length?fi(t,so(e,3),!0):[]},Bn.fill=function(t,e,n,r){var o=null==t?0:t.length;return o?(n&&"number"!=typeof n&&mo(t,e,n)&&(n=0,r=o),function(t,e,n,r){var o=t.length;for((n=_a(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:_a(r))<0&&(r+=o),r=n>r?0:ga(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Bn.filter=function(t,e){return(Ys(t)?Ie:_r)(t,so(e,3))},Bn.flatMap=function(t,e){return gr(ws(t,e),1)},Bn.flatMapDeep=function(t,e){return gr(ws(t,e),l)},Bn.flatMapDepth=function(t,e,n){return n=n===i?1:_a(n),gr(ws(t,e),n)},Bn.flatten=Vo,Bn.flattenDeep=function(t){return null!=t&&t.length?gr(t,l):[]},Bn.flattenDepth=function(t,e){return null!=t&&t.length?gr(t,e=e===i?1:_a(e)):[]},Bn.flip=function(t){return qi(t,512)},Bn.flow=nu,Bn.flowRight=ru,Bn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},Bn.functions=function(t){return null==t?[]:vr(t,Ca(t))},Bn.functionsIn=function(t){return null==t?[]:vr(t,La(t))},Bn.groupBy=vs,Bn.initial=function(t){return null!=t&&t.length?ei(t,0,-1):[]},Bn.intersection=zo,Bn.intersectionBy=qo,Bn.intersectionWith=Xo,Bn.invert=Na,Bn.invertBy=Fa,Bn.invokeMap=Is,Bn.iteratee=ou,Bn.keyBy=bs,Bn.keys=Ca,Bn.keysIn=La,Bn.map=ws,Bn.mapKeys=function(t,e){var n={};return e=so(e,3),Sr(t,(function(t,r,i){ir(n,e(t,r,i),t)})),n},Bn.mapValues=function(t,e){var n={};return e=so(e,3),Sr(t,(function(t,r,i){ir(n,r,e(t,r,i))})),n},Bn.matches=function(t){return Mr(ar(t,1))},Bn.matchesProperty=function(t,e){return Br(t,ar(e,1))},Bn.memoize=Ds,Bn.merge=Pa,Bn.mergeWith=Da,Bn.method=su,Bn.methodOf=au,Bn.mixin=uu,Bn.negate=xs,Bn.nthArg=function(t){return t=_a(t),zr((function(e){return jr(e,t)}))},Bn.omit=xa,Bn.omitBy=function(t,e){return Ma(t,xs(so(e)))},Bn.once=function(t){return Ns(2,t)},Bn.orderBy=function(t,e,n,r){return null==t?[]:(Ys(e)||(e=null==e?[]:[e]),Ys(n=r?i:n)||(n=null==n?[]:[n]),Gr(t,e,n))},Bn.over=lu,Bn.overArgs=ks,Bn.overEvery=fu,Bn.overSome=hu,Bn.partial=Ms,Bn.partialRight=Bs,Bn.partition=As,Bn.pick=ka,Bn.pickBy=Ma,Bn.property=pu,Bn.propertyOf=function(t){return function(e){return null==t?i:Ir(t,e)}},Bn.pull=Jo,Bn.pullAll=Qo,Bn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?$r(t,e,so(n,2)):t},Bn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?$r(t,e,i,n):t},Bn.pullAt=ts,Bn.range=du,Bn.rangeRight=_u,Bn.rearg=Us,Bn.reject=function(t,e){return(Ys(t)?Ie:_r)(t,xs(so(e,3)))},Bn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=so(e,3);++r<o;){var s=t[r];e(s,r,t)&&(n.push(s),i.push(r))}return Yr(t,i),n},Bn.rest=function(t,e){if("function"!=typeof t)throw new Ot(o);return zr(t,e=e===i?e:_a(e))},Bn.reverse=es,Bn.sampleSize=function(t,e,n){return e=(n?mo(t,e,n):e===i)?1:_a(e),(Ys(t)?Zn:Xr)(t,e)},Bn.set=function(t,e,n){return null==t?t:Zr(t,e,n)},Bn.setWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:Zr(t,e,n,r)},Bn.shuffle=function(t){return(Ys(t)?Jn:ti)(t)},Bn.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&mo(t,e,n)?(e=0,n=r):(e=null==e?0:_a(e),n=n===i?r:_a(n)),ei(t,e,n)):[]},Bn.sortBy=Ts,Bn.sortedUniq=function(t){return t&&t.length?oi(t):[]},Bn.sortedUniqBy=function(t,e){return t&&t.length?oi(t,so(e,2)):[]},Bn.split=function(t,e,n){return n&&"number"!=typeof n&&mo(t,e,n)&&(e=n=i),(n=n===i?p:n>>>0)?(t=Sa(t))&&("string"==typeof e||null!=e&&!sa(e))&&!(e=ai(e))&&Je(t)?Si(sn(t),0,n):t.split(e,n):[]},Bn.spread=function(t,e){if("function"!=typeof t)throw new Ot(o);return e=null==e?0:yn(_a(e),0),zr((function(n){var r=n[e],i=Si(n,0,e);return r&&Te(i,r),ye(t,this,i)}))},Bn.tail=function(t){var e=null==t?0:t.length;return e?ei(t,1,e):[]},Bn.take=function(t,e,n){return t&&t.length?ei(t,0,(e=n||e===i?1:_a(e))<0?0:e):[]},Bn.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?ei(t,(e=r-(e=n||e===i?1:_a(e)))<0?0:e,r):[]},Bn.takeRightWhile=function(t,e){return t&&t.length?fi(t,so(e,3),!1,!0):[]},Bn.takeWhile=function(t,e){return t&&t.length?fi(t,so(e,3)):[]},Bn.tap=function(t,e){return e(t),t},Bn.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new Ot(o);return ea(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Cs(t,e,{leading:r,maxWait:e,trailing:i})},Bn.thru=ds,Bn.toArray=pa,Bn.toPairs=Ba,Bn.toPairsIn=Ua,Bn.toPath=function(t){return Ys(t)?Ae(t,Mo):ca(t)?[t]:Oi(ko(Sa(t)))},Bn.toPlainObject=ma,Bn.transform=function(t,e,n){var r=Ys(t),i=r||qs(t)||la(t);if(e=so(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:ea(t)&&Js(o)?Un(Vt(t)):{}}return(i?Se:Sr)(t,(function(t,r,i){return e(n,t,r,i)})),n},Bn.unary=function(t){return Rs(t,1)},Bn.union=ns,Bn.unionBy=rs,Bn.unionWith=is,Bn.uniq=function(t){return t&&t.length?ui(t):[]},Bn.uniqBy=function(t,e){return t&&t.length?ui(t,so(e,2)):[]},Bn.uniqWith=function(t,e){return e="function"==typeof e?e:i,t&&t.length?ui(t,i,e):[]},Bn.unset=function(t,e){return null==t||ci(t,e)},Bn.unzip=os,Bn.unzipWith=ss,Bn.update=function(t,e,n){return null==t?t:li(t,e,gi(n))},Bn.updateWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:li(t,e,gi(n),r)},Bn.values=ja,Bn.valuesIn=function(t){return null==t?[]:$e(t,La(t))},Bn.without=as,Bn.words=Ja,Bn.wrap=function(t,e){return Ms(gi(e),t)},Bn.xor=us,Bn.xorBy=cs,Bn.xorWith=ls,Bn.zip=fs,Bn.zipObject=function(t,e){return di(t||[],e||[],tr)},Bn.zipObjectDeep=function(t,e){return di(t||[],e||[],Zr)},Bn.zipWith=hs,Bn.entries=Ba,Bn.entriesIn=Ua,Bn.extend=va,Bn.extendWith=Ia,uu(Bn,Bn),Bn.add=Su,Bn.attempt=Qa,Bn.camelCase=Ga,Bn.capitalize=Ha,Bn.ceil=Eu,Bn.clamp=function(t,e,n){return n===i&&(n=e,e=i),n!==i&&(n=(n=ya(n))==n?n:0),e!==i&&(e=(e=ya(e))==e?e:0),sr(ya(t),e,n)},Bn.clone=function(t){return ar(t,4)},Bn.cloneDeep=function(t){return ar(t,5)},Bn.cloneDeepWith=function(t,e){return ar(t,5,e="function"==typeof e?e:i)},Bn.cloneWith=function(t,e){return ar(t,4,e="function"==typeof e?e:i)},Bn.conformsTo=function(t,e){return null==e||ur(t,e,Ca(e))},Bn.deburr=$a,Bn.defaultTo=function(t,e){return null==t||t!=t?e:t},Bn.divide=vu,Bn.endsWith=function(t,e,n){t=Sa(t),e=ai(e);var r=t.length,o=n=n===i?r:sr(_a(n),0,r);return(n-=e.length)>=0&&t.slice(n,o)==e},Bn.eq=js,Bn.escape=function(t){return(t=Sa(t))&&z.test(t)?t.replace(V,Xe):t},Bn.escapeRegExp=function(t){return(t=Sa(t))&&nt.test(t)?t.replace(et,"\\$&"):t},Bn.every=function(t,e,n){var r=Ys(t)?ve:pr;return n&&mo(t,e,n)&&(e=i),r(t,so(e,3))},Bn.find=ys,Bn.findIndex=$o,Bn.findKey=function(t,e){return We(t,so(e,3),Sr)},Bn.findLast=ms,Bn.findLastIndex=Yo,Bn.findLastKey=function(t,e){return We(t,so(e,3),Er)},Bn.floor=Iu,Bn.forEach=Ss,Bn.forEachRight=Es,Bn.forIn=function(t,e){return null==t?t:yr(t,so(e,3),La)},Bn.forInRight=function(t,e){return null==t?t:mr(t,so(e,3),La)},Bn.forOwn=function(t,e){return t&&Sr(t,so(e,3))},Bn.forOwnRight=function(t,e){return t&&Er(t,so(e,3))},Bn.get=Oa,Bn.gt=Gs,Bn.gte=Hs,Bn.has=function(t,e){return null!=t&&po(t,e,Tr)},Bn.hasIn=Ra,Bn.head=Ko,Bn.identity=iu,Bn.includes=function(t,e,n,r){t=Ks(t)?t:ja(t),n=n&&!r?_a(n):0;var i=t.length;return n<0&&(n=yn(i+n,0)),ua(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&Le(t,e,n)>-1},Bn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:_a(n);return i<0&&(i=yn(r+i,0)),Le(t,e,i)},Bn.inRange=function(t,e,n){return e=da(e),n===i?(n=e,e=0):n=da(n),function(t,e,n){return t>=mn(e,n)&&t<yn(e,n)}(t=ya(t),e,n)},Bn.invoke=Wa,Bn.isArguments=$s,Bn.isArray=Ys,Bn.isArrayBuffer=Vs,Bn.isArrayLike=Ks,Bn.isArrayLikeObject=zs,Bn.isBoolean=function(t){return!0===t||!1===t||na(t)&&wr(t)==y},Bn.isBuffer=qs,Bn.isDate=Xs,Bn.isElement=function(t){return na(t)&&1===t.nodeType&&!oa(t)},Bn.isEmpty=function(t){if(null==t)return!0;if(Ks(t)&&(Ys(t)||"string"==typeof t||"function"==typeof t.splice||qs(t)||la(t)||$s(t)))return!t.length;var e=ho(t);if(e==I||e==O)return!t.size;if(Io(t))return!Dr(t).length;for(var n in t)if(Lt.call(t,n))return!1;return!0},Bn.isEqual=function(t,e){return Wr(t,e)},Bn.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:i)?n(t,e):i;return r===i?Wr(t,e,i,n):!!r},Bn.isError=Zs,Bn.isFinite=function(t){return"number"==typeof t&&dn(t)},Bn.isFunction=Js,Bn.isInteger=Qs,Bn.isLength=ta,Bn.isMap=ra,Bn.isMatch=function(t,e){return t===e||Cr(t,e,uo(e))},Bn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:i,Cr(t,e,uo(e),n)},Bn.isNaN=function(t){return ia(t)&&t!=+t},Bn.isNative=function(t){if(vo(t))throw new vt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Lr(t)},Bn.isNil=function(t){return null==t},Bn.isNull=function(t){return null===t},Bn.isNumber=ia,Bn.isObject=ea,Bn.isObjectLike=na,Bn.isPlainObject=oa,Bn.isRegExp=sa,Bn.isSafeInteger=function(t){return Qs(t)&&t>=-9007199254740991&&t<=f},Bn.isSet=aa,Bn.isString=ua,Bn.isSymbol=ca,Bn.isTypedArray=la,Bn.isUndefined=function(t){return t===i},Bn.isWeakMap=function(t){return na(t)&&ho(t)==F},Bn.isWeakSet=function(t){return na(t)&&"[object WeakSet]"==wr(t)},Bn.join=function(t,e){return null==t?"":_n.call(t,e)},Bn.kebabCase=Ya,Bn.last=Zo,Bn.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=_a(n))<0?yn(r+o,0):mn(o,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,o):Ce(t,De,o,!0)},Bn.lowerCase=Va,Bn.lowerFirst=Ka,Bn.lt=fa,Bn.lte=ha,Bn.max=function(t){return t&&t.length?dr(t,iu,Ar):i},Bn.maxBy=function(t,e){return t&&t.length?dr(t,so(e,2),Ar):i},Bn.mean=function(t){return xe(t,iu)},Bn.meanBy=function(t,e){return xe(t,so(e,2))},Bn.min=function(t){return t&&t.length?dr(t,iu,xr):i},Bn.minBy=function(t,e){return t&&t.length?dr(t,so(e,2),xr):i},Bn.stubArray=gu,Bn.stubFalse=yu,Bn.stubObject=function(){return{}},Bn.stubString=function(){return""},Bn.stubTrue=function(){return!0},Bn.multiply=bu,Bn.nth=function(t,e){return t&&t.length?jr(t,_a(e)):i},Bn.noConflict=function(){return oe._===this&&(oe._=Mt),this},Bn.noop=cu,Bn.now=Os,Bn.pad=function(t,e,n){t=Sa(t);var r=(e=_a(e))?on(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return Gi(fn(i),n)+t+Gi(ln(i),n)},Bn.padEnd=function(t,e,n){t=Sa(t);var r=(e=_a(e))?on(t):0;return e&&r<e?t+Gi(e-r,n):t},Bn.padStart=function(t,e,n){t=Sa(t);var r=(e=_a(e))?on(t):0;return e&&r<e?Gi(e-r,n)+t:t},Bn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),En(Sa(t).replace(rt,""),e||0)},Bn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&mo(t,e,n)&&(e=n=i),n===i&&("boolean"==typeof e?(n=e,e=i):"boolean"==typeof t&&(n=t,t=i)),t===i&&e===i?(t=0,e=1):(t=da(t),e===i?(e=t,t=0):e=da(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var o=vn();return mn(t+o*(e-t+ee("1e-"+((o+"").length-1))),e)}return Vr(t,e)},Bn.reduce=function(t,e,n){var r=Ys(t)?Oe:Be,i=arguments.length<3;return r(t,so(e,4),n,i,fr)},Bn.reduceRight=function(t,e,n){var r=Ys(t)?Re:Be,i=arguments.length<3;return r(t,so(e,4),n,i,hr)},Bn.repeat=function(t,e,n){return e=(n?mo(t,e,n):e===i)?1:_a(e),Kr(Sa(t),e)},Bn.replace=function(){var t=arguments,e=Sa(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Bn.result=function(t,e,n){var r=-1,o=(e=yi(e,t)).length;for(o||(o=1,t=i);++r<o;){var s=null==t?i:t[Mo(e[r])];s===i&&(r=o,s=n),t=Js(s)?s.call(t):s}return t},Bn.round=wu,Bn.runInContext=t,Bn.sample=function(t){return(Ys(t)?Xn:qr)(t)},Bn.size=function(t){if(null==t)return 0;if(Ks(t))return ua(t)?on(t):t.length;var e=ho(t);return e==I||e==O?t.size:Dr(t).length},Bn.snakeCase=za,Bn.some=function(t,e,n){var r=Ys(t)?Ne:ni;return n&&mo(t,e,n)&&(e=i),r(t,so(e,3))},Bn.sortedIndex=function(t,e){return ri(t,e)},Bn.sortedIndexBy=function(t,e,n){return ii(t,e,so(n,2))},Bn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=ri(t,e);if(r<n&&js(t[r],e))return r}return-1},Bn.sortedLastIndex=function(t,e){return ri(t,e,!0)},Bn.sortedLastIndexBy=function(t,e,n){return ii(t,e,so(n,2),!0)},Bn.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=ri(t,e,!0)-1;if(js(t[n],e))return n}return-1},Bn.startCase=qa,Bn.startsWith=function(t,e,n){return t=Sa(t),n=null==n?0:sr(_a(n),0,t.length),e=ai(e),t.slice(n,n+e.length)==e},Bn.subtract=Au,Bn.sum=function(t){return t&&t.length?Ue(t,iu):0},Bn.sumBy=function(t,e){return t&&t.length?Ue(t,so(e,2)):0},Bn.template=function(t,e,n){var r=Bn.templateSettings;n&&mo(t,e,n)&&(e=i),t=Sa(t),e=Ia({},e,r,Xi);var o,s,a=Ia({},e.imports,r.imports,Xi),u=Ca(a),c=$e(a,u),l=0,f=e.interpolate||St,h="__p += '",p=At((e.escape||St).source+"|"+f.source+"|"+(f===Z?ft:St).source+"|"+(e.evaluate||St).source+"|$","g"),d="//# sourceURL="+(Lt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Zt+"]")+"\n";t.replace(p,(function(e,n,r,i,a,u){return r||(r=i),h+=t.slice(l,u).replace(Et,Ze),n&&(o=!0,h+="' +\n__e("+n+") +\n'"),a&&(s=!0,h+="';\n"+a+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=u+e.length,e})),h+="';\n";var _=Lt.call(e,"variable")&&e.variable;if(_){if(ct.test(_))throw new vt("Invalid `variable` option passed into `_.template`")}else h="with (obj) {\n"+h+"\n}\n";h=(s?h.replace(G,""):h).replace(H,"$1").replace($,"$1;"),h="function("+(_||"obj")+") {\n"+(_?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Qa((function(){return It(u,d+"return "+h).apply(i,c)}));if(g.source=h,Zs(g))throw g;return g},Bn.times=function(t,e){if((t=_a(t))<1||t>f)return[];var n=p,r=mn(t,p);e=so(e),t-=p;for(var i=je(r,e);++n<t;)e(n);return i},Bn.toFinite=da,Bn.toInteger=_a,Bn.toLength=ga,Bn.toLower=function(t){return Sa(t).toLowerCase()},Bn.toNumber=ya,Bn.toSafeInteger=function(t){return t?sr(_a(t),-9007199254740991,f):0===t?t:0},Bn.toString=Sa,Bn.toUpper=function(t){return Sa(t).toUpperCase()},Bn.trim=function(t,e,n){if((t=Sa(t))&&(n||e===i))return Ge(t);if(!t||!(e=ai(e)))return t;var r=sn(t),o=sn(e);return Si(r,Ve(r,o),Ke(r,o)+1).join("")},Bn.trimEnd=function(t,e,n){if((t=Sa(t))&&(n||e===i))return t.slice(0,an(t)+1);if(!t||!(e=ai(e)))return t;var r=sn(t);return Si(r,0,Ke(r,sn(e))+1).join("")},Bn.trimStart=function(t,e,n){if((t=Sa(t))&&(n||e===i))return t.replace(rt,"");if(!t||!(e=ai(e)))return t;var r=sn(t);return Si(r,Ve(r,sn(e))).join("")},Bn.truncate=function(t,e){var n=30,r="...";if(ea(e)){var o="separator"in e?e.separator:o;n="length"in e?_a(e.length):n,r="omission"in e?ai(e.omission):r}var s=(t=Sa(t)).length;if(Je(t)){var a=sn(t);s=a.length}if(n>=s)return t;var u=n-on(r);if(u<1)return r;var c=a?Si(a,0,u).join(""):t.slice(0,u);if(o===i)return c+r;if(a&&(u+=c.length-u),sa(o)){if(t.slice(u).search(o)){var l,f=c;for(o.global||(o=At(o.source,Sa(ht.exec(o))+"g")),o.lastIndex=0;l=o.exec(f);)var h=l.index;c=c.slice(0,h===i?u:h)}}else if(t.indexOf(ai(o),u)!=u){var p=c.lastIndexOf(o);p>-1&&(c=c.slice(0,p))}return c+r},Bn.unescape=function(t){return(t=Sa(t))&&K.test(t)?t.replace(Y,un):t},Bn.uniqueId=function(t){var e=++Pt;return Sa(t)+e},Bn.upperCase=Xa,Bn.upperFirst=Za,Bn.each=Ss,Bn.eachRight=Es,Bn.first=Ko,uu(Bn,(mu={},Sr(Bn,(function(t,e){Lt.call(Bn.prototype,e)||(mu[e]=t)})),mu),{chain:!1}),Bn.VERSION="4.17.21",Se(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Bn[t].placeholder=Bn})),Se(["drop","take"],(function(t,e){Hn.prototype[t]=function(n){n=n===i?1:yn(_a(n),0);var r=this.__filtered__&&!e?new Hn(this):this.clone();return r.__filtered__?r.__takeCount__=mn(n,r.__takeCount__):r.__views__.push({size:mn(n,p),type:t+(r.__dir__<0?"Right":"")}),r},Hn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Se(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Hn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:so(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),Se(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Hn.prototype[t]=function(){return this[n](1).value()[0]}})),Se(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Hn.prototype[t]=function(){return this.__filtered__?new Hn(this):this[n](1)}})),Hn.prototype.compact=function(){return this.filter(iu)},Hn.prototype.find=function(t){return this.filter(t).head()},Hn.prototype.findLast=function(t){return this.reverse().find(t)},Hn.prototype.invokeMap=zr((function(t,e){return"function"==typeof t?new Hn(this):this.map((function(n){return Nr(n,t,e)}))})),Hn.prototype.reject=function(t){return this.filter(xs(so(t)))},Hn.prototype.slice=function(t,e){t=_a(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Hn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==i&&(n=(e=_a(e))<0?n.dropRight(-e):n.take(e-t)),n)},Hn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Hn.prototype.toArray=function(){return this.take(p)},Sr(Hn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),o=Bn[r?"take"+("last"==e?"Right":""):e],s=r||/^find/.test(e);o&&(Bn.prototype[e]=function(){var e=this.__wrapped__,a=r?[1]:arguments,u=e instanceof Hn,c=a[0],l=u||Ys(e),f=function(t){var e=o.apply(Bn,Te([t],a));return r&&h?e[0]:e};l&&n&&"function"==typeof c&&1!=c.length&&(u=l=!1);var h=this.__chain__,p=!!this.__actions__.length,d=s&&!h,_=u&&!p;if(!s&&l){e=_?e:new Hn(this);var g=t.apply(e,a);return g.__actions__.push({func:ds,args:[f],thisArg:i}),new Gn(g,h)}return d&&_?t.apply(this,a):(g=this.thru(f),d?r?g.value()[0]:g.value():g)})})),Se(["pop","push","shift","sort","splice","unshift"],(function(t){var e=Rt[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Bn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(Ys(i)?i:[],t)}return this[n]((function(n){return e.apply(Ys(n)?n:[],t)}))}})),Sr(Hn.prototype,(function(t,e){var n=Bn[e];if(n){var r=n.name+"";Lt.call(Fn,r)||(Fn[r]=[]),Fn[r].push({name:e,func:n})}})),Fn[Mi(i,2).name]=[{name:"wrapper",func:i}],Hn.prototype.clone=function(){var t=new Hn(this.__wrapped__);return t.__actions__=Oi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Oi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Oi(this.__views__),t},Hn.prototype.reverse=function(){if(this.__filtered__){var t=new Hn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Hn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Ys(t),r=e<0,i=n?t.length:0,o=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],s=o.size;switch(o.type){case"drop":t+=s;break;case"dropRight":e-=s;break;case"take":e=mn(e,t+s);break;case"takeRight":t=yn(t,e-s)}}return{start:t,end:e}}(0,i,this.__views__),s=o.start,a=o.end,u=a-s,c=r?a:s-1,l=this.__iteratees__,f=l.length,h=0,p=mn(u,this.__takeCount__);if(!n||!r&&i==u&&p==u)return hi(t,this.__actions__);var d=[];t:for(;u--&&h<p;){for(var _=-1,g=t[c+=e];++_<f;){var y=l[_],m=y.iteratee,S=y.type,E=m(g);if(2==S)g=E;else if(!E){if(1==S)continue t;break t}}d[h++]=g}return d},Bn.prototype.at=_s,Bn.prototype.chain=function(){return ps(this)},Bn.prototype.commit=function(){return new Gn(this.value(),this.__chain__)},Bn.prototype.next=function(){this.__values__===i&&(this.__values__=pa(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},Bn.prototype.plant=function(t){for(var e,n=this;n instanceof jn;){var r=Uo(n);r.__index__=0,r.__values__=i,e?o.__wrapped__=r:e=r;var o=r;n=n.__wrapped__}return o.__wrapped__=t,e},Bn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Hn){var e=t;return this.__actions__.length&&(e=new Hn(this)),(e=e.reverse()).__actions__.push({func:ds,args:[es],thisArg:i}),new Gn(e,this.__chain__)}return this.thru(es)},Bn.prototype.toJSON=Bn.prototype.valueOf=Bn.prototype.value=function(){return hi(this.__wrapped__,this.__actions__)},Bn.prototype.first=Bn.prototype.head,se&&(Bn.prototype[se]=function(){return this}),Bn}();oe._=cn,(r=function(){return cn}.call(e,n,e,t))===i||(t.exports=r)}.call(this)},7824:t=>{var e=1e3,n=60*e,r=60*n,i=24*r;function o(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,s){s=s||{};var a,u,c=typeof t;if("string"===c&&t.length>0)return function(t){if(!((t=String(t)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(o){var s=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*r;case"minutes":case"minute":case"mins":case"min":case"m":return s*n;case"seconds":case"second":case"secs":case"sec":case"s":return s*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(t);if("number"===c&&isFinite(t))return s.long?(a=t,(u=Math.abs(a))>=i?o(a,u,i,"day"):u>=r?o(a,u,r,"hour"):u>=n?o(a,u,n,"minute"):u>=e?o(a,u,e,"second"):a+" ms"):function(t){var o=Math.abs(t);return o>=i?Math.round(t/i)+"d":o>=r?Math.round(t/r)+"h":o>=n?Math.round(t/n)+"m":o>=e?Math.round(t/e)+"s":t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},4244:t=>{"use strict";var e=function(t){return t!=t};t.exports=function(t,n){return 0===t&&0===n?1/t==1/n:t===n||!(!e(t)||!e(n))}},609:(t,e,n)=>{"use strict";var r=n(4289),i=n(5559),o=n(4244),s=n(5624),a=n(2281),u=i(s(),Object);r(u,{getPolyfill:s,implementation:o,shim:a}),t.exports=u},5624:(t,e,n)=>{"use strict";var r=n(4244);t.exports=function(){return"function"==typeof Object.is?Object.is:r}},2281:(t,e,n)=>{"use strict";var r=n(5624),i=n(4289);t.exports=function(){var t=r();return i(Object,{is:t},{is:function(){return Object.is!==t}}),t}},8987:(t,e,n)=>{"use strict";var r;if(!Object.keys){var i=Object.prototype.hasOwnProperty,o=Object.prototype.toString,s=n(1414),a=Object.prototype.propertyIsEnumerable,u=!a.call({toString:null},"toString"),c=a.call((function(){}),"prototype"),l=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(t){var e=t.constructor;return e&&e.prototype===t},h={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},p=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!h["$"+t]&&i.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{f(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();r=function(t){var e=null!==t&&"object"==typeof t,n="[object Function]"===o.call(t),r=s(t),a=e&&"[object String]"===o.call(t),h=[];if(!e&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var d=c&&n;if(a&&t.length>0&&!i.call(t,0))for(var _=0;_<t.length;++_)h.push(String(_));if(r&&t.length>0)for(var g=0;g<t.length;++g)h.push(String(g));else for(var y in t)d&&"prototype"===y||!i.call(t,y)||h.push(String(y));if(u)for(var m=function(t){if("undefined"==typeof window||!p)return f(t);try{return f(t)}catch(t){return!1}}(t),S=0;S<l.length;++S)m&&"constructor"===l[S]||!i.call(t,l[S])||h.push(l[S]);return h}}t.exports=r},2215:(t,e,n)=>{"use strict";var r=Array.prototype.slice,i=n(1414),o=Object.keys,s=o?function(t){return o(t)}:n(8987),a=Object.keys;s.shim=function(){if(Object.keys){var t=function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2);t||(Object.keys=function(t){return i(t)?a(r.call(t)):a(t)})}else Object.keys=s;return Object.keys||s},t.exports=s},1414:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){var n=e.call(t),r="[object Arguments]"===n;return r||(r="[object Array]"!==n&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===e.call(t.callee)),r}},6470:(t,e,n)=>{"use strict";var r=n(4155);function i(t){if("string"!=typeof t)throw new TypeError("Path must be a string. Received "+JSON.stringify(t))}function o(t,e){for(var n,r="",i=0,o=-1,s=0,a=0;a<=t.length;++a){if(a<t.length)n=t.charCodeAt(a);else{if(47===n)break;n=47}if(47===n){if(o===a-1||1===s);else if(o!==a-1&&2===s){if(r.length<2||2!==i||46!==r.charCodeAt(r.length-1)||46!==r.charCodeAt(r.length-2))if(r.length>2){var u=r.lastIndexOf("/");if(u!==r.length-1){-1===u?(r="",i=0):i=(r=r.slice(0,u)).length-1-r.lastIndexOf("/"),o=a,s=0;continue}}else if(2===r.length||1===r.length){r="",i=0,o=a,s=0;continue}e&&(r.length>0?r+="/..":r="..",i=2)}else r.length>0?r+="/"+t.slice(o+1,a):r=t.slice(o+1,a),i=a-o-1;o=a,s=0}else 46===n&&-1!==s?++s:s=-1}return r}var s={resolve:function(){for(var t,e="",n=!1,s=arguments.length-1;s>=-1&&!n;s--){var a;s>=0?a=arguments[s]:(void 0===t&&(t=r.cwd()),a=t),i(a),0!==a.length&&(e=a+"/"+e,n=47===a.charCodeAt(0))}return e=o(e,!n),n?e.length>0?"/"+e:"/":e.length>0?e:"."},normalize:function(t){if(i(t),0===t.length)return".";var e=47===t.charCodeAt(0),n=47===t.charCodeAt(t.length-1);return 0!==(t=o(t,!e)).length||e||(t="."),t.length>0&&n&&(t+="/"),e?"/"+t:t},isAbsolute:function(t){return i(t),t.length>0&&47===t.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var t,e=0;e<arguments.length;++e){var n=arguments[e];i(n),n.length>0&&(void 0===t?t=n:t+="/"+n)}return void 0===t?".":s.normalize(t)},relative:function(t,e){if(i(t),i(e),t===e)return"";if((t=s.resolve(t))===(e=s.resolve(e)))return"";for(var n=1;n<t.length&&47===t.charCodeAt(n);++n);for(var r=t.length,o=r-n,a=1;a<e.length&&47===e.charCodeAt(a);++a);for(var u=e.length-a,c=o<u?o:u,l=-1,f=0;f<=c;++f){if(f===c){if(u>c){if(47===e.charCodeAt(a+f))return e.slice(a+f+1);if(0===f)return e.slice(a+f)}else o>c&&(47===t.charCodeAt(n+f)?l=f:0===f&&(l=0));break}var h=t.charCodeAt(n+f);if(h!==e.charCodeAt(a+f))break;47===h&&(l=f)}var p="";for(f=n+l+1;f<=r;++f)f!==r&&47!==t.charCodeAt(f)||(0===p.length?p+="..":p+="/..");return p.length>0?p+e.slice(a+l):(a+=l,47===e.charCodeAt(a)&&++a,e.slice(a))},_makeLong:function(t){return t},dirname:function(t){if(i(t),0===t.length)return".";for(var e=t.charCodeAt(0),n=47===e,r=-1,o=!0,s=t.length-1;s>=1;--s)if(47===(e=t.charCodeAt(s))){if(!o){r=s;break}}else o=!1;return-1===r?n?"/":".":n&&1===r?"//":t.slice(0,r)},basename:function(t,e){if(void 0!==e&&"string"!=typeof e)throw new TypeError('"ext" argument must be a string');i(t);var n,r=0,o=-1,s=!0;if(void 0!==e&&e.length>0&&e.length<=t.length){if(e.length===t.length&&e===t)return"";var a=e.length-1,u=-1;for(n=t.length-1;n>=0;--n){var c=t.charCodeAt(n);if(47===c){if(!s){r=n+1;break}}else-1===u&&(s=!1,u=n+1),a>=0&&(c===e.charCodeAt(a)?-1==--a&&(o=n):(a=-1,o=u))}return r===o?o=u:-1===o&&(o=t.length),t.slice(r,o)}for(n=t.length-1;n>=0;--n)if(47===t.charCodeAt(n)){if(!s){r=n+1;break}}else-1===o&&(s=!1,o=n+1);return-1===o?"":t.slice(r,o)},extname:function(t){i(t);for(var e=-1,n=0,r=-1,o=!0,s=0,a=t.length-1;a>=0;--a){var u=t.charCodeAt(a);if(47!==u)-1===r&&(o=!1,r=a+1),46===u?-1===e?e=a:1!==s&&(s=1):-1!==e&&(s=-1);else if(!o){n=a+1;break}}return-1===e||-1===r||0===s||1===s&&e===r-1&&e===n+1?"":t.slice(e,r)},format:function(t){if(null===t||"object"!=typeof t)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof t);return function(t,e){var n=e.dir||e.root,r=e.base||(e.name||"")+(e.ext||"");return n?n===e.root?n+r:n+"/"+r:r}(0,t)},parse:function(t){i(t);var e={root:"",dir:"",base:"",ext:"",name:""};if(0===t.length)return e;var n,r=t.charCodeAt(0),o=47===r;o?(e.root="/",n=1):n=0;for(var s=-1,a=0,u=-1,c=!0,l=t.length-1,f=0;l>=n;--l)if(47!==(r=t.charCodeAt(l)))-1===u&&(c=!1,u=l+1),46===r?-1===s?s=l:1!==f&&(f=1):-1!==s&&(f=-1);else if(!c){a=l+1;break}return-1===s||-1===u||0===f||1===f&&s===u-1&&s===a+1?-1!==u&&(e.base=e.name=0===a&&o?t.slice(1,u):t.slice(a,u)):(0===a&&o?(e.name=t.slice(1,s),e.base=t.slice(1,u)):(e.name=t.slice(a,s),e.base=t.slice(a,u)),e.ext=t.slice(s,u)),a>0?e.dir=t.slice(0,a-1):o&&(e.dir="/"),e},sep:"/",delimiter:":",win32:null,posix:null};s.posix=s,t.exports=s},4155:t=>{var e,n,r=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(t){n=o}}();var a,u=[],c=!1,l=-1;function f(){c&&a&&(c=!1,a.length?u=a.concat(u):l=-1,u.length&&h())}function h(){if(!c){var t=s(f);c=!0;for(var e=u.length;e;){for(a=u,u=[];++l<e;)a&&a[l].run();l=-1,e=u.length}a=null,c=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function d(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new p(t,e)),1!==u.length||c||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=d,r.addListener=d,r.once=d,r.off=d,r.removeListener=d,r.removeAllListeners=d,r.emit=d,r.prependListener=d,r.prependOnceListener=d,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},2587:t=>{"use strict";function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,n,r,i){n=n||"&",r=r||"=";var o={};if("string"!=typeof t||0===t.length)return o;var s=/\+/g;t=t.split(n);var a=1e3;i&&"number"==typeof i.maxKeys&&(a=i.maxKeys);var u=t.length;a>0&&u>a&&(u=a);for(var c=0;c<u;++c){var l,f,h,p,d=t[c].replace(s,"%20"),_=d.indexOf(r);_>=0?(l=d.substr(0,_),f=d.substr(_+1)):(l=d,f=""),h=decodeURIComponent(l),p=decodeURIComponent(f),e(o,h)?Array.isArray(o[h])?o[h].push(p):o[h]=[o[h],p]:o[h]=p}return o}},2182:t=>{"use strict";var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,n,r,i){return n=n||"&",r=r||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map((function(i){var o=encodeURIComponent(e(i))+r;return Array.isArray(t[i])?t[i].map((function(t){return o+encodeURIComponent(e(t))})).join(n):o+encodeURIComponent(e(t[i]))})).join(n):i?encodeURIComponent(e(i))+r+encodeURIComponent(e(t)):""}},7673:(t,e,n)=>{"use strict";e.decode=e.parse=n(2587),e.encode=e.stringify=n(2182)},1798:(t,e,n)=>{"use strict";var r=n(4155),i=65536,o=n(9509).Buffer,s=n.g.crypto||n.g.msCrypto;s&&s.getRandomValues?t.exports=function(t,e){if(t>4294967295)throw new RangeError("requested too many random bytes");var n=o.allocUnsafe(t);if(t>0)if(t>i)for(var a=0;a<t;a+=i)s.getRandomValues(n.slice(a,a+i));else s.getRandomValues(n);return"function"==typeof e?r.nextTick((function(){e(null,n)})):n}:t.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}},7963:(t,e,n)=>{"use strict";var r=n(4155);function i(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var o=n(9509),s=n(1798),a=o.Buffer,u=o.kMaxLength,c=n.g.crypto||n.g.msCrypto,l=Math.pow(2,32)-1;function f(t,e){if("number"!=typeof t||t!=t)throw new TypeError("offset must be a number");if(t>l||t<0)throw new TypeError("offset must be a uint32");if(t>u||t>e)throw new RangeError("offset out of range")}function h(t,e,n){if("number"!=typeof t||t!=t)throw new TypeError("size must be a number");if(t>l||t<0)throw new TypeError("size must be a uint32");if(t+e>n||t>u)throw new RangeError("buffer too small")}function p(t,e,n,i){if(r.browser){var o=t.buffer,a=new Uint8Array(o,e,n);return c.getRandomValues(a),i?void r.nextTick((function(){i(null,t)})):t}if(!i)return s(n).copy(t,e),t;s(n,(function(n,r){if(n)return i(n);r.copy(t,e),i(null,t)}))}c&&c.getRandomValues||!r.browser?(e.randomFill=function(t,e,r,i){if(!(a.isBuffer(t)||t instanceof n.g.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"==typeof e)i=e,e=0,r=t.length;else if("function"==typeof r)i=r,r=t.length-e;else if("function"!=typeof i)throw new TypeError('"cb" argument must be a function');return f(e,t.length),h(r,e,t.length),p(t,e,r,i)},e.randomFillSync=function(t,e,r){if(void 0===e&&(e=0),!(a.isBuffer(t)||t instanceof n.g.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');return f(e,t.length),void 0===r&&(r=t.length-e),h(r,e,t.length),p(t,e,r)}):(e.randomFill=i,e.randomFillSync=i)},4281:t=>{"use strict";var e={};function n(t,n,r){r||(r=Error);var i=function(t){var e,r;function i(e,r,i){return t.call(this,function(t,e,r){return"string"==typeof n?n:n(t,e,r)}(e,r,i))||this}return r=t,(e=i).prototype=Object.create(r.prototype),e.prototype.constructor=e,e.__proto__=r,i}(r);i.prototype.name=r.name,i.prototype.code=t,e[t]=i}function r(t,e){if(Array.isArray(t)){var n=t.length;return t=t.map((function(t){return String(t)})),n>2?"one of ".concat(e," ").concat(t.slice(0,n-1).join(", "),", or ")+t[n-1]:2===n?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}n("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),n("ERR_INVALID_ARG_TYPE",(function(t,e,n){var i,o,s,a,u;if("string"==typeof e&&(o="not ",e.substr(0,o.length)===o)?(i="must not be",e=e.replace(/^not /,"")):i="must be",function(t,e,n){return(void 0===n||n>t.length)&&(n=t.length),t.substring(n-e.length,n)===e}(t," argument"))s="The ".concat(t," ").concat(i," ").concat(r(e,"type"));else{var c=("number"!=typeof u&&(u=0),u+".".length>(a=t).length||-1===a.indexOf(".",u)?"argument":"property");s='The "'.concat(t,'" ').concat(c," ").concat(i," ").concat(r(e,"type"))}return s+". Received type ".concat(typeof n)}),TypeError),n("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),n("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),n("ERR_STREAM_PREMATURE_CLOSE","Premature close"),n("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),n("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),n("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),n("ERR_STREAM_WRITE_AFTER_END","write after end"),n("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),n("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),n("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.q=e},6753:(t,e,n)=>{"use strict";var r=n(4155),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=l;var o=n(9481),s=n(4229);n(5717)(l,o);for(var a=i(s.prototype),u=0;u<a.length;u++){var c=a[u];l.prototype[c]||(l.prototype[c]=s.prototype[c])}function l(t){if(!(this instanceof l))return new l(t);o.call(this,t),s.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",f)))}function f(){this._writableState.ended||r.nextTick(h,this)}function h(t){t.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}})},2725:(t,e,n)=>{"use strict";t.exports=i;var r=n(4605);function i(t){if(!(this instanceof i))return new i(t);r.call(this,t)}n(5717)(i,r),i.prototype._transform=function(t,e,n){n(null,t)}},9481:(t,e,n)=>{"use strict";var r,i=n(4155);t.exports=A,A.ReadableState=w,n(7187).EventEmitter;var o,s=function(t,e){return t.listeners(e).length},a=n(2503),u=n(8764).Buffer,c=n.g.Uint8Array||function(){},l=n(4616);o=l&&l.debuglog?l.debuglog("stream"):function(){};var f,h,p,d=n(7327),_=n(1195),g=n(2457).getHighWaterMark,y=n(4281).q,m=y.ERR_INVALID_ARG_TYPE,S=y.ERR_STREAM_PUSH_AFTER_EOF,E=y.ERR_METHOD_NOT_IMPLEMENTED,v=y.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;n(5717)(A,a);var I=_.errorOrDestroy,b=["error","close","destroy","pause","resume"];function w(t,e,i){r=r||n(6753),t=t||{},"boolean"!=typeof i&&(i=e instanceof r),this.objectMode=!!t.objectMode,i&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=g(this,t,"readableHighWaterMark",i),this.buffer=new d,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(f||(f=n(2553).s),this.decoder=new f(t.encoding),this.encoding=t.encoding)}function A(t){if(r=r||n(6753),!(this instanceof A))return new A(t);var e=this instanceof r;this._readableState=new w(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),a.call(this)}function T(t,e,n,r,i){o("readableAddChunk",e);var s,a=t._readableState;if(null===e)a.reading=!1,function(t,e){if(o("onEofChunk"),!e.ended){if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,e.sync?F(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,W(t)))}}(t,a);else if(i||(s=function(t,e){var n,r;return r=e,u.isBuffer(r)||r instanceof c||"string"==typeof e||void 0===e||t.objectMode||(n=new m("chunk",["string","Buffer","Uint8Array"],e)),n}(a,e)),s)I(t,s);else if(a.objectMode||e&&e.length>0)if("string"==typeof e||a.objectMode||Object.getPrototypeOf(e)===u.prototype||(e=function(t){return u.from(t)}(e)),r)a.endEmitted?I(t,new v):O(t,a,e,!0);else if(a.ended)I(t,new S);else{if(a.destroyed)return!1;a.reading=!1,a.decoder&&!n?(e=a.decoder.write(e),a.objectMode||0!==e.length?O(t,a,e,!1):C(t,a)):O(t,a,e,!1)}else r||(a.reading=!1,C(t,a));return!a.ended&&(a.length<a.highWaterMark||0===a.length)}function O(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",n)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&F(t)),C(t,e)}Object.defineProperty(A.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),A.prototype.destroy=_.destroy,A.prototype._undestroy=_.undestroy,A.prototype._destroy=function(t,e){e(t)},A.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=u.from(t,e),e=""),n=!0),T(this,t,e,!1,n)},A.prototype.unshift=function(t){return T(this,t,null,!0,!1)},A.prototype.isPaused=function(){return!1===this._readableState.flowing},A.prototype.setEncoding=function(t){f||(f=n(2553).s);var e=new f(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var r=this._readableState.buffer.head,i="";null!==r;)i+=e.write(r.data),r=r.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var R=1073741824;function N(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=R?t=R:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function F(t){var e=t._readableState;o("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(o("emitReadable",e.flowing),e.emittedReadable=!0,i.nextTick(W,t))}function W(t){var e=t._readableState;o("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,k(t)}function C(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(L,t,e))}function L(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var n=e.length;if(o("maybeReadMore read 0"),t.read(0),n===e.length)break}e.readingMore=!1}function P(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function D(t){o("readable nexttick read 0"),t.read(0)}function x(t,e){o("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),k(t),e.flowing&&!e.reading&&t.read(0)}function k(t){var e=t._readableState;for(o("flow",e.flowing);e.flowing&&null!==t.read(););}function M(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):n=e.buffer.consume(t,e.decoder),n);var n}function B(t){var e=t._readableState;o("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,i.nextTick(U,e,t))}function U(t,e){if(o("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var n=e._writableState;(!n||n.autoDestroy&&n.finished)&&e.destroy()}}function j(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}A.prototype.read=function(t){o("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return o("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?B(this):F(this),null;if(0===(t=N(t,e))&&e.ended)return 0===e.length&&B(this),null;var r,i=e.needReadable;return o("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&o("length less than watermark",i=!0),e.ended||e.reading?o("reading or ended",i=!1):i&&(o("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=N(n,e))),null===(r=t>0?M(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&B(this)),null!==r&&this.emit("data",r),r},A.prototype._read=function(t){I(this,new E("_read()"))},A.prototype.pipe=function(t,e){var n=this,r=this._readableState;switch(r.pipesCount){case 0:r.pipes=t;break;case 1:r.pipes=[r.pipes,t];break;default:r.pipes.push(t)}r.pipesCount+=1,o("pipe count=%d opts=%j",r.pipesCount,e);var a=e&&!1===e.end||t===i.stdout||t===i.stderr?_:u;function u(){o("onend"),t.end()}r.endEmitted?i.nextTick(a):n.once("end",a),t.on("unpipe",(function e(i,s){o("onunpipe"),i===n&&s&&!1===s.hasUnpiped&&(s.hasUnpiped=!0,o("cleanup"),t.removeListener("close",p),t.removeListener("finish",d),t.removeListener("drain",c),t.removeListener("error",h),t.removeListener("unpipe",e),n.removeListener("end",u),n.removeListener("end",_),n.removeListener("data",f),l=!0,!r.awaitDrain||t._writableState&&!t._writableState.needDrain||c())}));var c=function(t){return function(){var e=t._readableState;o("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&s(t,"data")&&(e.flowing=!0,k(t))}}(n);t.on("drain",c);var l=!1;function f(e){o("ondata");var i=t.write(e);o("dest.write",i),!1===i&&((1===r.pipesCount&&r.pipes===t||r.pipesCount>1&&-1!==j(r.pipes,t))&&!l&&(o("false write response, pause",r.awaitDrain),r.awaitDrain++),n.pause())}function h(e){o("onerror",e),_(),t.removeListener("error",h),0===s(t,"error")&&I(t,e)}function p(){t.removeListener("finish",d),_()}function d(){o("onfinish"),t.removeListener("close",p),_()}function _(){o("unpipe"),n.unpipe(t)}return n.on("data",f),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events.error?Array.isArray(t._events.error)?t._events.error.unshift(n):t._events.error=[n,t._events.error]:t.on(e,n)}(t,"error",h),t.once("close",p),t.once("finish",d),t.emit("pipe",n),r.flowing||(o("pipe resume"),n.resume()),t},A.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n)),this;if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,{hasUnpiped:!1});return this}var s=j(e.pipes,t);return-1===s||(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n)),this},A.prototype.on=function(t,e){var n=a.prototype.on.call(this,t,e),r=this._readableState;return"data"===t?(r.readableListening=this.listenerCount("readable")>0,!1!==r.flowing&&this.resume()):"readable"===t&&(r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.flowing=!1,r.emittedReadable=!1,o("on readable",r.length,r.reading),r.length?F(this):r.reading||i.nextTick(D,this))),n},A.prototype.addListener=A.prototype.on,A.prototype.removeListener=function(t,e){var n=a.prototype.removeListener.call(this,t,e);return"readable"===t&&i.nextTick(P,this),n},A.prototype.removeAllListeners=function(t){var e=a.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||i.nextTick(P,this),e},A.prototype.resume=function(){var t=this._readableState;return t.flowing||(o("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(x,t,e))}(this,t)),t.paused=!1,this},A.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},A.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",(function(){if(o("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(i){o("wrapped data"),n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i||(n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause()))})),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var s=0;s<b.length;s++)t.on(b[s],this.emit.bind(this,b[s]));return this._read=function(e){o("wrapped _read",e),r&&(r=!1,t.resume())},this},"function"==typeof Symbol&&(A.prototype[Symbol.asyncIterator]=function(){return void 0===h&&(h=n(5850)),h(this)}),Object.defineProperty(A.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(A.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(A.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),A._fromList=M,Object.defineProperty(A.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(A.from=function(t,e){return void 0===p&&(p=n(5167)),p(A,t,e)})},4605:(t,e,n)=>{"use strict";t.exports=l;var r=n(4281).q,i=r.ERR_METHOD_NOT_IMPLEMENTED,o=r.ERR_MULTIPLE_CALLBACK,s=r.ERR_TRANSFORM_ALREADY_TRANSFORMING,a=r.ERR_TRANSFORM_WITH_LENGTH_0,u=n(6753);function c(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(null===r)return this.emit("error",new o);n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function l(t){if(!(this instanceof l))return new l(t);u.call(this,t),this._transformState={afterTransform:c.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",f)}function f(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?h(this,null,null):this._flush((function(e,n){h(t,e,n)}))}function h(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new a;if(t._transformState.transforming)throw new s;return t.push(null)}n(5717)(l,u),l.prototype.push=function(t,e){return this._transformState.needTransform=!1,u.prototype.push.call(this,t,e)},l.prototype._transform=function(t,e,n){n(new i("_transform()"))},l.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},l.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},l.prototype._destroy=function(t,e){u.prototype._destroy.call(this,t,(function(t){e(t)}))}},4229:(t,e,n)=>{"use strict";var r,i=n(4155);function o(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;for(t.entry=null;r;){var i=r.callback;e.pendingcb--,i(undefined),r=r.next}e.corkedRequestsFree.next=t}(e,t)}}t.exports=A,A.WritableState=w;var s,a={deprecate:n(4927)},u=n(2503),c=n(8764).Buffer,l=n.g.Uint8Array||function(){},f=n(1195),h=n(2457).getHighWaterMark,p=n(4281).q,d=p.ERR_INVALID_ARG_TYPE,_=p.ERR_METHOD_NOT_IMPLEMENTED,g=p.ERR_MULTIPLE_CALLBACK,y=p.ERR_STREAM_CANNOT_PIPE,m=p.ERR_STREAM_DESTROYED,S=p.ERR_STREAM_NULL_VALUES,E=p.ERR_STREAM_WRITE_AFTER_END,v=p.ERR_UNKNOWN_ENCODING,I=f.errorOrDestroy;function b(){}function w(t,e,s){r=r||n(6753),t=t||{},"boolean"!=typeof s&&(s=e instanceof r),this.objectMode=!!t.objectMode,s&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=h(this,t,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var a=!1===t.decodeStrings;this.decodeStrings=!a,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,o=n.writecb;if("function"!=typeof o)throw new g;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,o){--e.pendingcb,n?(i.nextTick(o,r),i.nextTick(W,t,e),t._writableState.errorEmitted=!0,I(t,r)):(o(r),t._writableState.errorEmitted=!0,I(t,r),W(t,e))}(t,n,r,e,o);else{var s=N(n)||t.destroyed;s||n.corked||n.bufferProcessing||!n.bufferedRequest||R(t,n),r?i.nextTick(O,t,n,s,o):O(t,n,s,o)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function A(t){var e=this instanceof(r=r||n(6753));if(!e&&!s.call(A,this))return new A(t);this._writableState=new w(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),u.call(this)}function T(t,e,n,r,i,o,s){e.writelen=r,e.writecb=s,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new m("write")):n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function O(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),W(t,e)}function R(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),s=e.corkedRequestsFree;s.entry=n;for(var a=0,u=!0;n;)i[a]=n,n.isBuf||(u=!1),n=n.next,a+=1;i.allBuffers=u,T(t,e,!0,e.length,i,"",s.finish),e.pendingcb++,e.lastBufferedRequest=null,s.next?(e.corkedRequestsFree=s.next,s.next=null):e.corkedRequestsFree=new o(e),e.bufferedRequestCount=0}else{for(;n;){var c=n.chunk,l=n.encoding,f=n.callback;if(T(t,e,!1,e.objectMode?1:c.length,c,l,f),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function N(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function F(t,e){t._final((function(n){e.pendingcb--,n&&I(t,n),e.prefinished=!0,t.emit("prefinish"),W(t,e)}))}function W(t,e){var n=N(e);if(n&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,i.nextTick(F,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var r=t._readableState;(!r||r.autoDestroy&&r.endEmitted)&&t.destroy()}return n}n(5717)(A,u),w.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(w.prototype,"buffer",{get:a.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(s=Function.prototype[Symbol.hasInstance],Object.defineProperty(A,Symbol.hasInstance,{value:function(t){return!!s.call(this,t)||this===A&&t&&t._writableState instanceof w}})):s=function(t){return t instanceof this},A.prototype.pipe=function(){I(this,new y)},A.prototype.write=function(t,e,n){var r,o=this._writableState,s=!1,a=!o.objectMode&&(r=t,c.isBuffer(r)||r instanceof l);return a&&!c.isBuffer(t)&&(t=function(t){return c.from(t)}(t)),"function"==typeof e&&(n=e,e=null),a?e="buffer":e||(e=o.defaultEncoding),"function"!=typeof n&&(n=b),o.ending?function(t,e){var n=new E;I(t,n),i.nextTick(e,n)}(this,n):(a||function(t,e,n,r){var o;return null===n?o=new S:"string"==typeof n||e.objectMode||(o=new d("chunk",["string","Buffer"],n)),!o||(I(t,o),i.nextTick(r,o),!1)}(this,o,t,n))&&(o.pendingcb++,s=function(t,e,n,r,i,o){if(!n){var s=function(t,e,n){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=c.from(e,n)),e}(e,r,i);r!==s&&(n=!0,i="buffer",r=s)}var a=e.objectMode?1:r.length;e.length+=a;var u=e.length<e.highWaterMark;if(u||(e.needDrain=!0),e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else T(t,e,!1,a,r,i,o);return u}(this,o,a,t,e,n)),s},A.prototype.cork=function(){this._writableState.corked++},A.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||R(this,t))},A.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new v(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(A.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(A.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),A.prototype._write=function(t,e,n){n(new _("_write()"))},A.prototype._writev=null,A.prototype.end=function(t,e,n){var r=this._writableState;return"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!=t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||function(t,e,n){e.ending=!0,W(t,e),n&&(e.finished?i.nextTick(n):t.once("finish",n)),e.ended=!0,t.writable=!1}(this,r,n),this},Object.defineProperty(A.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(A.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),A.prototype.destroy=f.destroy,A.prototype._undestroy=f.undestroy,A.prototype._destroy=function(t,e){e(t)}},5850:(t,e,n)=>{"use strict";var r,i=n(4155);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var s=n(8610),a=Symbol("lastResolve"),u=Symbol("lastReject"),c=Symbol("error"),l=Symbol("ended"),f=Symbol("lastPromise"),h=Symbol("handlePromise"),p=Symbol("stream");function d(t,e){return{value:t,done:e}}function _(t){var e=t[a];if(null!==e){var n=t[p].read();null!==n&&(t[f]=null,t[a]=null,t[u]=null,e(d(n,!1)))}}function g(t){i.nextTick(_,t)}var y=Object.getPrototypeOf((function(){})),m=Object.setPrototypeOf((o(r={get stream(){return this[p]},next:function(){var t=this,e=this[c];if(null!==e)return Promise.reject(e);if(this[l])return Promise.resolve(d(void 0,!0));if(this[p].destroyed)return new Promise((function(e,n){i.nextTick((function(){t[c]?n(t[c]):e(d(void 0,!0))}))}));var n,r=this[f];if(r)n=new Promise(function(t,e){return function(n,r){t.then((function(){e[l]?n(d(void 0,!0)):e[h](n,r)}),r)}}(r,this));else{var o=this[p].read();if(null!==o)return Promise.resolve(d(o,!1));n=new Promise(this[h])}return this[f]=n,n}},Symbol.asyncIterator,(function(){return this})),o(r,"return",(function(){var t=this;return new Promise((function(e,n){t[p].destroy(null,(function(t){t?n(t):e(d(void 0,!0))}))}))})),r),y);t.exports=function(t){var e,n=Object.create(m,(o(e={},p,{value:t,writable:!0}),o(e,a,{value:null,writable:!0}),o(e,u,{value:null,writable:!0}),o(e,c,{value:null,writable:!0}),o(e,l,{value:t._readableState.endEmitted,writable:!0}),o(e,h,{value:function(t,e){var r=n[p].read();r?(n[f]=null,n[a]=null,n[u]=null,t(d(r,!1))):(n[a]=t,n[u]=e)},writable:!0}),e));return n[f]=null,s(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=n[u];return null!==e&&(n[f]=null,n[a]=null,n[u]=null,e(t)),void(n[c]=t)}var r=n[a];null!==r&&(n[f]=null,n[a]=null,n[u]=null,r(d(void 0,!0))),n[l]=!0})),t.on("readable",g.bind(null,n)),n}},7327:(t,e,n)=>{"use strict";function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var s=n(8764).Buffer,a=n(2361).inspect,u=a&&a.custom||"inspect";t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,n;return e=t,n=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n}},{key:"concat",value:function(t){if(0===this.length)return s.alloc(0);for(var e,n,r,i=s.allocUnsafe(t>>>0),o=this.head,a=0;o;)e=o.data,n=i,r=a,s.prototype.copy.call(e,n,r),a+=o.data.length,o=o.next;return i}},{key:"consume",value:function(t,e){var n;return t<this.head.data.length?(n=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):n=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),n}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,n=1,r=e.data;for(t-=r.length;e=e.next;){var i=e.data,o=t>i.length?i.length:t;if(o===i.length?r+=i:r+=i.slice(0,t),0==(t-=o)){o===i.length?(++n,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=i.slice(o));break}++n}return this.length-=n,r}},{key:"_getBuffer",value:function(t){var e=s.allocUnsafe(t),n=this.head,r=1;for(n.data.copy(e),t-=n.data.length;n=n.next;){var i=n.data,o=t>i.length?i.length:t;if(i.copy(e,e.length-t,0,o),0==(t-=o)){o===i.length?(++r,n.next?this.head=n.next:this.head=this.tail=null):(this.head=n,n.data=i.slice(o));break}++r}return this.length-=r,e}},{key:u,value:function(t,e){return a(this,function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},e,{depth:0,customInspect:!1}))}}],n&&o(e.prototype,n),t}()},1195:(t,e,n)=>{"use strict";var r=n(4155);function i(t,e){s(t,e),o(t)}function o(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function s(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,a=this._readableState&&this._readableState.destroyed,u=this._writableState&&this._writableState.destroyed;return a||u?(e?e(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,r.nextTick(s,this,t)):r.nextTick(s,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?n._writableState?n._writableState.errorEmitted?r.nextTick(o,n):(n._writableState.errorEmitted=!0,r.nextTick(i,n,t)):r.nextTick(i,n,t):e?(r.nextTick(o,n),e(t)):r.nextTick(o,n)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var n=t._readableState,r=t._writableState;n&&n.autoDestroy||r&&r.autoDestroy?t.destroy(e):t.emit("error",e)}}},8610:(t,e,n)=>{"use strict";var r=n(4281).q.ERR_STREAM_PREMATURE_CLOSE;function i(){}t.exports=function t(e,n,o){if("function"==typeof n)return t(e,null,n);n||(n={}),o=function(t){var e=!1;return function(){if(!e){e=!0;for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];t.apply(this,r)}}}(o||i);var s=n.readable||!1!==n.readable&&e.readable,a=n.writable||!1!==n.writable&&e.writable,u=function(){e.writable||l()},c=e._writableState&&e._writableState.finished,l=function(){a=!1,c=!0,s||o.call(e)},f=e._readableState&&e._readableState.endEmitted,h=function(){s=!1,f=!0,a||o.call(e)},p=function(t){o.call(e,t)},d=function(){var t;return s&&!f?(e._readableState&&e._readableState.ended||(t=new r),o.call(e,t)):a&&!c?(e._writableState&&e._writableState.ended||(t=new r),o.call(e,t)):void 0},_=function(){e.req.on("finish",l)};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",l),e.on("abort",d),e.req?_():e.on("request",_)):a&&!e._writableState&&(e.on("end",u),e.on("close",u)),e.on("end",h),e.on("finish",l),!1!==n.error&&e.on("error",p),e.on("close",d),function(){e.removeListener("complete",l),e.removeListener("abort",d),e.removeListener("request",_),e.req&&e.req.removeListener("finish",l),e.removeListener("end",u),e.removeListener("close",u),e.removeListener("finish",l),e.removeListener("end",h),e.removeListener("error",p),e.removeListener("close",d)}}},5167:t=>{t.exports=function(){throw new Error("Readable.from is not available in the browser")}},9946:(t,e,n)=>{"use strict";var r,i=n(4281).q,o=i.ERR_MISSING_ARGS,s=i.ERR_STREAM_DESTROYED;function a(t){if(t)throw t}function u(t,e,i,o){o=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(o);var a=!1;t.on("close",(function(){a=!0})),void 0===r&&(r=n(8610)),r(t,{readable:e,writable:i},(function(t){if(t)return o(t);a=!0,o()}));var u=!1;return function(e){if(!a&&!u)return u=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void o(e||new s("pipe"))}}function c(t){t()}function l(t,e){return t.pipe(e)}function f(t){return t.length?"function"!=typeof t[t.length-1]?a:t.pop():a}t.exports=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r,i=f(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new o("streams");var s=e.map((function(t,n){var o=n<e.length-1;return u(t,o,n>0,(function(t){r||(r=t),t&&s.forEach(c),o||(s.forEach(c),i(r))}))}));return e.reduce(l)}},2457:(t,e,n)=>{"use strict";var r=n(4281).q.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(t,e,n,i){var o=function(t,e,n){return null!=t.highWaterMark?t.highWaterMark:e?t[n]:null}(e,i,n);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new r(i?n:"highWaterMark",o);return Math.floor(o)}return t.objectMode?16:16384}}},2503:(t,e,n)=>{t.exports=n(7187).EventEmitter},9509:(t,e,n)=>{var r=n(8764),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function s(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=s),o(i,s),s.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},s.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},2830:(t,e,n)=>{t.exports=i;var r=n(7187).EventEmitter;function i(){r.call(this)}n(5717)(i,r),i.Readable=n(9481),i.Writable=n(4229),i.Duplex=n(6753),i.Transform=n(4605),i.PassThrough=n(2725),i.finished=n(8610),i.pipeline=n(9946),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",a),n.on("close",u));var s=!1;function a(){s||(s=!0,t.end())}function u(){s||(s=!0,"function"==typeof t.destroy&&t.destroy())}function c(t){if(l(),0===r.listenerCount(this,"error"))throw t}function l(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",a),n.removeListener("close",u),n.removeListener("error",c),t.removeListener("error",c),n.removeListener("end",l),n.removeListener("close",l),t.removeListener("close",l)}return n.on("error",c),t.on("error",c),n.on("end",l),n.on("close",l),t.on("close",l),t.emit("pipe",n),t}},2553:(t,e,n)=>{"use strict";var r=n(396).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=c,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=l,this.end=f,e=3;break;default:return this.write=h,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function c(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function l(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function f(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function h(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.s=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=s(e[r]);return i>=0?(i>0&&(t.lastNeed=i-1),i):--r<n||-2===i?0:(i=s(e[r]))>=0?(i>0&&(t.lastNeed=i-2),i):--r<n||-2===i?0:(i=s(e[r]))>=0?(i>0&&(2===i?i=0:t.lastNeed=i-3),i):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},396:(t,e,n)=>{var r=n(8764),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function s(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=s),s.prototype=Object.create(i.prototype),o(i,s),s.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},s.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},5054:(t,e,n)=>{var r=n(8764).Buffer;t.exports=function(t){return ArrayBuffer.isView(t)?r.from(t.buffer,t.byteOffset,t.byteLength):r.from(t)}},2511:function(t,e,n){var r;t=n.nmd(t),function(i){e&&e.nodeType,t&&t.nodeType;var o="object"==typeof n.g&&n.g;o.global!==o&&o.window!==o&&o.self;var s,a=2147483647,u=36,c=/^xn--/,l=/[^\x20-\x7E]/,f=/[\x2E\u3002\uFF0E\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,d=String.fromCharCode;function _(t){throw RangeError(h[t])}function g(t,e){for(var n=t.length,r=[];n--;)r[n]=e(t[n]);return r}function y(t,e){var n=t.split("@"),r="";return n.length>1&&(r=n[0]+"@",t=n[1]),r+g((t=t.replace(f,".")).split("."),e).join(".")}function m(t){for(var e,n,r=[],i=0,o=t.length;i<o;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<o?56320==(64512&(n=t.charCodeAt(i++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),i--):r.push(e);return r}function S(t){return g(t,(function(t){var e="";return t>65535&&(e+=d((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+d(t)})).join("")}function E(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function v(t,e,n){var r=0;for(t=n?p(t/700):t>>1,t+=p(t/e);t>455;r+=u)t=p(t/35);return p(r+36*t/(t+38))}function I(t){var e,n,r,i,o,s,c,l,f,h,d,g=[],y=t.length,m=0,E=128,I=72;for((n=t.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)t.charCodeAt(r)>=128&&_("not-basic"),g.push(t.charCodeAt(r));for(i=n>0?n+1:0;i<y;){for(o=m,s=1,c=u;i>=y&&_("invalid-input"),((l=(d=t.charCodeAt(i++))-48<10?d-22:d-65<26?d-65:d-97<26?d-97:u)>=u||l>p((a-m)/s))&&_("overflow"),m+=l*s,!(l<(f=c<=I?1:c>=I+26?26:c-I));c+=u)s>p(a/(h=u-f))&&_("overflow"),s*=h;I=v(m-o,e=g.length+1,0==o),p(m/e)>a-E&&_("overflow"),E+=p(m/e),m%=e,g.splice(m++,0,E)}return S(g)}function b(t){var e,n,r,i,o,s,c,l,f,h,g,y,S,I,b,w=[];for(y=(t=m(t)).length,e=128,n=0,o=72,s=0;s<y;++s)(g=t[s])<128&&w.push(d(g));for(r=i=w.length,i&&w.push("-");r<y;){for(c=a,s=0;s<y;++s)(g=t[s])>=e&&g<c&&(c=g);for(c-e>p((a-n)/(S=r+1))&&_("overflow"),n+=(c-e)*S,e=c,s=0;s<y;++s)if((g=t[s])<e&&++n>a&&_("overflow"),g==e){for(l=n,f=u;!(l<(h=f<=o?1:f>=o+26?26:f-o));f+=u)b=l-h,I=u-h,w.push(d(E(h+b%I,0))),l=p(b/I);w.push(d(E(l,0))),o=v(n,S,r==i),n=0,++r}++n,++e}return w.join("")}s={version:"1.3.2",ucs2:{decode:m,encode:S},decode:I,encode:b,toASCII:function(t){return y(t,(function(t){return l.test(t)?"xn--"+b(t):t}))},toUnicode:function(t){return y(t,(function(t){return c.test(t)?I(t.slice(4).toLowerCase()):t}))}},void 0===(r=function(){return s}.call(e,n,e,t))||(t.exports=r)}()},8575:(t,e,n)=>{"use strict";var r=n(2511),i=n(2502);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,u=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(c),f=["%","/","?",";","#"].concat(l),h=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,_={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},m=n(7673);o.prototype.parse=function(t,e,n){if(!i.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var o=t.indexOf("?"),a=-1!==o&&o<t.indexOf("#")?"?":"#",c=t.split(a);c[0]=c[0].replace(/\\/g,"/");var S=t=c.join(a);if(S=S.trim(),!n&&1===t.split("#").length){var E=u.exec(S);if(E)return this.path=S,this.href=S,this.pathname=E[1],E[2]?(this.search=E[2],this.query=e?m.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var v=s.exec(S);if(v){var I=(v=v[0]).toLowerCase();this.protocol=I,S=S.substr(v.length)}if(n||v||S.match(/^\/\/[^@\/]+@[^@\/]+/)){var b="//"===S.substr(0,2);!b||v&&g[v]||(S=S.substr(2),this.slashes=!0)}if(!g[v]&&(b||v&&!y[v])){for(var w,A,T=-1,O=0;O<h.length;O++)-1!==(R=S.indexOf(h[O]))&&(-1===T||R<T)&&(T=R);for(-1!==(A=-1===T?S.lastIndexOf("@"):S.lastIndexOf("@",T))&&(w=S.slice(0,A),S=S.slice(A+1),this.auth=decodeURIComponent(w)),T=-1,O=0;O<f.length;O++){var R;-1!==(R=S.indexOf(f[O]))&&(-1===T||R<T)&&(T=R)}-1===T&&(T=S.length),this.host=S.slice(0,T),S=S.slice(T),this.parseHost(),this.hostname=this.hostname||"";var N="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!N)for(var F=this.hostname.split(/\./),W=(O=0,F.length);O<W;O++){var C=F[O];if(C&&!C.match(p)){for(var L="",P=0,D=C.length;P<D;P++)C.charCodeAt(P)>127?L+="x":L+=C[P];if(!L.match(p)){var x=F.slice(0,O),k=F.slice(O+1),M=C.match(d);M&&(x.push(M[1]),k.unshift(M[2])),k.length&&(S="/"+k.join(".")+S),this.hostname=x.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),N||(this.hostname=r.toASCII(this.hostname));var B=this.port?":"+this.port:"",U=this.hostname||"";this.host=U+B,this.href+=this.host,N&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==S[0]&&(S="/"+S))}if(!_[I])for(O=0,W=l.length;O<W;O++){var j=l[O];if(-1!==S.indexOf(j)){var G=encodeURIComponent(j);G===j&&(G=escape(j)),S=S.split(j).join(G)}}var H=S.indexOf("#");-1!==H&&(this.hash=S.substr(H),S=S.slice(0,H));var $=S.indexOf("?");if(-1!==$?(this.search=S.substr($),this.query=S.substr($+1),e&&(this.query=m.parse(this.query)),S=S.slice(0,$)):e&&(this.search="",this.query={}),S&&(this.pathname=S),y[I]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){B=this.pathname||"";var Y=this.search||"";this.path=B+Y}return this.href=this.format(),this},o.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",n=this.pathname||"",r=this.hash||"",o=!1,s="";this.host?o=t+this.host:this.hostname&&(o=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&i.isObject(this.query)&&Object.keys(this.query).length&&(s=m.stringify(this.query));var a=this.search||s&&"?"+s||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||y[e])&&!1!==o?(o="//"+(o||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):o||(o=""),r&&"#"!==r.charAt(0)&&(r="#"+r),a&&"?"!==a.charAt(0)&&(a="?"+a),e+o+(n=n.replace(/[?#]/g,(function(t){return encodeURIComponent(t)})))+(a=a.replace("#","%23"))+r},o.prototype.resolve=function(t){return this.resolveObject(function(t,e,n){if(t&&i.isObject(t)&&t instanceof o)return t;var r=new o;return r.parse(t,e,n),r}(t,!1,!0)).format()},o.prototype.resolveObject=function(t){if(i.isString(t)){var e=new o;e.parse(t,!1,!0),t=e}for(var n=new o,r=Object.keys(this),s=0;s<r.length;s++){var a=r[s];n[a]=this[a]}if(n.hash=t.hash,""===t.href)return n.href=n.format(),n;if(t.slashes&&!t.protocol){for(var u=Object.keys(t),c=0;c<u.length;c++){var l=u[c];"protocol"!==l&&(n[l]=t[l])}return y[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(t.protocol&&t.protocol!==n.protocol){if(!y[t.protocol]){for(var f=Object.keys(t),h=0;h<f.length;h++){var p=f[h];n[p]=t[p]}return n.href=n.format(),n}if(n.protocol=t.protocol,t.host||g[t.protocol])n.pathname=t.pathname;else{for(var d=(t.pathname||"").split("/");d.length&&!(t.host=d.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),n.pathname=d.join("/")}if(n.search=t.search,n.query=t.query,n.host=t.host||"",n.auth=t.auth,n.hostname=t.hostname||t.host,n.port=t.port,n.pathname||n.search){var _=n.pathname||"",m=n.search||"";n.path=_+m}return n.slashes=n.slashes||t.slashes,n.href=n.format(),n}var S=n.pathname&&"/"===n.pathname.charAt(0),E=t.host||t.pathname&&"/"===t.pathname.charAt(0),v=E||S||n.host&&t.pathname,I=v,b=n.pathname&&n.pathname.split("/")||[],w=(d=t.pathname&&t.pathname.split("/")||[],n.protocol&&!y[n.protocol]);if(w&&(n.hostname="",n.port=null,n.host&&(""===b[0]?b[0]=n.host:b.unshift(n.host)),n.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===d[0]?d[0]=t.host:d.unshift(t.host)),t.host=null),v=v&&(""===d[0]||""===b[0])),E)n.host=t.host||""===t.host?t.host:n.host,n.hostname=t.hostname||""===t.hostname?t.hostname:n.hostname,n.search=t.search,n.query=t.query,b=d;else if(d.length)b||(b=[]),b.pop(),b=b.concat(d),n.search=t.search,n.query=t.query;else if(!i.isNullOrUndefined(t.search))return w&&(n.hostname=n.host=b.shift(),(N=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=N.shift(),n.host=n.hostname=N.shift())),n.search=t.search,n.query=t.query,i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n;if(!b.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var A=b.slice(-1)[0],T=(n.host||t.host||b.length>1)&&("."===A||".."===A)||""===A,O=0,R=b.length;R>=0;R--)"."===(A=b[R])?b.splice(R,1):".."===A?(b.splice(R,1),O++):O&&(b.splice(R,1),O--);if(!v&&!I)for(;O--;O)b.unshift("..");!v||""===b[0]||b[0]&&"/"===b[0].charAt(0)||b.unshift(""),T&&"/"!==b.join("/").substr(-1)&&b.push("");var N,F=""===b[0]||b[0]&&"/"===b[0].charAt(0);return w&&(n.hostname=n.host=F?"":b.length?b.shift():"",(N=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=N.shift(),n.host=n.hostname=N.shift())),(v=v||n.host&&b.length)&&!F&&b.unshift(""),b.length?n.pathname=b.join("/"):(n.pathname=null,n.path=null),i.isNull(n.pathname)&&i.isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=t.auth||n.auth,n.slashes=n.slashes||t.slashes,n.href=n.format(),n},o.prototype.parseHost=function(){var t=this.host,e=a.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},2502:t=>{"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},4927:(t,e,n)=>{var r=n(5108);function i(t){try{if(!n.g.localStorage)return!1}catch(t){return!1}var e=n.g.localStorage[t];return null!=e&&"true"===String(e).toLowerCase()}t.exports=function(t,e){if(i("noDeprecation"))return t;var n=!1;return function(){if(!n){if(i("throwDeprecation"))throw new Error(e);i("traceDeprecation")?r.trace(e):r.warn(e),n=!0}return t.apply(this,arguments)}}},384:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},5955:(t,e,n)=>{"use strict";var r=n(2584),i=n(8662),o=n(6430),s=n(5692);function a(t){return t.call.bind(t)}var u="undefined"!=typeof BigInt,c="undefined"!=typeof Symbol,l=a(Object.prototype.toString),f=a(Number.prototype.valueOf),h=a(String.prototype.valueOf),p=a(Boolean.prototype.valueOf);if(u)var d=a(BigInt.prototype.valueOf);if(c)var _=a(Symbol.prototype.valueOf);function g(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(t){return!1}}function y(t){return"[object Map]"===l(t)}function m(t){return"[object Set]"===l(t)}function S(t){return"[object WeakMap]"===l(t)}function E(t){return"[object WeakSet]"===l(t)}function v(t){return"[object ArrayBuffer]"===l(t)}function I(t){return"undefined"!=typeof ArrayBuffer&&(v.working?v(t):t instanceof ArrayBuffer)}function b(t){return"[object DataView]"===l(t)}function w(t){return"undefined"!=typeof DataView&&(b.working?b(t):t instanceof DataView)}e.isArgumentsObject=r,e.isGeneratorFunction=i,e.isTypedArray=s,e.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},e.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):s(t)||w(t)},e.isUint8Array=function(t){return"Uint8Array"===o(t)},e.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===o(t)},e.isUint16Array=function(t){return"Uint16Array"===o(t)},e.isUint32Array=function(t){return"Uint32Array"===o(t)},e.isInt8Array=function(t){return"Int8Array"===o(t)},e.isInt16Array=function(t){return"Int16Array"===o(t)},e.isInt32Array=function(t){return"Int32Array"===o(t)},e.isFloat32Array=function(t){return"Float32Array"===o(t)},e.isFloat64Array=function(t){return"Float64Array"===o(t)},e.isBigInt64Array=function(t){return"BigInt64Array"===o(t)},e.isBigUint64Array=function(t){return"BigUint64Array"===o(t)},y.working="undefined"!=typeof Map&&y(new Map),e.isMap=function(t){return"undefined"!=typeof Map&&(y.working?y(t):t instanceof Map)},m.working="undefined"!=typeof Set&&m(new Set),e.isSet=function(t){return"undefined"!=typeof Set&&(m.working?m(t):t instanceof Set)},S.working="undefined"!=typeof WeakMap&&S(new WeakMap),e.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(S.working?S(t):t instanceof WeakMap)},E.working="undefined"!=typeof WeakSet&&E(new WeakSet),e.isWeakSet=function(t){return E(t)},v.working="undefined"!=typeof ArrayBuffer&&v(new ArrayBuffer),e.isArrayBuffer=I,b.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&b(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=w;var A="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function T(t){return"[object SharedArrayBuffer]"===l(t)}function O(t){return void 0!==A&&(void 0===T.working&&(T.working=T(new A)),T.working?T(t):t instanceof A)}function R(t){return g(t,f)}function N(t){return g(t,h)}function F(t){return g(t,p)}function W(t){return u&&g(t,d)}function C(t){return c&&g(t,_)}e.isSharedArrayBuffer=O,e.isAsyncFunction=function(t){return"[object AsyncFunction]"===l(t)},e.isMapIterator=function(t){return"[object Map Iterator]"===l(t)},e.isSetIterator=function(t){return"[object Set Iterator]"===l(t)},e.isGeneratorObject=function(t){return"[object Generator]"===l(t)},e.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===l(t)},e.isNumberObject=R,e.isStringObject=N,e.isBooleanObject=F,e.isBigIntObject=W,e.isSymbolObject=C,e.isBoxedPrimitive=function(t){return R(t)||N(t)||F(t)||W(t)||C(t)},e.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(I(t)||O(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},9539:(t,e,n)=>{var r=n(4155),i=n(5108),o=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},s=/%[sdj%]/g;e.format=function(t){if(!E(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(l(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,i=r.length,o=String(t).replace(s,(function(t){if("%%"===t)return"%";if(n>=i)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),a=r[n];n<i;a=r[++n])m(a)||!b(a)?o+=" "+a:o+=" "+l(a);return o},e.deprecate=function(t,n){if(void 0!==r&&!0===r.noDeprecation)return t;if(void 0===r)return function(){return e.deprecate(t,n).apply(this,arguments)};var o=!1;return function(){if(!o){if(r.throwDeprecation)throw new Error(n);r.traceDeprecation?i.trace(n):i.error(n),o=!0}return t.apply(this,arguments)}};var a={},u=/^$/;if(r.env.NODE_DEBUG){var c=r.env.NODE_DEBUG;c=c.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),u=new RegExp("^"+c+"$","i")}function l(t,n){var r={seen:[],stylize:h};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),y(n)?r.showHidden=n:n&&e._extend(r,n),v(r.showHidden)&&(r.showHidden=!1),v(r.depth)&&(r.depth=2),v(r.colors)&&(r.colors=!1),v(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=f),p(r,t,r.depth)}function f(t,e){var n=l.styles[e];return n?"["+l.colors[n][0]+"m"+t+"["+l.colors[n][1]+"m":t}function h(t,e){return t}function p(t,n,r){if(t.customInspect&&n&&T(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var i=n.inspect(r,t);return E(i)||(i=p(t,i,r)),i}var o=function(t,e){if(v(e))return t.stylize("undefined","undefined");if(E(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}return S(e)?t.stylize(""+e,"number"):y(e)?t.stylize(""+e,"boolean"):m(e)?t.stylize("null","null"):void 0}(t,n);if(o)return o;var s=Object.keys(n),a=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(n)),A(n)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return d(n);if(0===s.length){if(T(n)){var u=n.name?": "+n.name:"";return t.stylize("[Function"+u+"]","special")}if(I(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(w(n))return t.stylize(Date.prototype.toString.call(n),"date");if(A(n))return d(n)}var c,l="",f=!1,h=["{","}"];return g(n)&&(f=!0,h=["[","]"]),T(n)&&(l=" [Function"+(n.name?": "+n.name:"")+"]"),I(n)&&(l=" "+RegExp.prototype.toString.call(n)),w(n)&&(l=" "+Date.prototype.toUTCString.call(n)),A(n)&&(l=" "+d(n)),0!==s.length||f&&0!=n.length?r<0?I(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),c=f?function(t,e,n,r,i){for(var o=[],s=0,a=e.length;s<a;++s)W(e,String(s))?o.push(_(t,e,n,r,String(s),!0)):o.push("");return i.forEach((function(i){i.match(/^\d+$/)||o.push(_(t,e,n,r,i,!0))})),o}(t,n,r,a,s):s.map((function(e){return _(t,n,r,a,e,f)})),t.seen.pop(),function(t,e,n){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1]:n[0]+e+" "+t.join(", ")+" "+n[1]}(c,l,h)):h[0]+l+h[1]}function d(t){return"["+Error.prototype.toString.call(t)+"]"}function _(t,e,n,r,i,o){var s,a,u;if((u=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?a=u.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):u.set&&(a=t.stylize("[Setter]","special")),W(r,i)||(s="["+i+"]"),a||(t.seen.indexOf(u.value)<0?(a=m(n)?p(t,u.value,null):p(t,u.value,n-1)).indexOf("\n")>-1&&(a=o?a.split("\n").map((function(t){return"  "+t})).join("\n").slice(2):"\n"+a.split("\n").map((function(t){return"   "+t})).join("\n")):a=t.stylize("[Circular]","special")),v(s)){if(o&&i.match(/^\d+$/))return a;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.slice(1,-1),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+a}function g(t){return Array.isArray(t)}function y(t){return"boolean"==typeof t}function m(t){return null===t}function S(t){return"number"==typeof t}function E(t){return"string"==typeof t}function v(t){return void 0===t}function I(t){return b(t)&&"[object RegExp]"===O(t)}function b(t){return"object"==typeof t&&null!==t}function w(t){return b(t)&&"[object Date]"===O(t)}function A(t){return b(t)&&("[object Error]"===O(t)||t instanceof Error)}function T(t){return"function"==typeof t}function O(t){return Object.prototype.toString.call(t)}function R(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!a[t])if(u.test(t)){var n=r.pid;a[t]=function(){var r=e.format.apply(e,arguments);i.error("%s %d: %s",t,n,r)}}else a[t]=function(){};return a[t]},e.inspect=l,l.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},l.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=n(5955),e.isArray=g,e.isBoolean=y,e.isNull=m,e.isNullOrUndefined=function(t){return null==t},e.isNumber=S,e.isString=E,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=v,e.isRegExp=I,e.types.isRegExp=I,e.isObject=b,e.isDate=w,e.types.isDate=w,e.isError=A,e.types.isNativeError=A,e.isFunction=T,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(384);var N=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function F(){var t=new Date,e=[R(t.getHours()),R(t.getMinutes()),R(t.getSeconds())].join(":");return[t.getDate(),N[t.getMonth()],e].join(" ")}function W(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){i.log("%s - %s",F(),e.format.apply(e,arguments))},e.inherits=n(5717),e._extend=function(t,e){if(!e||!b(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var C="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function L(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(C&&t[C]){var e;if("function"!=typeof(e=t[C]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,C,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise((function(t,r){e=t,n=r})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,r){t?n(t):e(r)}));try{t.apply(this,i)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),C&&Object.defineProperty(e,C,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,o(t))},e.promisify.custom=C,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],n=0;n<arguments.length;n++)e.push(arguments[n]);var i=e.pop();if("function"!=typeof i)throw new TypeError("The last argument must be of type Function");var o=this,s=function(){return i.apply(o,arguments)};t.apply(this,e).then((function(t){r.nextTick(s.bind(null,null,t))}),(function(t){r.nextTick(L.bind(null,t,s))}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,o(t)),e}},2907:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=t=>{(()=>{if("performance"in self||(self.performance={}),Date.now=Date.now||(()=>(new Date).getTime()),"now"in self.performance==0){let t=Date.now();performance.timing&&performance.timing.navigationStart&&(t=performance.timing.navigationStart),self.performance.now=()=>Date.now()-t}})();const e=Math.floor(.001*(Date.now()-performance.now())),n=.001*performance.now();let r=Math.floor(n)+e,i=Math.floor(n%1*1e9);return t&&(r-=t[0],i-=t[1],i<0&&(r--,i+=1e9)),[r,i]};n.bigint=t=>{const e=n(t);return 1e9*e[0]+e[1]},e.default=n},8778:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(7963),o=r(n(6470)),s=r(n(2907)),a=n(1359),u={hrtime:s.default.bigint,exit:t=>{throw new a.WASIExitError(t)},kill:t=>{throw new a.WASIKillError(t)},randomFillSync:i.randomFillSync,isTTY:()=>!0,path:o.default,fs:null};e.default=u},8732:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WASI_ENOMSG=e.WASI_ENOMEM=e.WASI_ENOLINK=e.WASI_ENOLCK=e.WASI_ENOEXEC=e.WASI_ENOENT=e.WASI_ENODEV=e.WASI_ENOBUFS=e.WASI_ENFILE=e.WASI_ENETUNREACH=e.WASI_ENETRESET=e.WASI_ENETDOWN=e.WASI_ENAMETOOLONG=e.WASI_EMULTIHOP=e.WASI_EMSGSIZE=e.WASI_EMLINK=e.WASI_EMFILE=e.WASI_ELOOP=e.WASI_EISDIR=e.WASI_EISCONN=e.WASI_EIO=e.WASI_EINVAL=e.WASI_EINTR=e.WASI_EINPROGRESS=e.WASI_EILSEQ=e.WASI_EIDRM=e.WASI_EHOSTUNREACH=e.WASI_EFBIG=e.WASI_EFAULT=e.WASI_EEXIST=e.WASI_EDQUOT=e.WASI_EDOM=e.WASI_EDESTADDRREQ=e.WASI_EDEADLK=e.WASI_ECONNRESET=e.WASI_ECONNREFUSED=e.WASI_ECONNABORTED=e.WASI_ECHILD=e.WASI_ECANCELED=e.WASI_EBUSY=e.WASI_EBADMSG=e.WASI_EBADF=e.WASI_EALREADY=e.WASI_EAGAIN=e.WASI_EAFNOSUPPORT=e.WASI_EADDRNOTAVAIL=e.WASI_EADDRINUSE=e.WASI_EACCES=e.WASI_E2BIG=e.WASI_ESUCCESS=void 0,e.WASI_SIGVTALRM=e.WASI_SIGUSR2=e.WASI_SIGUSR1=e.WASI_SIGURG=e.WASI_SIGTTOU=e.WASI_SIGTTIN=e.WASI_SIGTSTP=e.WASI_SIGTRAP=e.WASI_SIGTERM=e.WASI_SIGSTOP=e.WASI_SIGSEGV=e.WASI_SIGQUIT=e.WASI_SIGPIPE=e.WASI_SIGKILL=e.WASI_SIGINT=e.WASI_SIGILL=e.WASI_SIGHUP=e.WASI_SIGFPE=e.WASI_SIGCONT=e.WASI_SIGCHLD=e.WASI_SIGBUS=e.WASI_SIGALRM=e.WASI_SIGABRT=e.WASI_ENOTCAPABLE=e.WASI_EXDEV=e.WASI_ETXTBSY=e.WASI_ETIMEDOUT=e.WASI_ESTALE=e.WASI_ESRCH=e.WASI_ESPIPE=e.WASI_EROFS=e.WASI_ERANGE=e.WASI_EPROTOTYPE=e.WASI_EPROTONOSUPPORT=e.WASI_EPROTO=e.WASI_EPIPE=e.WASI_EPERM=e.WASI_EOWNERDEAD=e.WASI_EOVERFLOW=e.WASI_ENXIO=e.WASI_ENOTTY=e.WASI_ENOTSUP=e.WASI_ENOTSOCK=e.WASI_ENOTRECOVERABLE=e.WASI_ENOTEMPTY=e.WASI_ENOTDIR=e.WASI_ENOTCONN=e.WASI_ENOSYS=e.WASI_ENOSPC=e.WASI_ENOPROTOOPT=void 0,e.RIGHTS_REGULAR_FILE_BASE=e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL=e.WASI_RIGHT_SOCK_SHUTDOWN=e.WASI_RIGHT_POLL_FD_READWRITE=e.WASI_RIGHT_PATH_UNLINK_FILE=e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=e.WASI_RIGHT_PATH_SYMLINK=e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=e.WASI_RIGHT_FD_FILESTAT_GET=e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=e.WASI_RIGHT_PATH_FILESTAT_GET=e.WASI_RIGHT_PATH_RENAME_TARGET=e.WASI_RIGHT_PATH_RENAME_SOURCE=e.WASI_RIGHT_PATH_READLINK=e.WASI_RIGHT_FD_READDIR=e.WASI_RIGHT_PATH_OPEN=e.WASI_RIGHT_PATH_LINK_TARGET=e.WASI_RIGHT_PATH_LINK_SOURCE=e.WASI_RIGHT_PATH_CREATE_FILE=e.WASI_RIGHT_PATH_CREATE_DIRECTORY=e.WASI_RIGHT_FD_ALLOCATE=e.WASI_RIGHT_FD_ADVISE=e.WASI_RIGHT_FD_WRITE=e.WASI_RIGHT_FD_TELL=e.WASI_RIGHT_FD_SYNC=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=e.WASI_RIGHT_FD_SEEK=e.WASI_RIGHT_FD_READ=e.WASI_RIGHT_FD_DATASYNC=e.WASI_FDFLAG_SYNC=e.WASI_FDFLAG_RSYNC=e.WASI_FDFLAG_NONBLOCK=e.WASI_FDFLAG_DSYNC=e.WASI_FDFLAG_APPEND=e.WASI_FILETYPE_SYMBOLIC_LINK=e.WASI_FILETYPE_SOCKET_STREAM=e.WASI_FILETYPE_SOCKET_DGRAM=e.WASI_FILETYPE_REGULAR_FILE=e.WASI_FILETYPE_DIRECTORY=e.WASI_FILETYPE_CHARACTER_DEVICE=e.WASI_FILETYPE_BLOCK_DEVICE=e.WASI_FILETYPE_UNKNOWN=e.WASI_SIGXFSZ=e.WASI_SIGXCPU=void 0,e.SIGNAL_MAP=e.ERROR_MAP=e.WASI_WHENCE_END=e.WASI_WHENCE_CUR=e.WASI_WHENCE_SET=e.WASI_STDERR_FILENO=e.WASI_STDOUT_FILENO=e.WASI_STDIN_FILENO=e.WASI_DIRCOOKIE_START=e.WASI_PREOPENTYPE_DIR=e.WASI_O_TRUNC=e.WASI_O_EXCL=e.WASI_O_DIRECTORY=e.WASI_O_CREAT=e.WASI_FILESTAT_SET_MTIM_NOW=e.WASI_FILESTAT_SET_MTIM=e.WASI_FILESTAT_SET_ATIM_NOW=e.WASI_FILESTAT_SET_ATIM=e.WASI_EVENTTYPE_FD_WRITE=e.WASI_EVENTTYPE_FD_READ=e.WASI_EVENTTYPE_CLOCK=e.WASI_CLOCK_THREAD_CPUTIME_ID=e.WASI_CLOCK_PROCESS_CPUTIME_ID=e.WASI_CLOCK_MONOTONIC=e.WASI_CLOCK_REALTIME=e.RIGHTS_TTY_INHERITING=e.RIGHTS_TTY_BASE=e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_SOCKET_BASE=e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE=e.RIGHTS_REGULAR_FILE_INHERITING=void 0,e.WASI_ESUCCESS=0,e.WASI_E2BIG=1,e.WASI_EACCES=2,e.WASI_EADDRINUSE=3,e.WASI_EADDRNOTAVAIL=4,e.WASI_EAFNOSUPPORT=5,e.WASI_EAGAIN=6,e.WASI_EALREADY=7,e.WASI_EBADF=8,e.WASI_EBADMSG=9,e.WASI_EBUSY=10,e.WASI_ECANCELED=11,e.WASI_ECHILD=12,e.WASI_ECONNABORTED=13,e.WASI_ECONNREFUSED=14,e.WASI_ECONNRESET=15,e.WASI_EDEADLK=16,e.WASI_EDESTADDRREQ=17,e.WASI_EDOM=18,e.WASI_EDQUOT=19,e.WASI_EEXIST=20,e.WASI_EFAULT=21,e.WASI_EFBIG=22,e.WASI_EHOSTUNREACH=23,e.WASI_EIDRM=24,e.WASI_EILSEQ=25,e.WASI_EINPROGRESS=26,e.WASI_EINTR=27,e.WASI_EINVAL=28,e.WASI_EIO=29,e.WASI_EISCONN=30,e.WASI_EISDIR=31,e.WASI_ELOOP=32,e.WASI_EMFILE=33,e.WASI_EMLINK=34,e.WASI_EMSGSIZE=35,e.WASI_EMULTIHOP=36,e.WASI_ENAMETOOLONG=37,e.WASI_ENETDOWN=38,e.WASI_ENETRESET=39,e.WASI_ENETUNREACH=40,e.WASI_ENFILE=41,e.WASI_ENOBUFS=42,e.WASI_ENODEV=43,e.WASI_ENOENT=44,e.WASI_ENOEXEC=45,e.WASI_ENOLCK=46,e.WASI_ENOLINK=47,e.WASI_ENOMEM=48,e.WASI_ENOMSG=49,e.WASI_ENOPROTOOPT=50,e.WASI_ENOSPC=51,e.WASI_ENOSYS=52,e.WASI_ENOTCONN=53,e.WASI_ENOTDIR=54,e.WASI_ENOTEMPTY=55,e.WASI_ENOTRECOVERABLE=56,e.WASI_ENOTSOCK=57,e.WASI_ENOTSUP=58,e.WASI_ENOTTY=59,e.WASI_ENXIO=60,e.WASI_EOVERFLOW=61,e.WASI_EOWNERDEAD=62,e.WASI_EPERM=63,e.WASI_EPIPE=64,e.WASI_EPROTO=65,e.WASI_EPROTONOSUPPORT=66,e.WASI_EPROTOTYPE=67,e.WASI_ERANGE=68,e.WASI_EROFS=69,e.WASI_ESPIPE=70,e.WASI_ESRCH=71,e.WASI_ESTALE=72,e.WASI_ETIMEDOUT=73,e.WASI_ETXTBSY=74,e.WASI_EXDEV=75,e.WASI_ENOTCAPABLE=76,e.WASI_SIGABRT=0,e.WASI_SIGALRM=1,e.WASI_SIGBUS=2,e.WASI_SIGCHLD=3,e.WASI_SIGCONT=4,e.WASI_SIGFPE=5,e.WASI_SIGHUP=6,e.WASI_SIGILL=7,e.WASI_SIGINT=8,e.WASI_SIGKILL=9,e.WASI_SIGPIPE=10,e.WASI_SIGQUIT=11,e.WASI_SIGSEGV=12,e.WASI_SIGSTOP=13,e.WASI_SIGTERM=14,e.WASI_SIGTRAP=15,e.WASI_SIGTSTP=16,e.WASI_SIGTTIN=17,e.WASI_SIGTTOU=18,e.WASI_SIGURG=19,e.WASI_SIGUSR1=20,e.WASI_SIGUSR2=21,e.WASI_SIGVTALRM=22,e.WASI_SIGXCPU=23,e.WASI_SIGXFSZ=24,e.WASI_FILETYPE_UNKNOWN=0,e.WASI_FILETYPE_BLOCK_DEVICE=1,e.WASI_FILETYPE_CHARACTER_DEVICE=2,e.WASI_FILETYPE_DIRECTORY=3,e.WASI_FILETYPE_REGULAR_FILE=4,e.WASI_FILETYPE_SOCKET_DGRAM=5,e.WASI_FILETYPE_SOCKET_STREAM=6,e.WASI_FILETYPE_SYMBOLIC_LINK=7,e.WASI_FDFLAG_APPEND=1,e.WASI_FDFLAG_DSYNC=2,e.WASI_FDFLAG_NONBLOCK=4,e.WASI_FDFLAG_RSYNC=8,e.WASI_FDFLAG_SYNC=16,e.WASI_RIGHT_FD_DATASYNC=BigInt(1),e.WASI_RIGHT_FD_READ=BigInt(2),e.WASI_RIGHT_FD_SEEK=BigInt(4),e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=BigInt(8),e.WASI_RIGHT_FD_SYNC=BigInt(16),e.WASI_RIGHT_FD_TELL=BigInt(32),e.WASI_RIGHT_FD_WRITE=BigInt(64),e.WASI_RIGHT_FD_ADVISE=BigInt(128),e.WASI_RIGHT_FD_ALLOCATE=BigInt(256),e.WASI_RIGHT_PATH_CREATE_DIRECTORY=BigInt(512),e.WASI_RIGHT_PATH_CREATE_FILE=BigInt(1024),e.WASI_RIGHT_PATH_LINK_SOURCE=BigInt(2048),e.WASI_RIGHT_PATH_LINK_TARGET=BigInt(4096),e.WASI_RIGHT_PATH_OPEN=BigInt(8192),e.WASI_RIGHT_FD_READDIR=BigInt(16384),e.WASI_RIGHT_PATH_READLINK=BigInt(32768),e.WASI_RIGHT_PATH_RENAME_SOURCE=BigInt(65536),e.WASI_RIGHT_PATH_RENAME_TARGET=BigInt(131072),e.WASI_RIGHT_PATH_FILESTAT_GET=BigInt(262144),e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=BigInt(524288),e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=BigInt(1048576),e.WASI_RIGHT_FD_FILESTAT_GET=BigInt(2097152),e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=BigInt(4194304),e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=BigInt(8388608),e.WASI_RIGHT_PATH_SYMLINK=BigInt(16777216),e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=BigInt(33554432),e.WASI_RIGHT_PATH_UNLINK_FILE=BigInt(67108864),e.WASI_RIGHT_POLL_FD_READWRITE=BigInt(134217728),e.WASI_RIGHT_SOCK_SHUTDOWN=BigInt(268435456),e.RIGHTS_ALL=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_REGULAR_FILE_BASE=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_REGULAR_FILE_INHERITING=BigInt(0),e.RIGHTS_DIRECTORY_BASE=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE|e.RIGHTS_REGULAR_FILE_BASE,e.RIGHTS_SOCKET_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_ALL,e.RIGHTS_TTY_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_TTY_INHERITING=BigInt(0),e.WASI_CLOCK_REALTIME=0,e.WASI_CLOCK_MONOTONIC=1,e.WASI_CLOCK_PROCESS_CPUTIME_ID=2,e.WASI_CLOCK_THREAD_CPUTIME_ID=3,e.WASI_EVENTTYPE_CLOCK=0,e.WASI_EVENTTYPE_FD_READ=1,e.WASI_EVENTTYPE_FD_WRITE=2,e.WASI_FILESTAT_SET_ATIM=1,e.WASI_FILESTAT_SET_ATIM_NOW=2,e.WASI_FILESTAT_SET_MTIM=4,e.WASI_FILESTAT_SET_MTIM_NOW=8,e.WASI_O_CREAT=1,e.WASI_O_DIRECTORY=2,e.WASI_O_EXCL=4,e.WASI_O_TRUNC=8,e.WASI_PREOPENTYPE_DIR=0,e.WASI_DIRCOOKIE_START=0,e.WASI_STDIN_FILENO=0,e.WASI_STDOUT_FILENO=1,e.WASI_STDERR_FILENO=2,e.WASI_WHENCE_SET=0,e.WASI_WHENCE_CUR=1,e.WASI_WHENCE_END=2,e.ERROR_MAP={E2BIG:e.WASI_E2BIG,EACCES:e.WASI_EACCES,EADDRINUSE:e.WASI_EADDRINUSE,EADDRNOTAVAIL:e.WASI_EADDRNOTAVAIL,EAFNOSUPPORT:e.WASI_EAFNOSUPPORT,EALREADY:e.WASI_EALREADY,EAGAIN:e.WASI_EAGAIN,EBADF:e.WASI_EBADF,EBADMSG:e.WASI_EBADMSG,EBUSY:e.WASI_EBUSY,ECANCELED:e.WASI_ECANCELED,ECHILD:e.WASI_ECHILD,ECONNABORTED:e.WASI_ECONNABORTED,ECONNREFUSED:e.WASI_ECONNREFUSED,ECONNRESET:e.WASI_ECONNRESET,EDEADLOCK:e.WASI_EDEADLK,EDESTADDRREQ:e.WASI_EDESTADDRREQ,EDOM:e.WASI_EDOM,EDQUOT:e.WASI_EDQUOT,EEXIST:e.WASI_EEXIST,EFAULT:e.WASI_EFAULT,EFBIG:e.WASI_EFBIG,EHOSTDOWN:e.WASI_EHOSTUNREACH,EHOSTUNREACH:e.WASI_EHOSTUNREACH,EIDRM:e.WASI_EIDRM,EILSEQ:e.WASI_EILSEQ,EINPROGRESS:e.WASI_EINPROGRESS,EINTR:e.WASI_EINTR,EINVAL:e.WASI_EINVAL,EIO:e.WASI_EIO,EISCONN:e.WASI_EISCONN,EISDIR:e.WASI_EISDIR,ELOOP:e.WASI_ELOOP,EMFILE:e.WASI_EMFILE,EMLINK:e.WASI_EMLINK,EMSGSIZE:e.WASI_EMSGSIZE,EMULTIHOP:e.WASI_EMULTIHOP,ENAMETOOLONG:e.WASI_ENAMETOOLONG,ENETDOWN:e.WASI_ENETDOWN,ENETRESET:e.WASI_ENETRESET,ENETUNREACH:e.WASI_ENETUNREACH,ENFILE:e.WASI_ENFILE,ENOBUFS:e.WASI_ENOBUFS,ENODEV:e.WASI_ENODEV,ENOENT:e.WASI_ENOENT,ENOEXEC:e.WASI_ENOEXEC,ENOLCK:e.WASI_ENOLCK,ENOLINK:e.WASI_ENOLINK,ENOMEM:e.WASI_ENOMEM,ENOMSG:e.WASI_ENOMSG,ENOPROTOOPT:e.WASI_ENOPROTOOPT,ENOSPC:e.WASI_ENOSPC,ENOSYS:e.WASI_ENOSYS,ENOTCONN:e.WASI_ENOTCONN,ENOTDIR:e.WASI_ENOTDIR,ENOTEMPTY:e.WASI_ENOTEMPTY,ENOTRECOVERABLE:e.WASI_ENOTRECOVERABLE,ENOTSOCK:e.WASI_ENOTSOCK,ENOTTY:e.WASI_ENOTTY,ENXIO:e.WASI_ENXIO,EOVERFLOW:e.WASI_EOVERFLOW,EOWNERDEAD:e.WASI_EOWNERDEAD,EPERM:e.WASI_EPERM,EPIPE:e.WASI_EPIPE,EPROTO:e.WASI_EPROTO,EPROTONOSUPPORT:e.WASI_EPROTONOSUPPORT,EPROTOTYPE:e.WASI_EPROTOTYPE,ERANGE:e.WASI_ERANGE,EROFS:e.WASI_EROFS,ESPIPE:e.WASI_ESPIPE,ESRCH:e.WASI_ESRCH,ESTALE:e.WASI_ESTALE,ETIMEDOUT:e.WASI_ETIMEDOUT,ETXTBSY:e.WASI_ETXTBSY,EXDEV:e.WASI_EXDEV},e.SIGNAL_MAP={[e.WASI_SIGHUP]:"SIGHUP",[e.WASI_SIGINT]:"SIGINT",[e.WASI_SIGQUIT]:"SIGQUIT",[e.WASI_SIGILL]:"SIGILL",[e.WASI_SIGTRAP]:"SIGTRAP",[e.WASI_SIGABRT]:"SIGABRT",[e.WASI_SIGBUS]:"SIGBUS",[e.WASI_SIGFPE]:"SIGFPE",[e.WASI_SIGKILL]:"SIGKILL",[e.WASI_SIGUSR1]:"SIGUSR1",[e.WASI_SIGSEGV]:"SIGSEGV",[e.WASI_SIGUSR2]:"SIGUSR2",[e.WASI_SIGPIPE]:"SIGPIPE",[e.WASI_SIGALRM]:"SIGALRM",[e.WASI_SIGTERM]:"SIGTERM",[e.WASI_SIGCHLD]:"SIGCHLD",[e.WASI_SIGCONT]:"SIGCONT",[e.WASI_SIGSTOP]:"SIGSTOP",[e.WASI_SIGTSTP]:"SIGTSTP",[e.WASI_SIGTTIN]:"SIGTTIN",[e.WASI_SIGTTOU]:"SIGTTOU",[e.WASI_SIGURG]:"SIGURG",[e.WASI_SIGXCPU]:"SIGXCPU",[e.WASI_SIGXFSZ]:"SIGXFSZ",[e.WASI_SIGVTALRM]:"SIGVTALRM"}},8994:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystem=void 0;const o=i(n(610)),s=n(5370),a=n(4539);function u(t,e){if("zip"==t.type)return function(t,e="/"){const n=(0,s.createFsFromVolume)(new s.Volume);return n.mkdirSync(e,{recursive:!0}),(0,o.default)({data:t,fs:n,directory:e}),n}(t.data,t.mountpoint);if("zip-async"==t.type)return function(t,e="/"){const n=(0,s.createFsFromVolume)(new s.Volume),i=(async()=>{let i;try{i=await t()}catch(t){throw r.warn(`FAILED to load async filesystem for '${e}' - ${t}`),t}(0,o.default)({data:i,fs:n,directory:e})})();return n.waitUntilLoaded=()=>i,n}(t.getData,t.mountpoint);if("zipfile"==t.type)throw Error(`you must convert zipfile -- read ${t.zipfile} into memory`);if("zipurl"==t.type)throw Error(`you must convert zipurl -- read ${t.zipurl} into memory`);if("native"==t.type)return null==e?e:function(t){function e(e){let n=0;for(const r in s.fs.constants)r.startsWith("O_")&&e&s.fs.constants[r]&&(n|=t.constants[r]);return n}const n={...t.promises,open:async(e,n,r)=>await t.promises.open(e,n,r)};return{...{...t,promises:n},open:async(n,r,i)=>await t.open(n,e(r),i),openSync:(n,r,i)=>t.openSync(n,e(r),i),constants:s.fs.constants}}(e);if("mem"==t.type)return c(t.contents);if("dev"==t.type)return function(){const t=s.Volume.fromJSON({"/dev/stdin":"","/dev/stdout":"","/dev/stderr":""});t.releasedFds=[0,1,2];const e=t.openSync("/dev/stderr","w"),n=t.openSync("/dev/stdout","w"),r=t.openSync("/dev/stdin","r");if(2!=e)throw Error(`invalid handle for stderr: ${e}`);if(1!=n)throw Error(`invalid handle for stdout: ${n}`);if(0!=r)throw Error(`invalid handle for stdin: ${r}`);return(0,s.createFsFromVolume)(t)}();throw Error(`unknown spec type - ${JSON.stringify(t)}`)}function c(t){const e=null!=t?s.Volume.fromJSON(t):new s.Volume;return(0,s.createFsFromVolume)(e)}e.createFileSystem=function(t,e){if(0==t.length)return c();if(1==t.length)return u(t[0],e)??c();const n=new a.Union,r=[];for(const i of t){const t=u(i,e);null!=t&&(n.use(t),null!=t.waitUntilLoaded&&r.push(t.waitUntilLoaded.bind(t)))}return{...n,constants:s.fs.constants,waitUntilLoaded:async()=>{for(const t of r)await t()}}}},7545:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,i)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return i(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.constants=e.createFileSystem=e.SOCKET_DEFAULT_RIGHTS=void 0;const s=o(n(8019));Object.defineProperty(e,"SOCKET_DEFAULT_RIGHTS",{enumerable:!0,get:function(){return s.SOCKET_DEFAULT_RIGHTS}}),e.default=s.default;var a=n(8994);Object.defineProperty(e,"createFileSystem",{enumerable:!0,get:function(){return a.createFileSystem}});const u=o(n(8732));e.constants=u},1359:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WASIKillError=e.WASIExitError=e.WASIError=void 0;class n extends Error{constructor(t){super(),this.errno=t,Object.setPrototypeOf(this,n.prototype)}}e.WASIError=n;class r extends Error{constructor(t){super(`WASI Exit error: ${t}`),this.code=t,Object.setPrototypeOf(this,r.prototype)}}e.WASIExitError=r;class i extends Error{constructor(t){super(`WASI Kill signal: ${t}`),this.signal=t,Object.setPrototypeOf(this,i.prototype)}}e.WASIKillError=i},610:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(6470),i=n(8083);e.default=function({data:t,fs:e,directory:n}){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),!(t instanceof Uint8Array))throw Error("impossible");const o=(0,i.unzipSync)(t);for(const[t,i]of Object.entries(o)){const o=(0,r.join)(n,t);e.mkdirSync((0,r.dirname)(o),{recursive:!0}),o.endsWith("/")||(e.writeFileSync(o,i),e.chmodSync(o,511))}}},8019:function(t,e,n){"use strict";var r=n(5108),i=n(8764).Buffer,o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.SOCKET_DEFAULT_RIGHTS=void 0;const s=o(n(1227)),a=(0,s.default)("wasi"),u=(0,s.default)("wasi:open"),c=n(1359),l=o(n(5054)),f=n(8732),h=f.WASI_RIGHT_FD_DATASYNC|f.WASI_RIGHT_FD_READ|f.WASI_RIGHT_FD_SYNC|f.WASI_RIGHT_FD_ADVISE|f.WASI_RIGHT_FD_FILESTAT_GET|f.WASI_RIGHT_POLL_FD_READWRITE,p=f.WASI_RIGHT_FD_DATASYNC|f.WASI_RIGHT_FD_WRITE|f.WASI_RIGHT_FD_SYNC|f.WASI_RIGHT_FD_ADVISE|f.WASI_RIGHT_FD_FILESTAT_GET|f.WASI_RIGHT_POLL_FD_READWRITE,d=p;e.SOCKET_DEFAULT_RIGHTS=f.WASI_RIGHT_FD_DATASYNC|f.WASI_RIGHT_FD_READ|f.WASI_RIGHT_FD_WRITE|f.WASI_RIGHT_FD_ADVISE|f.WASI_RIGHT_FD_FILESTAT_GET|f.WASI_RIGHT_POLL_FD_READWRITE|f.WASI_RIGHT_FD_FDSTAT_SET_FLAGS;const _=t=>{const e=Math.trunc(t),n=BigInt(Math.round(1e6*(t-e)));return BigInt(e)*BigInt(1e6)+n},g=t=>{"number"==typeof t&&(t=Math.trunc(t));const e=BigInt(t);return Number(e/BigInt(1e6))},y=t=>(...e)=>{try{return t(...e)}catch(t){let e=t;for(;null!=e.prev;)e=e.prev;if(e?.code&&"string"==typeof e?.code)return f.ERROR_MAP[e.code]||f.WASI_EINVAL;if(e instanceof c.WASIError)return e.errno;throw e}},m=(t,e)=>{const n=t.FD_MAP.get(e);if(!n)throw new c.WASIError(f.WASI_EBADF);if(void 0===n.filetype){const r=t.fstatSync(n.real),{filetype:i,rightsBase:o,rightsInheriting:s}=S(t,e,r);n.filetype=i,n.rights||(n.rights={base:o,inheriting:s})}return n},S=(t,e,n)=>{switch(!0){case n.isBlockDevice():return{filetype:f.WASI_FILETYPE_BLOCK_DEVICE,rightsBase:f.RIGHTS_BLOCK_DEVICE_BASE,rightsInheriting:f.RIGHTS_BLOCK_DEVICE_INHERITING};case n.isCharacterDevice():{const n=f.WASI_FILETYPE_CHARACTER_DEVICE;return void 0!==e&&t.bindings.isTTY(e)?{filetype:n,rightsBase:f.RIGHTS_TTY_BASE,rightsInheriting:f.RIGHTS_TTY_INHERITING}:{filetype:n,rightsBase:f.RIGHTS_CHARACTER_DEVICE_BASE,rightsInheriting:f.RIGHTS_CHARACTER_DEVICE_INHERITING}}case n.isDirectory():return{filetype:f.WASI_FILETYPE_DIRECTORY,rightsBase:f.RIGHTS_DIRECTORY_BASE,rightsInheriting:f.RIGHTS_DIRECTORY_INHERITING};case n.isFIFO():return{filetype:f.WASI_FILETYPE_SOCKET_STREAM,rightsBase:f.RIGHTS_SOCKET_BASE,rightsInheriting:f.RIGHTS_SOCKET_INHERITING};case n.isFile():return{filetype:f.WASI_FILETYPE_REGULAR_FILE,rightsBase:f.RIGHTS_REGULAR_FILE_BASE,rightsInheriting:f.RIGHTS_REGULAR_FILE_INHERITING};case n.isSocket():return{filetype:f.WASI_FILETYPE_SOCKET_STREAM,rightsBase:f.RIGHTS_SOCKET_BASE,rightsInheriting:f.RIGHTS_SOCKET_INHERITING};case n.isSymbolicLink():return{filetype:f.WASI_FILETYPE_SYMBOLIC_LINK,rightsBase:BigInt(0),rightsInheriting:BigInt(0)};default:return{filetype:f.WASI_FILETYPE_UNKNOWN,rightsBase:BigInt(0),rightsInheriting:BigInt(0)}}};let E=!1;e.default=class{constructor(t){this.lastStdin=0,this.env={},this.sleep=t.sleep,this.getStdin=t.getStdin,this.sendStdout=t.sendStdout,this.sendStderr=t.sendStderr;let e={};t.preopens&&(e=t.preopens),t&&t.env&&(this.env=t.env);let n=[];t&&t.args&&(n=t.args),this.memory=void 0,this.view=void 0,this.bindings=t.bindings;const o=this.bindings.fs;this.FD_MAP=new Map([[f.WASI_STDIN_FILENO,{real:0,filetype:f.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:h,inheriting:BigInt(0)},path:"/dev/stdin"}],[f.WASI_STDOUT_FILENO,{real:1,filetype:f.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:p,inheriting:BigInt(0)},path:"/dev/stdout"}],[f.WASI_STDERR_FILENO,{real:2,filetype:f.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:d,inheriting:BigInt(0)},path:"/dev/stderr"}]]);const s=this.bindings.path;for(const[t,n]of Object.entries(e)){const e=o.openSync(n,o.constants.O_RDONLY),r=this.getUnusedFileDescriptor();this.FD_MAP.set(r,{real:e,filetype:f.WASI_FILETYPE_DIRECTORY,rights:{base:f.RIGHTS_DIRECTORY_BASE,inheriting:f.RIGHTS_DIRECTORY_INHERITING},fakePath:t,path:n})}const v=(t,e)=>(this.refreshMemory(),Array.from({length:e},((e,n)=>{const i=t+8*n,o=this.view.getUint32(i,!0);let s=this.view.getUint32(i+4,!0);s>this.memory.buffer.byteLength-o&&(r.log({buf:o,bufLen:s,total_memory:this.memory.buffer.byteLength}),a("getiovs: warning -- truncating buffer to fit in memory"),s=Math.min(s,Math.max(0,this.memory.buffer.byteLength-o)));try{const t=new Uint8Array(this.memory.buffer,o,s);return(0,l.default)(t)}catch(t){throw r.warn("WASI.getiovs -- invalid buffer",t),new c.WASIError(f.WASI_EINVAL)}}))),I=(t,e)=>{const n=m(this,t);if(e!==BigInt(0)&&(n.rights.base&e)===BigInt(0))throw new c.WASIError(f.WASI_EPERM);return n},b=this.bindings.hrtime(),w=t=>{switch(t){case f.WASI_CLOCK_MONOTONIC:return this.bindings.hrtime();case f.WASI_CLOCK_REALTIME:return _(Date.now());case f.WASI_CLOCK_PROCESS_CPUTIME_ID:case f.WASI_CLOCK_THREAD_CPUTIME_ID:return this.bindings.hrtime()-b;default:return null}};this.wasiImport={args_get:(t,e)=>{this.refreshMemory();let r=t,o=e;return n.forEach((t=>{this.view.setUint32(r,o,!0),r+=4,o+=i.from(this.memory.buffer).write(`${t}\0`,o)})),f.WASI_ESUCCESS},args_sizes_get:(t,e)=>{this.refreshMemory(),this.view.setUint32(t,n.length,!0);const r=n.reduce(((t,e)=>t+i.byteLength(e)+1),0);return this.view.setUint32(e,r,!0),f.WASI_ESUCCESS},environ_get:(t,e)=>{this.refreshMemory();let n=t,r=e;return Object.entries(this.env).forEach((([t,e])=>{this.view.setUint32(n,r,!0),n+=4,r+=i.from(this.memory.buffer).write(`${t}=${e}\0`,r)})),f.WASI_ESUCCESS},environ_sizes_get:(t,e)=>{this.refreshMemory();const n=Object.entries(this.env).map((([t,e])=>`${t}=${e}\0`)),r=n.reduce(((t,e)=>t+i.byteLength(e)),0);return this.view.setUint32(t,n.length,!0),this.view.setUint32(e,r,!0),f.WASI_ESUCCESS},clock_res_get:(t,e)=>{let n;switch(t){case f.WASI_CLOCK_MONOTONIC:case f.WASI_CLOCK_PROCESS_CPUTIME_ID:case f.WASI_CLOCK_THREAD_CPUTIME_ID:n=BigInt(1);break;case f.WASI_CLOCK_REALTIME:n=BigInt(1e3)}if(!n)throw Error("invalid clockId");return this.view.setBigUint64(e,n),f.WASI_ESUCCESS},clock_time_get:(t,e,n)=>{this.refreshMemory();const r=w(t);return null===r?f.WASI_EINVAL:(this.view.setBigUint64(n,BigInt(r),!0),f.WASI_ESUCCESS)},fd_advise:y(((t,e,n,r)=>(I(t,f.WASI_RIGHT_FD_ADVISE),f.WASI_ENOSYS))),fd_allocate:y(((t,e,n)=>(I(t,f.WASI_RIGHT_FD_ALLOCATE),f.WASI_ENOSYS))),fd_close:y((t=>{const e=I(t,BigInt(0));return o.closeSync(e.real),this.FD_MAP.delete(t),f.WASI_ESUCCESS})),fd_datasync:y((t=>{const e=I(t,f.WASI_RIGHT_FD_DATASYNC);return o.fdatasyncSync(e.real),f.WASI_ESUCCESS})),fd_fdstat_get:y(((t,e)=>{const n=I(t,BigInt(0));if(this.refreshMemory(),null==n.filetype)throw Error("stats.filetype must be set");return this.view.setUint8(e,n.filetype),this.view.setUint16(e+2,0,!0),this.view.setUint16(e+4,0,!0),this.view.setBigUint64(e+8,BigInt(n.rights.base),!0),this.view.setBigUint64(e+8+8,BigInt(n.rights.inheriting),!0),f.WASI_ESUCCESS})),fd_fdstat_set_flags:y(((t,e)=>(I(t,f.WASI_RIGHT_FD_FDSTAT_SET_FLAGS),0==this.wasiImport.sock_fcntlSetFlags(t,e)?f.WASI_ESUCCESS:f.WASI_ENOSYS))),fd_fdstat_set_rights:y(((t,e,n)=>{const r=I(t,BigInt(0));return(r.rights.base|e)>r.rights.base||(r.rights.inheriting|n)>r.rights.inheriting?f.WASI_EPERM:(r.rights.base=e,r.rights.inheriting=n,f.WASI_ESUCCESS)})),fd_filestat_get:y(((t,e)=>{const n=I(t,f.WASI_RIGHT_FD_FILESTAT_GET),r=this.fstatSync(n.real);if(this.refreshMemory(),this.view.setBigUint64(e,BigInt(r.dev),!0),e+=8,this.view.setBigUint64(e,BigInt(r.ino),!0),e+=8,null==n.filetype)throw Error("stats.filetype must be set");return this.view.setUint8(e,n.filetype),e+=8,this.view.setBigUint64(e,BigInt(r.nlink),!0),e+=8,this.view.setBigUint64(e,BigInt(r.size),!0),e+=8,this.view.setBigUint64(e,_(r.atimeMs),!0),e+=8,this.view.setBigUint64(e,_(r.mtimeMs),!0),e+=8,this.view.setBigUint64(e,_(r.ctimeMs),!0),f.WASI_ESUCCESS})),fd_filestat_set_size:y(((t,e)=>{const n=I(t,f.WASI_RIGHT_FD_FILESTAT_SET_SIZE);return o.ftruncateSync(n.real,Number(e)),f.WASI_ESUCCESS})),fd_filestat_set_times:y(((t,e,n,r)=>{const i=I(t,f.WASI_RIGHT_FD_FILESTAT_SET_TIMES),s=this.fstatSync(i.real);let a=s.atime,u=s.mtime;const c=g(w(f.WASI_CLOCK_REALTIME)),l=f.WASI_FILESTAT_SET_ATIM|f.WASI_FILESTAT_SET_ATIM_NOW;if((r&l)===l)return f.WASI_EINVAL;const h=f.WASI_FILESTAT_SET_MTIM|f.WASI_FILESTAT_SET_MTIM_NOW;return(r&h)===h?f.WASI_EINVAL:((r&f.WASI_FILESTAT_SET_ATIM)===f.WASI_FILESTAT_SET_ATIM?a=g(e):(r&f.WASI_FILESTAT_SET_ATIM_NOW)===f.WASI_FILESTAT_SET_ATIM_NOW&&(a=c),(r&f.WASI_FILESTAT_SET_MTIM)===f.WASI_FILESTAT_SET_MTIM?u=g(n):(r&f.WASI_FILESTAT_SET_MTIM_NOW)===f.WASI_FILESTAT_SET_MTIM_NOW&&(u=c),o.futimesSync(i.real,new Date(a),new Date(u)),f.WASI_ESUCCESS)})),fd_prestat_get:y(((t,e)=>{const n=I(t,BigInt(0));return this.refreshMemory(),this.view.setUint8(e,f.WASI_PREOPENTYPE_DIR),this.view.setUint32(e+4,i.byteLength(n.fakePath??n.path??""),!0),f.WASI_ESUCCESS})),fd_prestat_dir_name:y(((t,e,n)=>{const r=I(t,BigInt(0));return this.refreshMemory(),i.from(this.memory.buffer).write(r.fakePath??r.path??"",e,n,"utf8"),f.WASI_ESUCCESS})),fd_pwrite:y(((t,e,n,r,i)=>{const s=I(t,f.WASI_RIGHT_FD_WRITE|f.WASI_RIGHT_FD_SEEK);let a=0;return v(e,n).forEach((t=>{let e=0;for(;e<t.byteLength;)e+=o.writeSync(s.real,t,e,t.byteLength-e,Number(r)+a+e);a+=e})),this.view.setUint32(i,a,!0),f.WASI_ESUCCESS})),fd_write:y(((t,e,n,r)=>{const i=I(t,f.WASI_RIGHT_FD_WRITE),s=t==f.WASI_STDOUT_FILENO,a=t==f.WASI_STDERR_FILENO;let u=0;return v(e,n).forEach((t=>{if(0!=t.byteLength)if(s&&null!=this.sendStdout)this.sendStdout(t),u+=t.byteLength;else if(a&&null!=this.sendStderr)this.sendStderr(t),u+=t.byteLength;else{let e=0;for(;e<t.byteLength;){const n=o.writeSync(i.real,t,e,t.byteLength-e,i.offset?Number(i.offset):null);i.offset&&(i.offset+=BigInt(n)),e+=n}u+=e}})),this.view.setUint32(r,u,!0),f.WASI_ESUCCESS})),fd_pread:y(((t,e,n,r,i)=>{const s=I(t,f.WASI_RIGHT_FD_READ|f.WASI_RIGHT_FD_SEEK);let a=0;t:for(const t of v(e,n)){let e=0;for(;e<t.byteLength;){const n=t.byteLength-e,i=o.readSync(s.real,t,e,t.byteLength-e,Number(r)+a+e);if(e+=i,a+=i,0===i||i<n)break t}a+=e}return this.view.setUint32(i,a,!0),f.WASI_ESUCCESS})),fd_read:y(((t,e,n,i)=>{const s=I(t,f.WASI_RIGHT_FD_READ),a=t==f.WASI_STDIN_FILENO;let u=0;t:for(const t of v(e,n)){let e=0;for(;e<t.byteLength;){let n=t.byteLength-e,i=a||void 0===s.offset?null:Number(s.offset),c=0;if(a)if(null!=this.getStdin)null==this.stdinBuffer&&(this.stdinBuffer=this.getStdin()),null!=this.stdinBuffer&&(c=this.stdinBuffer.copy(t),c==this.stdinBuffer.length?this.stdinBuffer=void 0:this.stdinBuffer=this.stdinBuffer.slice(c),c>0&&(this.lastStdin=(new Date).valueOf()));else{null!=this.sleep||E||(E=!0,r.log("(cpu waiting for stdin: please define a way to sleep!) "));try{c=o.readSync(s.real,t,e,n,i)}catch(t){}0==c?this.shortPause():this.lastStdin=(new Date).valueOf()}else c=o.readSync(s.real,t,e,n,i);if(s.filetype==f.WASI_FILETYPE_REGULAR_FILE&&(s.offset=(s.offset?s.offset:BigInt(0))+BigInt(c)),e+=c,u+=c,0===c||c<n)break t}}return this.view.setUint32(i,u,!0),f.WASI_ESUCCESS})),fd_readdir:y(((t,e,n,r,a)=>{const u=I(t,f.WASI_RIGHT_FD_READDIR);this.refreshMemory();const c=o.readdirSync(u.path,{withFileTypes:!0}),l=e;for(let t=Number(r);t<c.length;t+=1){const r=c[t];let a=i.byteLength(r.name);if(e-l>n)break;if(this.view.setBigUint64(e,BigInt(t+1),!0),(e+=8)-l>n)break;const h=o.lstatSync(s.resolve(u.path,r.name));if(this.view.setBigUint64(e,BigInt(h.ino),!0),(e+=8)-l>n)break;if(this.view.setUint32(e,a,!0),(e+=4)-l>n)break;let p;switch(!0){case h.isBlockDevice():p=f.WASI_FILETYPE_BLOCK_DEVICE;break;case h.isCharacterDevice():p=f.WASI_FILETYPE_CHARACTER_DEVICE;break;case h.isDirectory():p=f.WASI_FILETYPE_DIRECTORY;break;case h.isFIFO():p=f.WASI_FILETYPE_SOCKET_STREAM;break;case h.isFile():p=f.WASI_FILETYPE_REGULAR_FILE;break;case h.isSocket():p=f.WASI_FILETYPE_SOCKET_STREAM;break;case h.isSymbolicLink():p=f.WASI_FILETYPE_SYMBOLIC_LINK;break;default:p=f.WASI_FILETYPE_UNKNOWN}if(this.view.setUint8(e,p),e+=1,(e+=3)+a>=l+n)break;i.from(this.memory.buffer).write(r.name,e),e+=a}const h=e-l;return this.view.setUint32(a,Math.min(h,n),!0),f.WASI_ESUCCESS})),fd_renumber:y(((t,e)=>(I(t,BigInt(0)),I(e,BigInt(0)),o.closeSync(this.FD_MAP.get(t).real),this.FD_MAP.set(t,this.FD_MAP.get(e)),this.FD_MAP.delete(e),f.WASI_ESUCCESS))),fd_seek:y(((t,e,n,r)=>{const i=I(t,f.WASI_RIGHT_FD_SEEK);switch(this.refreshMemory(),n){case f.WASI_WHENCE_CUR:i.offset=(i.offset?i.offset:BigInt(0))+BigInt(e);break;case f.WASI_WHENCE_END:const{size:t}=this.fstatSync(i.real);i.offset=BigInt(t)+BigInt(e);break;case f.WASI_WHENCE_SET:i.offset=BigInt(e)}if(null==i.offset)throw Error("stats.offset must be defined");return this.view.setBigUint64(r,i.offset,!0),f.WASI_ESUCCESS})),fd_tell:y(((t,e)=>{const n=I(t,f.WASI_RIGHT_FD_TELL);return this.refreshMemory(),n.offset||(n.offset=BigInt(0)),this.view.setBigUint64(e,n.offset,!0),f.WASI_ESUCCESS})),fd_sync:y((t=>{const e=I(t,f.WASI_RIGHT_FD_SYNC);return o.fsyncSync(e.real),f.WASI_ESUCCESS})),path_create_directory:y(((t,e,n)=>{const r=I(t,f.WASI_RIGHT_PATH_CREATE_DIRECTORY);if(!r.path)return f.WASI_EINVAL;this.refreshMemory();const a=i.from(this.memory.buffer,e,n).toString();return o.mkdirSync(s.resolve(r.path,a)),f.WASI_ESUCCESS})),path_filestat_get:y(((t,e,n,r,a)=>{const u=I(t,f.WASI_RIGHT_PATH_FILESTAT_GET);if(!u.path)return f.WASI_EINVAL;this.refreshMemory();const c=i.from(this.memory.buffer,n,r).toString();let l;return l=e?o.statSync(s.resolve(u.path,c)):o.lstatSync(s.resolve(u.path,c)),this.view.setBigUint64(a,BigInt(l.dev),!0),a+=8,this.view.setBigUint64(a,BigInt(l.ino),!0),a+=8,this.view.setUint8(a,S(this,void 0,l).filetype),a+=8,this.view.setBigUint64(a,BigInt(l.nlink),!0),a+=8,this.view.setBigUint64(a,BigInt(l.size),!0),a+=8,this.view.setBigUint64(a,_(l.atimeMs),!0),a+=8,this.view.setBigUint64(a,_(l.mtimeMs),!0),a+=8,this.view.setBigUint64(a,_(l.ctimeMs),!0),f.WASI_ESUCCESS})),path_filestat_set_times:y(((t,e,n,r,a,u,c)=>{const l=I(t,f.WASI_RIGHT_PATH_FILESTAT_SET_TIMES);if(!l.path)return f.WASI_EINVAL;this.refreshMemory();const h=this.fstatSync(l.real);let p=h.atime,d=h.mtime;const _=g(w(f.WASI_CLOCK_REALTIME)),y=f.WASI_FILESTAT_SET_ATIM|f.WASI_FILESTAT_SET_ATIM_NOW;if((c&y)===y)return f.WASI_EINVAL;const m=f.WASI_FILESTAT_SET_MTIM|f.WASI_FILESTAT_SET_MTIM_NOW;if((c&m)===m)return f.WASI_EINVAL;(c&f.WASI_FILESTAT_SET_ATIM)===f.WASI_FILESTAT_SET_ATIM?p=g(a):(c&f.WASI_FILESTAT_SET_ATIM_NOW)===f.WASI_FILESTAT_SET_ATIM_NOW&&(p=_),(c&f.WASI_FILESTAT_SET_MTIM)===f.WASI_FILESTAT_SET_MTIM?d=g(u):(c&f.WASI_FILESTAT_SET_MTIM_NOW)===f.WASI_FILESTAT_SET_MTIM_NOW&&(d=_);const S=i.from(this.memory.buffer,n,r).toString();return o.utimesSync(s.resolve(l.path,S),new Date(p),new Date(d)),f.WASI_ESUCCESS})),path_link:y(((t,e,n,r,a,u,c)=>{const l=I(t,f.WASI_RIGHT_PATH_LINK_SOURCE),h=I(a,f.WASI_RIGHT_PATH_LINK_TARGET);if(!l.path||!h.path)return f.WASI_EINVAL;this.refreshMemory();const p=i.from(this.memory.buffer,n,r).toString(),d=i.from(this.memory.buffer,u,c).toString();return o.linkSync(s.resolve(l.path,p),s.resolve(h.path,d)),f.WASI_ESUCCESS})),path_open:y(((t,e,n,r,a,l,h,p,d)=>{const _=I(t,f.WASI_RIGHT_PATH_OPEN);l=BigInt(l),h=BigInt(h);const g=(l&(f.WASI_RIGHT_FD_READ|f.WASI_RIGHT_FD_READDIR))!==BigInt(0),y=(l&(f.WASI_RIGHT_FD_DATASYNC|f.WASI_RIGHT_FD_WRITE|f.WASI_RIGHT_FD_ALLOCATE|f.WASI_RIGHT_FD_FILESTAT_SET_SIZE))!==BigInt(0);let S;y&&g?S=o.constants.O_RDWR:g?S=o.constants.O_RDONLY:y&&(S=o.constants.O_WRONLY);let E=l|f.WASI_RIGHT_PATH_OPEN,v=l|h;0!=(a&f.WASI_O_CREAT)&&(S|=o.constants.O_CREAT,E|=f.WASI_RIGHT_PATH_CREATE_FILE),0!=(a&f.WASI_O_DIRECTORY)&&(S|=o.constants.O_DIRECTORY),0!=(a&f.WASI_O_EXCL)&&(S|=o.constants.O_EXCL),0!=(a&f.WASI_O_TRUNC)&&(S|=o.constants.O_TRUNC,E|=f.WASI_RIGHT_PATH_FILESTAT_SET_SIZE),0!=(p&f.WASI_FDFLAG_APPEND)&&(S|=o.constants.O_APPEND),0!=(p&f.WASI_FDFLAG_DSYNC)&&(o.constants.O_DSYNC?S|=o.constants.O_DSYNC:S|=o.constants.O_SYNC,v|=f.WASI_RIGHT_FD_DATASYNC),0!=(p&f.WASI_FDFLAG_NONBLOCK)&&(S|=o.constants.O_NONBLOCK),0!=(p&f.WASI_FDFLAG_RSYNC)&&(o.constants.O_RSYNC?S|=o.constants.O_RSYNC:S|=o.constants.O_SYNC,v|=f.WASI_RIGHT_FD_SYNC),0!=(p&f.WASI_FDFLAG_SYNC)&&(S|=o.constants.O_SYNC,v|=f.WASI_RIGHT_FD_SYNC),y&&0==(S&(o.constants.O_APPEND|o.constants.O_TRUNC))&&(v|=f.WASI_RIGHT_FD_SEEK),this.refreshMemory();const b=i.from(this.memory.buffer,n,r).toString();if("dev/tty"==b)return this.view.setUint32(d,f.WASI_STDIN_FILENO,!0),f.WASI_ESUCCESS;if(u("path_open",b),b.startsWith("proc/"))throw new c.WASIError(f.WASI_EBADF);const w=s.resolve(_.path,b);let A,T,O;try{A=o.realpathSync(w)}catch(t){if("ENOENT"!==t?.code)throw t;A=w}if(y)try{T=o.statSync(A).isDirectory()}catch(t){}O=!y&&T?o.openSync(A,o.constants.O_RDONLY):o.openSync(A,S);const R=this.getUnusedFileDescriptor();return this.FD_MAP.set(R,{real:O,filetype:void 0,rights:{base:E,inheriting:v},path:A}),m(this,R),this.view.setUint32(d,R,!0),f.WASI_ESUCCESS})),path_readlink:y(((t,e,n,r,a,u)=>{const c=I(t,f.WASI_RIGHT_PATH_READLINK);if(!c.path)return f.WASI_EINVAL;this.refreshMemory();const l=i.from(this.memory.buffer,e,n).toString(),h=s.resolve(c.path,l),p=o.readlinkSync(h),d=i.from(this.memory.buffer).write(p,r,a);return this.view.setUint32(u,d,!0),f.WASI_ESUCCESS})),path_remove_directory:y(((t,e,n)=>{const r=I(t,f.WASI_RIGHT_PATH_REMOVE_DIRECTORY);if(!r.path)return f.WASI_EINVAL;this.refreshMemory();const a=i.from(this.memory.buffer,e,n).toString();return o.rmdirSync(s.resolve(r.path,a)),f.WASI_ESUCCESS})),path_rename:y(((t,e,n,r,a,u)=>{const c=I(t,f.WASI_RIGHT_PATH_RENAME_SOURCE),l=I(r,f.WASI_RIGHT_PATH_RENAME_TARGET);if(!c.path||!l.path)return f.WASI_EINVAL;this.refreshMemory();const h=i.from(this.memory.buffer,e,n).toString(),p=i.from(this.memory.buffer,a,u).toString();return o.renameSync(s.resolve(c.path,h),s.resolve(l.path,p)),f.WASI_ESUCCESS})),path_symlink:y(((t,e,n,r,a)=>{const u=I(n,f.WASI_RIGHT_PATH_SYMLINK);if(!u.path)return f.WASI_EINVAL;this.refreshMemory();const c=i.from(this.memory.buffer,t,e).toString(),l=i.from(this.memory.buffer,r,a).toString();return o.symlinkSync(c,s.resolve(u.path,l)),f.WASI_ESUCCESS})),path_unlink_file:y(((t,e,n)=>{const r=I(t,f.WASI_RIGHT_PATH_UNLINK_FILE);if(!r.path)return f.WASI_EINVAL;this.refreshMemory();const a=i.from(this.memory.buffer,e,n).toString();return o.unlinkSync(s.resolve(r.path,a)),f.WASI_ESUCCESS})),poll_oneoff:(t,e,n,i)=>{let o=0,s="",u=BigInt(0),c=-1,l="read",h=0;const p=BigInt(this.bindings.hrtime());this.refreshMemory();let d=t;for(let i=0;i<n;i+=1){const n=this.view.getBigUint64(t,!0);t+=8;const p=this.view.getUint8(t);switch(t+=1,t+=7,a.enabled&&(s=p==f.WASI_EVENTTYPE_CLOCK?"poll_oneoff (type=WASI_EVENTTYPE_CLOCK): ":p==f.WASI_EVENTTYPE_FD_READ?"poll_oneoff (type=WASI_EVENTTYPE_FD_READ): ":"poll_oneoff (type=WASI_EVENTTYPE_FD_WRITE): ",a(s)),p){case f.WASI_EVENTTYPE_CLOCK:{const r=this.view.getUint32(t,!0);t+=4,t+=4;const i=this.view.getBigUint64(t,!0);t+=8,t+=8;const c=this.view.getUint16(t,!0);t+=2,t+=6;const l=1===c;a.enabled&&a(s,{clockid:r,timeout:i,absolute:l}),l||(h=Number(i/BigInt(1e6)));let p=f.WASI_ESUCCESS;const d=w(r);if(null==d)p=f.WASI_EINVAL;else{const t=(l?i:d+i)-d;t>u&&(u=t)}this.view.setBigUint64(e,n,!0),e+=8,this.view.setUint16(e,p,!0),e+=2,this.view.setUint8(e,f.WASI_EVENTTYPE_CLOCK),e+=1,e+=5,o+=1;break}case f.WASI_EVENTTYPE_FD_READ:case f.WASI_EVENTTYPE_FD_WRITE:c=this.view.getUint32(t,!0),l=p==f.WASI_EVENTTYPE_FD_READ?"read":"write",t+=4,a(s,"fd =",c),t+=28,this.view.setBigUint64(e,n,!0),e+=8,this.view.setUint16(e,f.WASI_ENOSYS,!0),e+=2,this.view.setUint8(e,p),e+=1,e+=5,o+=1,c==f.WASI_STDIN_FILENO&&f.WASI_EVENTTYPE_FD_READ==p&&this.shortPause();break;default:return f.WASI_EINVAL}t-d!=48&&r.warn("*** BUG in wasi-js in poll_oneoff ",{i,sin:t,last_sin:d,diff:t-d}),d=t}if(this.view.setUint32(i,o,!0),2==o&&c>=0){const t=this.wasiImport.sock_pollSocket(c,l,h);if(t!=f.WASI_ENOSYS)return t}if(u>0&&(u-=BigInt(this.bindings.hrtime())-p,u>=1e6))if(null!=this.sleep||E||(E=!0,r.log("(100% cpu burning waiting for stdin: please define a way to sleep!) ")),null!=this.sleep){const t=g(u);this.sleep(t)}else{const t=BigInt(this.bindings.hrtime())+u;for(;BigInt(this.bindings.hrtime())<t;);}return f.WASI_ESUCCESS},proc_exit:t=>(this.bindings.exit(t),f.WASI_ESUCCESS),proc_raise:t=>t in f.SIGNAL_MAP?(this.bindings.kill(f.SIGNAL_MAP[t]),f.WASI_ESUCCESS):f.WASI_EINVAL,random_get:(t,e)=>(this.refreshMemory(),this.bindings.randomFillSync(new Uint8Array(this.memory.buffer),t,e),f.WASI_ESUCCESS),sched_yield:()=>f.WASI_ESUCCESS,sock_recv:()=>f.WASI_ENOSYS,sock_send:()=>f.WASI_ENOSYS,sock_shutdown:()=>f.WASI_ENOSYS,sock_fcntlSetFlags:(t,e)=>f.WASI_ENOSYS,sock_pollSocket:(t,e,n)=>f.WASI_ENOSYS},a.enabled&&Object.keys(this.wasiImport).forEach((t=>{const e=this.wasiImport[t];this.wasiImport[t]=function(...n){a(t,n);try{let t=e(...n);return a("result",t),t}catch(t){throw a("error: ",t),t}}}))}getState(){return{env:this.env,FD_MAP:this.FD_MAP,bindings:this.bindings}}setState(t){this.env=t.env,this.FD_MAP=t.FD_MAP,this.bindings=t.bindings}fstatSync(t){if(t<=2)try{return this.bindings.fs.fstatSync(t)}catch(t){const e=new Date;return{dev:0,mode:8592,nlink:1,uid:0,gid:0,rdev:0,blksize:65536,ino:0,size:0,blocks:0,atimeMs:e.valueOf(),mtimeMs:e.valueOf(),ctimeMs:e.valueOf(),birthtimeMs:0,atime:new Date,mtime:new Date,ctime:new Date,birthtime:new Date(0)}}return this.bindings.fs.fstatSync(t)}shortPause(){null!=this.sleep&&(new Date).valueOf()-this.lastStdin>2e3&&this.sleep(50)}getUnusedFileDescriptor(t=3){let e=t;for(;this.FD_MAP.has(e);)e+=1;if(e>32768)throw Error("no available file descriptors");return e}refreshMemory(){this.view&&0!==this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer))}setMemory(t){this.memory=t}start(t,e){const n=t.exports;if(null===n||"object"!=typeof n)throw new Error(`instance.exports must be an Object. Received ${n}.`);if(null==e&&!((e=n.memory)instanceof WebAssembly.Memory))throw new Error(`instance.exports.memory must be a WebAssembly.Memory. Recceived ${e}.`);this.setMemory(e),n._start&&n._start()}getImportNamespace(t){let e=null;for(let n of WebAssembly.Module.imports(t))if("function"===n.kind&&n.module.startsWith("wasi_"))if(e){if(e!==n.module)throw new Error("Multiple namespaces detected.")}else e=n.module;return e}getImports(t){switch(this.getImportNamespace(t)){case"wasi_unstable":return{wasi_unstable:this.wasiImport};case"wasi_snapshot_preview1":return{wasi_snapshot_preview1:this.wasiImport};default:throw new Error("Can't detect a WASI namespace for the WebAssembly Module")}}initWasiFdInfo(){if(null!=this.env.WASI_FD_INFO){const t=JSON.parse(this.env.WASI_FD_INFO);for(const e in t){r.log(e);const n=parseInt(e);if(this.FD_MAP.has(n))continue;const i=t[e];try{this.fstatSync(i)}catch(t){r.log("discarding ",{wasi_fd:e,real:i});continue}const o={real:i,filetype:f.WASI_FILETYPE_SOCKET_STREAM,rights:{base:h,inheriting:BigInt(0)}};this.FD_MAP.set(n,o)}r.log("after initWasiFdInfo: ",this.FD_MAP),r.log("fdInfo = ",t)}else r.log("no WASI_FD_INFO")}}},6430:(t,e,n)=>{"use strict";var r=n(4029),i=n(3083),o=n(1924),s=n(7296),a=o("Object.prototype.toString"),u=n(6410)(),c="undefined"==typeof globalThis?n.g:globalThis,l=i(),f=o("String.prototype.slice"),h={},p=Object.getPrototypeOf;u&&s&&p&&r(l,(function(t){if("function"==typeof c[t]){var e=new c[t];if(Symbol.toStringTag in e){var n=p(e),r=s(n,Symbol.toStringTag);if(!r){var i=p(n);r=s(i,Symbol.toStringTag)}h[t]=r.get}}}));var d=n(5692);t.exports=function(t){return!!d(t)&&(u&&Symbol.toStringTag in t?function(t){var e=!1;return r(h,(function(n,r){if(!e)try{var i=n.call(t);i===r&&(e=i)}catch(t){}})),e}(t):f(a(t),8,-1))}},3083:(t,e,n)=>{"use strict";var r=["BigInt64Array","BigUint64Array","Float32Array","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Uint8Array","Uint8ClampedArray"],i="undefined"==typeof globalThis?n.g:globalThis;t.exports=function(){for(var t=[],e=0;e<r.length;e++)"function"==typeof i[r[e]]&&(t[t.length]=r[e]);return t}},8083:(t,e,n)=>{"use strict";var r=n(5928),i=Uint8Array,o=Uint16Array,s=Uint32Array,a=new i([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),u=new i([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),c=new i([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),l=function(t,e){for(var n=new o(31),r=0;r<31;++r)n[r]=e+=1<<t[r-1];var i=new s(n[30]);for(r=1;r<30;++r)for(var a=n[r];a<n[r+1];++a)i[a]=a-n[r]<<5|r;return[n,i]},f=l(a,2),h=f[0],p=f[1];h[28]=258,p[258]=28;for(var d=l(u,0),_=d[0],g=d[1],y=new o(32768),m=0;m<32768;++m){var S=(43690&m)>>>1|(21845&m)<<1;S=(61680&(S=(52428&S)>>>2|(13107&S)<<2))>>>4|(3855&S)<<4,y[m]=((65280&S)>>>8|(255&S)<<8)>>>1}var E=function(t,e,n){for(var r=t.length,i=0,s=new o(e);i<r;++i)t[i]&&++s[t[i]-1];var a,u=new o(e);for(i=0;i<e;++i)u[i]=u[i-1]+s[i-1]<<1;if(n){a=new o(1<<e);var c=15-e;for(i=0;i<r;++i)if(t[i])for(var l=i<<4|t[i],f=e-t[i],h=u[t[i]-1]++<<f,p=h|(1<<f)-1;h<=p;++h)a[y[h]>>>c]=l}else for(a=new o(r),i=0;i<r;++i)t[i]&&(a[i]=y[u[t[i]-1]++]>>>15-t[i]);return a},v=new i(288);for(m=0;m<144;++m)v[m]=8;for(m=144;m<256;++m)v[m]=9;for(m=256;m<280;++m)v[m]=7;for(m=280;m<288;++m)v[m]=8;var I=new i(32);for(m=0;m<32;++m)I[m]=5;var b=E(v,9,0),w=E(v,9,1),A=E(I,5,0),T=E(I,5,1),O=function(t){for(var e=t[0],n=1;n<t.length;++n)t[n]>e&&(e=t[n]);return e},R=function(t,e,n){var r=e/8|0;return(t[r]|t[r+1]<<8)>>(7&e)&n},N=function(t,e){var n=e/8|0;return(t[n]|t[n+1]<<8|t[n+2]<<16)>>(7&e)},F=function(t){return(t+7)/8|0},W=function(t,e,n){(null==e||e<0)&&(e=0),(null==n||n>t.length)&&(n=t.length);var r=new(2==t.BYTES_PER_ELEMENT?o:4==t.BYTES_PER_ELEMENT?s:i)(n-e);return r.set(t.subarray(e,n)),r};e.FlateErrorCode={UnexpectedEOF:0,InvalidBlockType:1,InvalidLengthLiteral:2,InvalidDistance:3,StreamFinished:4,NoStreamHandler:5,InvalidHeader:6,NoCallback:7,InvalidUTF8:8,ExtraFieldTooLong:9,InvalidDate:10,FilenameTooLong:11,StreamFinishing:12,InvalidZipData:13,UnknownCompressionMethod:14};var C=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],L=function(t,e,n){var r=new Error(e||C[t]);if(r.code=t,Error.captureStackTrace&&Error.captureStackTrace(r,L),!n)throw r;return r},P=function(t,e,n){var r=t.length;if(!r||n&&n.f&&!n.l)return e||new i(0);var o=!e||n,s=!n||n.i;n||(n={}),e||(e=new i(3*r));var l=function(t){var n=e.length;if(t>n){var r=new i(Math.max(2*n,t));r.set(e),e=r}},f=n.f||0,p=n.p||0,d=n.b||0,g=n.l,y=n.d,m=n.m,S=n.n,v=8*r;do{if(!g){f=R(t,p,1);var I=R(t,p+1,3);if(p+=3,!I){var b=t[(G=F(p)+4)-4]|t[G-3]<<8,A=G+b;if(A>r){s&&L(0);break}o&&l(d+b),e.set(t.subarray(G,A),d),n.b=d+=b,n.p=p=8*A,n.f=f;continue}if(1==I)g=w,y=T,m=9,S=5;else if(2==I){var C=R(t,p,31)+257,P=R(t,p+10,15)+4,D=C+R(t,p+5,31)+1;p+=14;for(var x=new i(D),k=new i(19),M=0;M<P;++M)k[c[M]]=R(t,p+3*M,7);p+=3*P;var B=O(k),U=(1<<B)-1,j=E(k,B,1);for(M=0;M<D;){var G,H=j[R(t,p,U)];if(p+=15&H,(G=H>>>4)<16)x[M++]=G;else{var $=0,Y=0;for(16==G?(Y=3+R(t,p,3),p+=2,$=x[M-1]):17==G?(Y=3+R(t,p,7),p+=3):18==G&&(Y=11+R(t,p,127),p+=7);Y--;)x[M++]=$}}var V=x.subarray(0,C),K=x.subarray(C);m=O(V),S=O(K),g=E(V,m,1),y=E(K,S,1)}else L(1);if(p>v){s&&L(0);break}}o&&l(d+131072);for(var z=(1<<m)-1,q=(1<<S)-1,X=p;;X=p){var Z=($=g[N(t,p)&z])>>>4;if((p+=15&$)>v){s&&L(0);break}if($||L(2),Z<256)e[d++]=Z;else{if(256==Z){X=p,g=null;break}var J=Z-254;if(Z>264){var Q=a[M=Z-257];J=R(t,p,(1<<Q)-1)+h[M],p+=Q}var tt=y[N(t,p)&q],et=tt>>>4;if(tt||L(3),p+=15&tt,K=_[et],et>3&&(Q=u[et],K+=N(t,p)&(1<<Q)-1,p+=Q),p>v){s&&L(0);break}o&&l(d+131072);for(var nt=d+J;d<nt;d+=4)e[d]=e[d-K],e[d+1]=e[d+1-K],e[d+2]=e[d+2-K],e[d+3]=e[d+3-K];d=nt}}n.l=g,n.p=X,n.b=d,n.f=f,g&&(f=1,n.m=m,n.d=y,n.n=S)}while(!f);return d==e.length?e:W(e,0,d)},D=function(t,e,n){n<<=7&e;var r=e/8|0;t[r]|=n,t[r+1]|=n>>>8},x=function(t,e,n){n<<=7&e;var r=e/8|0;t[r]|=n,t[r+1]|=n>>>8,t[r+2]|=n>>>16},k=function(t,e){for(var n=[],r=0;r<t.length;++r)t[r]&&n.push({s:r,f:t[r]});var s=n.length,a=n.slice();if(!s)return[$,0];if(1==s){var u=new i(n[0].s+1);return u[n[0].s]=1,[u,1]}n.sort((function(t,e){return t.f-e.f})),n.push({s:-1,f:25001});var c=n[0],l=n[1],f=0,h=1,p=2;for(n[0]={s:-1,f:c.f+l.f,l:c,r:l};h!=s-1;)c=n[n[f].f<n[p].f?f++:p++],l=n[f!=h&&n[f].f<n[p].f?f++:p++],n[h++]={s:-1,f:c.f+l.f,l:c,r:l};var d=a[0].s;for(r=1;r<s;++r)a[r].s>d&&(d=a[r].s);var _=new o(d+1),g=M(n[h-1],_,0);if(g>e){r=0;var y=0,m=g-e,S=1<<m;for(a.sort((function(t,e){return _[e.s]-_[t.s]||t.f-e.f}));r<s;++r){var E=a[r].s;if(!(_[E]>e))break;y+=S-(1<<g-_[E]),_[E]=e}for(y>>>=m;y>0;){var v=a[r].s;_[v]<e?y-=1<<e-_[v]++-1:++r}for(;r>=0&&y;--r){var I=a[r].s;_[I]==e&&(--_[I],++y)}g=e}return[new i(_),g]},M=function(t,e,n){return-1==t.s?Math.max(M(t.l,e,n+1),M(t.r,e,n+1)):e[t.s]=n},B=function(t){for(var e=t.length;e&&!t[--e];);for(var n=new o(++e),r=0,i=t[0],s=1,a=function(t){n[r++]=t},u=1;u<=e;++u)if(t[u]==i&&u!=e)++s;else{if(!i&&s>2){for(;s>138;s-=138)a(32754);s>2&&(a(s>10?s-11<<5|28690:s-3<<5|12305),s=0)}else if(s>3){for(a(i),--s;s>6;s-=6)a(8304);s>2&&(a(s-3<<5|8208),s=0)}for(;s--;)a(i);s=1,i=t[u]}return[n.subarray(0,r),e]},U=function(t,e){for(var n=0,r=0;r<e.length;++r)n+=t[r]*e[r];return n},j=function(t,e,n){var r=n.length,i=F(e+2);t[i]=255&r,t[i+1]=r>>>8,t[i+2]=255^t[i],t[i+3]=255^t[i+1];for(var o=0;o<r;++o)t[i+o+4]=n[o];return 8*(i+4+r)},G=function(t,e,n,r,i,s,l,f,h,p,d){D(e,d++,n),++i[256];for(var _=k(i,15),g=_[0],y=_[1],m=k(s,15),S=m[0],w=m[1],T=B(g),O=T[0],R=T[1],N=B(S),F=N[0],W=N[1],C=new o(19),L=0;L<O.length;++L)C[31&O[L]]++;for(L=0;L<F.length;++L)C[31&F[L]]++;for(var P=k(C,7),M=P[0],G=P[1],H=19;H>4&&!M[c[H-1]];--H);var $,Y,V,K,z=p+5<<3,q=U(i,v)+U(s,I)+l,X=U(i,g)+U(s,S)+l+14+3*H+U(C,M)+(2*C[16]+3*C[17]+7*C[18]);if(z<=q&&z<=X)return j(e,d,t.subarray(h,h+p));if(D(e,d,1+(X<q)),d+=2,X<q){$=E(g,y,0),Y=g,V=E(S,w,0),K=S;var Z=E(M,G,0);for(D(e,d,R-257),D(e,d+5,W-1),D(e,d+10,H-4),d+=14,L=0;L<H;++L)D(e,d+3*L,M[c[L]]);d+=3*H;for(var J=[O,F],Q=0;Q<2;++Q){var tt=J[Q];for(L=0;L<tt.length;++L){var et=31&tt[L];D(e,d,Z[et]),d+=M[et],et>15&&(D(e,d,tt[L]>>>5&127),d+=tt[L]>>>12)}}}else $=b,Y=v,V=A,K=I;for(L=0;L<f;++L)if(r[L]>255){et=r[L]>>>18&31,x(e,d,$[et+257]),d+=Y[et+257],et>7&&(D(e,d,r[L]>>>23&31),d+=a[et]);var nt=31&r[L];x(e,d,V[nt]),d+=K[nt],nt>3&&(x(e,d,r[L]>>>5&8191),d+=u[nt])}else x(e,d,$[r[L]]),d+=Y[r[L]];return x(e,d,$[256]),d+Y[256]},H=new s([65540,131080,131088,131104,262176,1048704,1048832,2114560,2117632]),$=new i(0),Y=function(t,e,n,r,c,l){var f=t.length,h=new i(r+f+5*(1+Math.ceil(f/7e3))+c),d=h.subarray(r,h.length-c),_=0;if(!e||f<8)for(var y=0;y<=f;y+=65535){var m=y+65535;m>=f&&(d[_>>3]=l),_=j(d,_+1,t.subarray(y,m))}else{for(var S=H[e-1],E=S>>>13,v=8191&S,I=(1<<n)-1,b=new o(32768),w=new o(I+1),A=Math.ceil(n/3),T=2*A,O=function(e){return(t[e]^t[e+1]<<A^t[e+2]<<T)&I},R=new s(25e3),N=new o(288),C=new o(32),L=0,P=0,D=(y=0,0),x=0,k=0;y<f;++y){var M=O(y),B=32767&y,U=w[M];if(b[B]=U,w[M]=B,x<=y){var Y=f-y;if((L>7e3||D>24576)&&Y>423){_=G(t,d,0,R,N,C,P,D,k,y-k,_),D=L=P=0,k=y;for(var V=0;V<286;++V)N[V]=0;for(V=0;V<30;++V)C[V]=0}var K=2,z=0,q=v,X=B-U&32767;if(Y>2&&M==O(y-X))for(var Z=Math.min(E,Y)-1,J=Math.min(32767,y),Q=Math.min(258,Y);X<=J&&--q&&B!=U;){if(t[y+K]==t[y+K-X]){for(var tt=0;tt<Q&&t[y+tt]==t[y+tt-X];++tt);if(tt>K){if(K=tt,z=X,tt>Z)break;var et=Math.min(X,tt-2),nt=0;for(V=0;V<et;++V){var rt=y-X+V+32768&32767,it=rt-b[rt]+32768&32767;it>nt&&(nt=it,U=rt)}}}X+=(B=U)-(U=b[B])+32768&32767}if(z){R[D++]=268435456|p[K]<<18|g[z];var ot=31&p[K],st=31&g[z];P+=a[ot]+u[st],++N[257+ot],++C[st],x=y+K,++L}else R[D++]=t[y],++N[t[y]]}}_=G(t,d,l,R,N,C,P,D,k,y-k,_),!l&&7&_&&(_=j(d,_+1,$))}return W(h,0,r+F(_)+c)},V=function(){for(var t=new Int32Array(256),e=0;e<256;++e){for(var n=e,r=9;--r;)n=(1&n&&-306674912)^n>>>1;t[e]=n}return t}(),K=function(){var t=-1;return{p:function(e){for(var n=t,r=0;r<e.length;++r)n=V[255&n^e[r]]^n>>>8;t=n},d:function(){return~t}}},z=function(){var t=1,e=0;return{p:function(n){for(var r=t,i=e,o=0|n.length,s=0;s!=o;){for(var a=Math.min(s+2655,o);s<a;++s)i+=r+=n[s];r=(65535&r)+15*(r>>16),i=(65535&i)+15*(i>>16)}t=r,e=i},d:function(){return(255&(t%=65521))<<24|t>>>8<<16|(255&(e%=65521))<<8|e>>>8}}},q=function(t,e,n,r,i){return Y(t,null==e.level?6:e.level,null==e.mem?Math.ceil(1.5*Math.max(8,Math.min(13,Math.log(t.length)))):12+e.mem,n,r,!i)},X=function(t,e){var n={};for(var r in t)n[r]=t[r];for(var r in e)n[r]=e[r];return n},Z=function(t,e,n){for(var r=t(),i=t.toString(),o=i.slice(i.indexOf("[")+1,i.lastIndexOf("]")).replace(/\s+/g,"").split(","),s=0;s<r.length;++s){var a=r[s],u=o[s];if("function"==typeof a){e+=";"+u+"=";var c=a.toString();if(a.prototype)if(-1!=c.indexOf("[native code]")){var l=c.indexOf(" ",8)+1;e+=c.slice(l,c.indexOf("(",l))}else for(var f in e+=c,a.prototype)e+=";"+u+".prototype."+f+"="+a.prototype[f].toString();else e+=c}else n[u]=a}return[e,n]},J=[],Q=function(t,e,n,i){var o;if(!J[n]){for(var s="",a={},u=t.length-1,c=0;c<u;++c)s=(o=Z(t[c],s,a))[0],a=o[1];J[n]=Z(t[u],s,a)}var l=X({},J[n][1]);return r.default(J[n][0]+";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage="+e.toString()+"}",n,l,function(t){var e=[];for(var n in t)t[n].buffer&&e.push((t[n]=new t[n].constructor(t[n])).buffer);return e}(l),i)},tt=function(){return[i,o,s,a,u,c,h,_,w,T,y,C,E,O,R,N,F,W,L,P,Nt,st,at]},et=function(){return[i,o,s,a,u,c,p,g,b,v,A,I,y,H,$,E,D,x,k,M,B,U,j,G,F,W,Y,q,At,st]},nt=function(){return[_t,mt,dt,K,V]},rt=function(){return[gt,yt]},it=function(){return[St,dt,z]},ot=function(){return[Et]},st=function(t){return postMessage(t,[t.buffer])},at=function(t){return t&&t.size&&new i(t.size)},ut=function(t,e,n,r,i,o){var s=Q(n,r,i,(function(t,e){s.terminate(),o(t,e)}));return s.postMessage([t,e],e.consume?[t.buffer]:[]),function(){s.terminate()}},ct=function(t){return t.ondata=function(t,e){return postMessage([t,e],[t.buffer])},function(e){return t.push(e.data[0],e.data[1])}},lt=function(t,e,n,r,i){var o,s=Q(t,r,i,(function(t,n){t?(s.terminate(),e.ondata.call(e,t)):(n[1]&&s.terminate(),e.ondata.call(e,t,n[0],n[1]))}));s.postMessage(n),e.push=function(t,n){e.ondata||L(5),o&&e.ondata(L(4,0,1),null,!!n),s.postMessage([t,o=n],[t.buffer])},e.terminate=function(){s.terminate()}},ft=function(t,e){return t[e]|t[e+1]<<8},ht=function(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0},pt=function(t,e){return ht(t,e)+4294967296*ht(t,e+4)},dt=function(t,e,n){for(;n;++e)t[e]=n,n>>>=8},_t=function(t,e){var n=e.filename;if(t[0]=31,t[1]=139,t[2]=8,t[8]=e.level<2?4:9==e.level?2:0,t[9]=3,0!=e.mtime&&dt(t,4,Math.floor(new Date(e.mtime||Date.now())/1e3)),n){t[3]=8;for(var r=0;r<=n.length;++r)t[r+10]=n.charCodeAt(r)}},gt=function(t){31==t[0]&&139==t[1]&&8==t[2]||L(6,"invalid gzip data");var e=t[3],n=10;4&e&&(n+=t[10]|2+(t[11]<<8));for(var r=(e>>3&1)+(e>>4&1);r>0;r-=!t[n++]);return n+(2&e)},yt=function(t){var e=t.length;return(t[e-4]|t[e-3]<<8|t[e-2]<<16|t[e-1]<<24)>>>0},mt=function(t){return 10+(t.filename&&t.filename.length+1||0)},St=function(t,e){var n=e.level,r=0==n?0:n<6?1:9==n?3:2;t[0]=120,t[1]=r<<6|(r?32-2*r:1)},Et=function(t){(8!=(15&t[0])||t[0]>>>4>7||(t[0]<<8|t[1])%31)&&L(6,"invalid zlib data"),32&t[1]&&L(6,"invalid zlib data: preset dictionaries not supported")};function vt(t,e){return e||"function"!=typeof t||(e=t,t={}),this.ondata=e,t}var It=function(){function t(t,e){e||"function"!=typeof t||(e=t,t={}),this.ondata=e,this.o=t||{}}return t.prototype.p=function(t,e){this.ondata(q(t,this.o,0,0,!e),e)},t.prototype.push=function(t,e){this.ondata||L(5),this.d&&L(4),this.d=e,this.p(t,e||!1)},t}();e.Deflate=It;var bt=function(){return function(t,e){lt([et,function(){return[ct,It]}],this,vt.call(this,t,e),(function(t){var e=new It(t.data);onmessage=ct(e)}),6)}}();function wt(t,e,n){return n||(n=e,e={}),"function"!=typeof n&&L(7),ut(t,e,[et],(function(t){return st(At(t.data[0],t.data[1]))}),0,n)}function At(t,e){return q(t,e||{},0,0)}e.AsyncDeflate=bt,e.deflate=wt,e.deflateSync=At;var Tt=function(){function t(t){this.s={},this.p=new i(0),this.ondata=t}return t.prototype.e=function(t){this.ondata||L(5),this.d&&L(4);var e=this.p.length,n=new i(e+t.length);n.set(this.p),n.set(t,e),this.p=n},t.prototype.c=function(t){this.d=this.s.i=t||!1;var e=this.s.b,n=P(this.p,this.o,this.s);this.ondata(W(n,e,this.s.b),this.d),this.o=W(n,this.s.b-32768),this.s.b=this.o.length,this.p=W(this.p,this.s.p/8|0),this.s.p&=7},t.prototype.push=function(t,e){this.e(t),this.c(e)},t}();e.Inflate=Tt;var Ot=function(){return function(t){this.ondata=t,lt([tt,function(){return[ct,Tt]}],this,0,(function(){var t=new Tt;onmessage=ct(t)}),7)}}();function Rt(t,e,n){return n||(n=e,e={}),"function"!=typeof n&&L(7),ut(t,e,[tt],(function(t){return st(Nt(t.data[0],at(t.data[1])))}),1,n)}function Nt(t,e){return P(t,e)}e.AsyncInflate=Ot,e.inflate=Rt,e.inflateSync=Nt;var Ft=function(){function t(t,e){this.c=K(),this.l=0,this.v=1,It.call(this,t,e)}return t.prototype.push=function(t,e){It.prototype.push.call(this,t,e)},t.prototype.p=function(t,e){this.c.p(t),this.l+=t.length;var n=q(t,this.o,this.v&&mt(this.o),e&&8,!e);this.v&&(_t(n,this.o),this.v=0),e&&(dt(n,n.length-8,this.c.d()),dt(n,n.length-4,this.l)),this.ondata(n,e)},t}();e.Gzip=Ft,e.Compress=Ft;var Wt=function(){return function(t,e){lt([et,nt,function(){return[ct,It,Ft]}],this,vt.call(this,t,e),(function(t){var e=new Ft(t.data);onmessage=ct(e)}),8)}}();function Ct(t,e,n){return n||(n=e,e={}),"function"!=typeof n&&L(7),ut(t,e,[et,nt,function(){return[Lt]}],(function(t){return st(Lt(t.data[0],t.data[1]))}),2,n)}function Lt(t,e){e||(e={});var n=K(),r=t.length;n.p(t);var i=q(t,e,mt(e),8),o=i.length;return _t(i,e),dt(i,o-8,n.d()),dt(i,o-4,r),i}e.AsyncGzip=Wt,e.AsyncCompress=Wt,e.gzip=Ct,e.compress=Ct,e.gzipSync=Lt,e.compressSync=Lt;var Pt=function(){function t(t){this.v=1,Tt.call(this,t)}return t.prototype.push=function(t,e){if(Tt.prototype.e.call(this,t),this.v){var n=this.p.length>3?gt(this.p):4;if(n>=this.p.length&&!e)return;this.p=this.p.subarray(n),this.v=0}e&&(this.p.length<8&&L(6,"invalid gzip data"),this.p=this.p.subarray(0,-8)),Tt.prototype.c.call(this,e)},t}();e.Gunzip=Pt;var Dt=function(){return function(t){this.ondata=t,lt([tt,rt,function(){return[ct,Tt,Pt]}],this,0,(function(){var t=new Pt;onmessage=ct(t)}),9)}}();function xt(t,e,n){return n||(n=e,e={}),"function"!=typeof n&&L(7),ut(t,e,[tt,rt,function(){return[kt]}],(function(t){return st(kt(t.data[0]))}),3,n)}function kt(t,e){return P(t.subarray(gt(t),-8),e||new i(yt(t)))}e.AsyncGunzip=Dt,e.gunzip=xt,e.gunzipSync=kt;var Mt=function(){function t(t,e){this.c=z(),this.v=1,It.call(this,t,e)}return t.prototype.push=function(t,e){It.prototype.push.call(this,t,e)},t.prototype.p=function(t,e){this.c.p(t);var n=q(t,this.o,this.v&&2,e&&4,!e);this.v&&(St(n,this.o),this.v=0),e&&dt(n,n.length-4,this.c.d()),this.ondata(n,e)},t}();e.Zlib=Mt;var Bt=function(){return function(t,e){lt([et,it,function(){return[ct,It,Mt]}],this,vt.call(this,t,e),(function(t){var e=new Mt(t.data);onmessage=ct(e)}),10)}}();function Ut(t,e){e||(e={});var n=z();n.p(t);var r=q(t,e,2,4);return St(r,e),dt(r,r.length-4,n.d()),r}e.AsyncZlib=Bt,e.zlib=function(t,e,n){return n||(n=e,e={}),"function"!=typeof n&&L(7),ut(t,e,[et,it,function(){return[Ut]}],(function(t){return st(Ut(t.data[0],t.data[1]))}),4,n)},e.zlibSync=Ut;var jt=function(){function t(t){this.v=1,Tt.call(this,t)}return t.prototype.push=function(t,e){if(Tt.prototype.e.call(this,t),this.v){if(this.p.length<2&&!e)return;this.p=this.p.subarray(2),this.v=0}e&&(this.p.length<4&&L(6,"invalid zlib data"),this.p=this.p.subarray(0,-4)),Tt.prototype.c.call(this,e)},t}();e.Unzlib=jt;var Gt=function(){return function(t){this.ondata=t,lt([tt,ot,function(){return[ct,Tt,jt]}],this,0,(function(){var t=new jt;onmessage=ct(t)}),11)}}();function Ht(t,e,n){return n||(n=e,e={}),"function"!=typeof n&&L(7),ut(t,e,[tt,ot,function(){return[$t]}],(function(t){return st($t(t.data[0],at(t.data[1])))}),5,n)}function $t(t,e){return P((Et(t),t.subarray(2,-4)),e)}e.AsyncUnzlib=Gt,e.unzlib=Ht,e.unzlibSync=$t;var Yt=function(){function t(t){this.G=Pt,this.I=Tt,this.Z=jt,this.ondata=t}return t.prototype.push=function(t,e){if(this.ondata||L(5),this.s)this.s.push(t,e);else{if(this.p&&this.p.length){var n=new i(this.p.length+t.length);n.set(this.p),n.set(t,this.p.length)}else this.p=t;if(this.p.length>2){var r=this,o=function(){r.ondata.apply(r,arguments)};this.s=31==this.p[0]&&139==this.p[1]&&8==this.p[2]?new this.G(o):8!=(15&this.p[0])||this.p[0]>>4>7||(this.p[0]<<8|this.p[1])%31?new this.I(o):new this.Z(o),this.s.push(this.p,e),this.p=null}}},t}();e.Decompress=Yt;var Vt=function(){function t(t){this.G=Dt,this.I=Ot,this.Z=Gt,this.ondata=t}return t.prototype.push=function(t,e){Yt.prototype.push.call(this,t,e)},t}();e.AsyncDecompress=Vt,e.decompress=function(t,e,n){return n||(n=e,e={}),"function"!=typeof n&&L(7),31==t[0]&&139==t[1]&&8==t[2]?xt(t,e,n):8!=(15&t[0])||t[0]>>4>7||(t[0]<<8|t[1])%31?Rt(t,e,n):Ht(t,e,n)},e.decompressSync=function(t,e){return 31==t[0]&&139==t[1]&&8==t[2]?kt(t,e):8!=(15&t[0])||t[0]>>4>7||(t[0]<<8|t[1])%31?Nt(t,e):$t(t,e)};var Kt=function(t,e,n,r){for(var o in t){var s=t[o],a=e+o,u=r;Array.isArray(s)&&(u=X(r,s[1]),s=s[0]),s instanceof i?n[a]=[s,u]:(n[a+="/"]=[new i(0),u],Kt(s,a,n,r))}},zt="undefined"!=typeof TextEncoder&&new TextEncoder,qt="undefined"!=typeof TextDecoder&&new TextDecoder,Xt=0;try{qt.decode($,{stream:!0}),Xt=1}catch(t){}var Zt=function(t){for(var e="",n=0;;){var r=t[n++],i=(r>127)+(r>223)+(r>239);if(n+i>t.length)return[e,W(t,n-1)];i?3==i?(r=((15&r)<<18|(63&t[n++])<<12|(63&t[n++])<<6|63&t[n++])-65536,e+=String.fromCharCode(55296|r>>10,56320|1023&r)):e+=1&i?String.fromCharCode((31&r)<<6|63&t[n++]):String.fromCharCode((15&r)<<12|(63&t[n++])<<6|63&t[n++]):e+=String.fromCharCode(r)}},Jt=function(){function t(t){this.ondata=t,Xt?this.t=new TextDecoder:this.p=$}return t.prototype.push=function(t,e){if(this.ondata||L(5),e=!!e,this.t)return this.ondata(this.t.decode(t,{stream:!0}),e),void(e&&(this.t.decode().length&&L(8),this.t=null));this.p||L(4);var n=new i(this.p.length+t.length);n.set(this.p),n.set(t,this.p.length);var r=Zt(n),o=r[0],s=r[1];e?(s.length&&L(8),this.p=null):this.p=s,this.ondata(o,e)},t}();e.DecodeUTF8=Jt;var Qt=function(){function t(t){this.ondata=t}return t.prototype.push=function(t,e){this.ondata||L(5),this.d&&L(4),this.ondata(te(t),this.d=e||!1)},t}();function te(t,e){if(e){for(var n=new i(t.length),r=0;r<t.length;++r)n[r]=t.charCodeAt(r);return n}if(zt)return zt.encode(t);var o=t.length,s=new i(t.length+(t.length>>1)),a=0,u=function(t){s[a++]=t};for(r=0;r<o;++r){if(a+5>s.length){var c=new i(a+8+(o-r<<1));c.set(s),s=c}var l=t.charCodeAt(r);l<128||e?u(l):l<2048?(u(192|l>>6),u(128|63&l)):l>55295&&l<57344?(u(240|(l=65536+(1047552&l)|1023&t.charCodeAt(++r))>>18),u(128|l>>12&63),u(128|l>>6&63),u(128|63&l)):(u(224|l>>12),u(128|l>>6&63),u(128|63&l))}return W(s,0,a)}function ee(t,e){if(e){for(var n="",r=0;r<t.length;r+=16384)n+=String.fromCharCode.apply(null,t.subarray(r,r+16384));return n}if(qt)return qt.decode(t);var i=Zt(t),o=i[0];return i[1].length&&L(8),o}e.EncodeUTF8=Qt,e.strToU8=te,e.strFromU8=ee;var ne=function(t){return 1==t?3:t<6?2:9==t?1:0},re=function(t,e){return e+30+ft(t,e+26)+ft(t,e+28)},ie=function(t,e,n){var r=ft(t,e+28),i=ee(t.subarray(e+46,e+46+r),!(2048&ft(t,e+8))),o=e+46+r,s=ht(t,e+20),a=n&&4294967295==s?oe(t,o):[s,ht(t,e+24),ht(t,e+42)],u=a[0],c=a[1],l=a[2];return[ft(t,e+10),u,c,i,o+ft(t,e+30)+ft(t,e+32),l]},oe=function(t,e){for(;1!=ft(t,e);e+=4+ft(t,e+2));return[pt(t,e+12),pt(t,e+4),pt(t,e+20)]},se=function(t){var e=0;if(t)for(var n in t){var r=t[n].length;r>65535&&L(9),e+=r+4}return e},ae=function(t,e,n,r,i,o,s,a){var u=r.length,c=n.extra,l=a&&a.length,f=se(c);dt(t,e,null!=s?33639248:67324752),e+=4,null!=s&&(t[e++]=20,t[e++]=n.os),t[e]=20,e+=2,t[e++]=n.flag<<1|(o<0&&8),t[e++]=i&&8,t[e++]=255&n.compression,t[e++]=n.compression>>8;var h=new Date(null==n.mtime?Date.now():n.mtime),p=h.getFullYear()-1980;if((p<0||p>119)&&L(10),dt(t,e,p<<25|h.getMonth()+1<<21|h.getDate()<<16|h.getHours()<<11|h.getMinutes()<<5|h.getSeconds()>>>1),e+=4,-1!=o&&(dt(t,e,n.crc),dt(t,e+4,o<0?-o-2:o),dt(t,e+8,n.size)),dt(t,e+12,u),dt(t,e+14,f),e+=16,null!=s&&(dt(t,e,l),dt(t,e+6,n.attrs),dt(t,e+10,s),e+=14),t.set(r,e),e+=u,f)for(var d in c){var _=c[d],g=_.length;dt(t,e,+d),dt(t,e+2,g),t.set(_,e+4),e+=4+g}return l&&(t.set(a,e),e+=l),e},ue=function(t,e,n,r,i){dt(t,e,101010256),dt(t,e+8,n),dt(t,e+10,n),dt(t,e+12,r),dt(t,e+16,i)},ce=function(){function t(t){this.filename=t,this.c=K(),this.size=0,this.compression=0}return t.prototype.process=function(t,e){this.ondata(null,t,e)},t.prototype.push=function(t,e){this.ondata||L(5),this.c.p(t),this.size+=t.length,e&&(this.crc=this.c.d()),this.process(t,e||!1)},t}();e.ZipPassThrough=ce;var le=function(){function t(t,e){var n=this;e||(e={}),ce.call(this,t),this.d=new It(e,(function(t,e){n.ondata(null,t,e)})),this.compression=8,this.flag=ne(e.level)}return t.prototype.process=function(t,e){try{this.d.push(t,e)}catch(t){this.ondata(t,null,e)}},t.prototype.push=function(t,e){ce.prototype.push.call(this,t,e)},t}();e.ZipDeflate=le;var fe=function(){function t(t,e){var n=this;e||(e={}),ce.call(this,t),this.d=new bt(e,(function(t,e,r){n.ondata(t,e,r)})),this.compression=8,this.flag=ne(e.level),this.terminate=this.d.terminate}return t.prototype.process=function(t,e){this.d.push(t,e)},t.prototype.push=function(t,e){ce.prototype.push.call(this,t,e)},t}();e.AsyncZipDeflate=fe;var he=function(){function t(t){this.ondata=t,this.u=[],this.d=1}return t.prototype.add=function(t){var e=this;if(this.ondata||L(5),2&this.d)this.ondata(L(4+8*(1&this.d),0,1),null,!1);else{var n=te(t.filename),r=n.length,o=t.comment,s=o&&te(o),a=r!=t.filename.length||s&&o.length!=s.length,u=r+se(t.extra)+30;r>65535&&this.ondata(L(11,0,1),null,!1);var c=new i(u);ae(c,0,t,n,a,-1);var l=[c],f=function(){for(var t=0,n=l;t<n.length;t++){var r=n[t];e.ondata(null,r,!1)}l=[]},h=this.d;this.d=0;var p=this.u.length,d=X(t,{f:n,u:a,o:s,t:function(){t.terminate&&t.terminate()},r:function(){if(f(),h){var t=e.u[p+1];t?t.r():e.d=1}h=1}}),_=0;t.ondata=function(n,r,o){if(n)e.ondata(n,r,o),e.terminate();else if(_+=r.length,l.push(r),o){var s=new i(16);dt(s,0,134695760),dt(s,4,t.crc),dt(s,8,_),dt(s,12,t.size),l.push(s),d.c=_,d.b=u+_+16,d.crc=t.crc,d.size=t.size,h&&d.r(),h=1}else h&&f()},this.u.push(d)}},t.prototype.end=function(){var t=this;2&this.d?this.ondata(L(4+8*(1&this.d),0,1),null,!0):(this.d?this.e():this.u.push({r:function(){1&t.d&&(t.u.splice(-1,1),t.e())},t:function(){}}),this.d=3)},t.prototype.e=function(){for(var t=0,e=0,n=0,r=0,o=this.u;r<o.length;r++)n+=46+(c=o[r]).f.length+se(c.extra)+(c.o?c.o.length:0);for(var s=new i(n+22),a=0,u=this.u;a<u.length;a++){var c=u[a];ae(s,t,c,c.f,c.u,-c.c-2,e,c.o),t+=46+c.f.length+se(c.extra)+(c.o?c.o.length:0),e+=c.b}ue(s,t,this.u.length,n,e),this.ondata(null,s,!0),this.d=2},t.prototype.terminate=function(){for(var t=0,e=this.u;t<e.length;t++)e[t].t();this.d=2},t}();e.Zip=he,e.zip=function(t,e,n){n||(n=e,e={}),"function"!=typeof n&&L(7);var r={};Kt(t,"",r,e);var o=Object.keys(r),s=o.length,a=0,u=0,c=s,l=new Array(s),f=[],h=function(){for(var t=0;t<f.length;++t)f[t]()},p=function(t,e){ye((function(){n(t,e)}))};ye((function(){p=n}));var d=function(){var t=new i(u+22),e=a,n=u-a;u=0;for(var r=0;r<c;++r){var o=l[r];try{var s=o.c.length;ae(t,u,o,o.f,o.u,s);var f=30+o.f.length+se(o.extra),h=u+f;t.set(o.c,h),ae(t,a,o,o.f,o.u,s,u,o.m),a+=16+f+(o.m?o.m.length:0),u=h+s}catch(t){return p(t,null)}}ue(t,a,l.length,n,e),p(null,t)};s||d();for(var _=function(t){var e=o[t],n=r[e],i=n[0],c=n[1],_=K(),g=i.length;_.p(i);var y=te(e),m=y.length,S=c.comment,E=S&&te(S),v=E&&E.length,I=se(c.extra),b=0==c.level?0:8,w=function(n,r){if(n)h(),p(n,null);else{var i=r.length;l[t]=X(c,{size:g,crc:_.d(),c:r,f:y,m:E,u:m!=e.length||E&&S.length!=v,compression:b}),a+=30+m+I+i,u+=76+2*(m+I)+(v||0)+i,--s||d()}};if(m>65535&&w(L(11,0,1),null),b)if(g<16e4)try{w(null,At(i,c))}catch(t){w(t,null)}else f.push(wt(i,c,w));else w(null,i)},g=0;g<c;++g)_(g);return h},e.zipSync=function(t,e){e||(e={});var n={},r=[];Kt(t,"",n,e);var o=0,s=0;for(var a in n){var u=n[a],c=u[0],l=u[1],f=0==l.level?0:8,h=(w=te(a)).length,p=l.comment,d=p&&te(p),_=d&&d.length,g=se(l.extra);h>65535&&L(11);var y=f?At(c,l):c,m=y.length,S=K();S.p(c),r.push(X(l,{size:c.length,crc:S.d(),c:y,f:w,m:d,u:h!=a.length||d&&p.length!=_,o,compression:f})),o+=30+h+g+m,s+=76+2*(h+g)+(_||0)+m}for(var E=new i(s+22),v=o,I=s-o,b=0;b<r.length;++b){var w=r[b];ae(E,w.o,w,w.f,w.u,w.c.length);var A=30+w.f.length+se(w.extra);E.set(w.c,w.o+A),ae(E,o,w,w.f,w.u,w.c.length,w.o,w.m),o+=16+A+(w.m?w.m.length:0)}return ue(E,o,r.length,I,v),E};var pe=function(){function t(){}return t.prototype.push=function(t,e){this.ondata(null,t,e)},t.compression=0,t}();e.UnzipPassThrough=pe;var de=function(){function t(){var t=this;this.i=new Tt((function(e,n){t.ondata(null,e,n)}))}return t.prototype.push=function(t,e){try{this.i.push(t,e)}catch(t){this.ondata(t,null,e)}},t.compression=8,t}();e.UnzipInflate=de;var _e=function(){function t(t,e){var n=this;e<32e4?this.i=new Tt((function(t,e){n.ondata(null,t,e)})):(this.i=new Ot((function(t,e,r){n.ondata(t,e,r)})),this.terminate=this.i.terminate)}return t.prototype.push=function(t,e){this.i.terminate&&(t=W(t,0)),this.i.push(t,e)},t.compression=8,t}();e.AsyncUnzipInflate=_e;var ge=function(){function t(t){this.onfile=t,this.k=[],this.o={0:pe},this.p=$}return t.prototype.push=function(t,e){var n=this;if(this.onfile||L(5),this.p||L(4),this.c>0){var r=Math.min(this.c,t.length),o=t.subarray(0,r);if(this.c-=r,this.d?this.d.push(o,!this.c):this.k[0].push(o),(t=t.subarray(r)).length)return this.push(t,e)}else{var s=0,a=0,u=void 0,c=void 0;this.p.length?t.length?((c=new i(this.p.length+t.length)).set(this.p),c.set(t,this.p.length)):c=this.p:c=t;for(var l=c.length,f=this.c,h=f&&this.d,p=function(){var t,e=ht(c,a);if(67324752==e){s=1,u=a,d.d=null,d.c=0;var r=ft(c,a+6),i=ft(c,a+8),o=2048&r,h=8&r,p=ft(c,a+26),_=ft(c,a+28);if(l>a+30+p+_){var g=[];d.k.unshift(g),s=2;var y,m=ht(c,a+18),S=ht(c,a+22),E=ee(c.subarray(a+30,a+=30+p),!o);4294967295==m?(t=h?[-2]:oe(c,a),m=t[0],S=t[1]):h&&(m=-1),a+=_,d.c=m;var v={name:E,compression:i,start:function(){if(v.ondata||L(5),m){var t=n.o[i];t||v.ondata(L(14,"unknown compression type "+i,1),null,!1),(y=m<0?new t(E):new t(E,m,S)).ondata=function(t,e,n){v.ondata(t,e,n)};for(var e=0,r=g;e<r.length;e++){var o=r[e];y.push(o,!1)}n.k[0]==g&&n.c?n.d=y:y.push($,!0)}else v.ondata(null,$,!0)},terminate:function(){y&&y.terminate&&y.terminate()}};m>=0&&(v.size=m,v.originalSize=S),d.onfile(v)}return"break"}if(f){if(134695760==e)return u=a+=12+(-2==f&&8),s=3,d.c=0,"break";if(33639248==e)return u=a-=4,s=3,d.c=0,"break"}},d=this;a<l-4&&"break"!==p();++a);if(this.p=$,f<0){var _=s?c.subarray(0,u-12-(-2==f&&8)-(134695760==ht(c,u-16)&&4)):c.subarray(0,a);h?h.push(_,!!s):this.k[+(2==s)].push(_)}if(2&s)return this.push(c.subarray(a),e);this.p=c.subarray(a)}e&&(this.c&&L(13),this.p=null)},t.prototype.register=function(t){this.o[t.compression]=t},t}();e.Unzip=ge;var ye="function"==typeof queueMicrotask?queueMicrotask:"function"==typeof setTimeout?setTimeout:function(t){t()};e.unzip=function(t,e,n){n||(n=e,e={}),"function"!=typeof n&&L(7);var r=[],o=function(){for(var t=0;t<r.length;++t)r[t]()},s={},a=function(t,e){ye((function(){n(t,e)}))};ye((function(){a=n}));for(var u=t.length-22;101010256!=ht(t,u);--u)if(!u||t.length-u>65558)return a(L(13,0,1),null),o;var c=ft(t,u+8);if(c){var l=c,f=ht(t,u+16),h=4294967295==f||65535==l;if(h){var p=ht(t,u-12);(h=101075792==ht(t,p))&&(l=c=ht(t,p+32),f=ht(t,p+48))}for(var d=e&&e.filter,_=function(e){var n=ie(t,f,h),u=n[0],l=n[1],p=n[2],_=n[3],g=n[4],y=n[5],m=re(t,y);f=g;var S=function(t,e){t?(o(),a(t,null)):(e&&(s[_]=e),--c||a(null,s))};if(!d||d({name:_,size:l,originalSize:p,compression:u}))if(u)if(8==u){var E=t.subarray(m,m+l);if(l<32e4)try{S(null,Nt(E,new i(p)))}catch(t){S(t,null)}else r.push(Rt(E,{size:p},S))}else S(L(14,"unknown compression type "+u,1),null);else S(null,W(t,m,m+l));else S(null,null)},g=0;g<l;++g)_()}else a(null,{});return o},e.unzipSync=function(t,e){for(var n={},r=t.length-22;101010256!=ht(t,r);--r)(!r||t.length-r>65558)&&L(13);var o=ft(t,r+8);if(!o)return{};var s=ht(t,r+16),a=4294967295==s||65535==o;if(a){var u=ht(t,r-12);(a=101075792==ht(t,u))&&(o=ht(t,u+32),s=ht(t,u+48))}for(var c=e&&e.filter,l=0;l<o;++l){var f=ie(t,s,a),h=f[0],p=f[1],d=f[2],_=f[3],g=f[4],y=f[5],m=re(t,y);s=g,c&&!c({name:_,size:p,originalSize:d,compression:h})||(h?8==h?n[_]=Nt(t.subarray(m,m+p),new i(d)):L(14,"unknown compression type "+h):n[_]=W(t,m,m+p))}return n}},5928:(t,e)=>{"use strict";var n={};e.default=function(t,e,r,i,o){var s=new Worker(n[e]||(n[e]=URL.createObjectURL(new Blob([t+';addEventListener("error",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'],{type:"text/javascript"}))));return s.onmessage=function(t){var e=t.data,n=e.$e$;if(n){var r=new Error(n[0]);r.code=n[1],r.stack=n[2],o(r,null)}else o(null,e)},s.postMessage(r,i),s}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,